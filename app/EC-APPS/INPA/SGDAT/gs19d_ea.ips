/**********************************************************************************************************
 *
 *   Nacharbeitssource für INPA Getriebe_Steuergeräte mit BMW Fast  
 *   Version für Entwicklung Automatikgetriebe GS19.11.3 (EA-71)
 *   Versionsnummer:  0.4
 *
 *   deutsche Version GS19D_EA.IPS
 *   
 **********************************************************************************************************
 *   Bravo/Reuter/Huber EA-71
 **********************************************************************************************************
 *   History : 
 *             01.04.05 Übernahme von gs19b_ea aus E65 Projekt   		                    0.1  Hu
 *             29.04.05 Anpassung an 6HPTÜ Getriebeprojekt inkl. GWS Überarbeitung	   	    0.2  He
 *             04.07.05 Anpassung an SGBD V0.066					   	    0.3  He
 *	       01.09.05 Anpassung an SGBD V0.080						    0.4  He
 **********************************************************************************************************/

#pragma winedit

#include "..\sgdat\inpa.h"
#include "..\sgdat\bmw_std.h"


// Version, Verantwortung, Steuergerät
string titel  ="GS19.11.3";                          	// Titel Nacharbeitsprogramm
string version="0.4";                              	// Version Nacharbeitsprogramm
string origin ="BMW EA-71 Bravo/Reuter/Huber";		// Anpassung INPA-Oberfläche
string sgbd   ="GS19.11.3";                          	// Steuergerät
string gruppe ="--------";                         	// Gruppendatei
string zeilentext;
int fehler_gesamt;
int offset;
int counter;
int BMW_fast;
int counter_1;
int enable1;
int spalte;
int zeile;
int array_spalte;
int array_zeile;
string speicher_lesen_parameter="LAR;FLASH;UIFM;-ROMI;-ROMX;-RAMIS;-RAMIL;-RAMXX;-NVRAM";

string ea71_version ="1.3";             // nur zur Unterscheidung der EA-71 Entw.-Programme
int    test_var_gang;
string wert1_laenge_text,wert2_laenge_text,wert3_laenge_text,wert4_laenge_text,wert5_laenge_text;
string text_zahl_adresse;
int    zahl_adresse_1,zahl_adresse_2,zahl_adresse_3,zahl_adresse_4,zahl_adresse_5;
int    platz;
int    wert1_antw_laenge,wert2_antw_laenge,wert3_antw_laenge,wert4_antw_laenge,wert5_antw_laenge ;
int    wert1,wert2,wert3,wert4,wert5;
int    slaenge;
string blank1, text_var_1;
string wert1_text,wert2_text,wert3_text,wert4_text,wert5_text;
string speicher_seg_1,speicher_seg_2,speicher_seg_3,speicher_seg_4,speicher_seg_5;
int    wert1_lang,wert2_lang,wert3_lang,wert4_lang,wert5_lang;
string blank2;
real   real_zahl;
bool   tmpBool;
bool   logik_var;   
int    input_ok=0;                      // Eingabe  mit OK beendet
int    uw_anzahl;
int    int_var;
int    set;
int    FzgProjZugriff;                
int    ESchaltung,MSchaltung;
int    Fzg_E65,Fzg_E6x,Fzg_PL2,Fzg_E83;
int    input_state,input_state2;        // Eingabestatus
int    input_state_FS,input_state2_FS;  // Eingabestatus
string func_io;                    
string file="C:\EGS_Temp.txt";            // Dateiname
bool   file_da=FALSE;                   // Datei initialisiert=TRUE
string f_uw_text;
string einh_var;
string test_var;
string text_zahl;
string text_status;
string f_uw_wert;
string f_uw_einh;
string wert1_binary,wert2_binary,wert3_binary,wert4_binary,wert5_binary;
int    uw_bedingungen;
int    fehlercode;
int    zahl;
int    satz_tel_antwort;
int    anzahl_uw_saetze;
string fehler_text;
int    fehler_ist;
int    int_zahl;
int    unsigned_int_zahl;
int    p_version;
string counter_string;
string text_var; 
string text_p_version;
int    user_ausstieg;
string Bearbeitername;
string FahrzeugFGN;


// start of :#include "bmw_std.src"
//**********************************************************************
//*
//* INPA Library-Funktionen BMW_STD.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 05.05.2000 rd V0.01 Ersterstellung
//* 23.06.2000 rd V0.02 Überarbeitung für E65 und E85
//* 04.07.2000 rd V0.03 Überarbeitung der Funktionen
//* 08.11.2000 rd V0.04 AIF Lesen Results überarbeitet
//**********************************************************************
string package="0.04";                // Package Nr

//**********************************************************************
//*
//* Globale Variablen
//*
//**********************************************************************

// Umrechnungsfaktoren deutsch / englisch
real   m_c    = 1.0;        // Grad Celsius -> Fahrenheit z = x * m_c + a_c
real   a_c    = 0.0;
real   m_km   = 1.0;     // km           -> miles      z = x * m_km
real   m_l    = 1.0;     // Liter        -> Gallon US  z = x * m_l

// für Info
string varText;             // allgemeine Variable
string sgbd_ecu;
string puffer;
string puffer1;
string sgbd_origin;
string sgbd_revision;
string sgbd_package;
string sgbd_sprache;
string sgbd_comment;
string gruppe_ecu;
string gruppe_origin;
string gruppe_revision;
string gruppe_comment;

// für IS_LESEN 
bool   is_lesen_flag;                 
// True wenn JOB vorhanden

// für SPEICHER_LESEN 
bool   speicher_lesen_flag;
// True wenn JOB vorhanden
bool   speicher_lesen_lar_flag;
bool   speicher_lesen_uifm_flag;
bool   speicher_lesen_romi_flag;
bool   speicher_lesen_romx_flag;
bool   speicher_lesen_nvram_flag;
bool   speicher_lesen_ramis_flag;
bool   speicher_lesen_ramxx_flag;
bool   speicher_lesen_flash_flag;
bool   speicher_lesen_ramil_flag;

// für Speicher lesen Ausgabe
string speicher_lesen_text         = "";
string speicher_lesen_seg_adr_anz  = "";
string speicher_lesen_adresse      = "0x000000";
int    speicher_lesen_anzahl       = 64;

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern ScriptInit(); // befindet sich im Hauptprogramm

//**********************************************************************
// DLL-Funktionen
//**********************************************************************
import pascal lib "XTRACT.DLL"                XTRACT(in:      string    FileName,
                                                     in:      int       Mode,
                                                     inout:   string    Buffer,
                                                     in:      long      Size,
                                                     returns: int       ReturnedValue);

import pascal lib "INPA_LIB.DLL"              GetDir(inout:   string    DirName,
                                                     in:      int       Size,
                                                     returns: int       ReturnedValue);

import pascal lib "INPA_LIB.DLL"              ChDir (in:      string    DirName,
                                                     returns: int       ReturnedValue);

// start of :#include "AUFTRAG.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen AUFTRAG.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//**********************************************************************

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern AuftragLesen();

extern AuftragEingeben();

//**********************************************************************
//*
//* AuftragLesen
//*
//* Ausgabe der Fahrgestellnummer bei gültigem ELDI-Auftrag
//* in einer userbox rechts oben
//*
//**********************************************************************
AuftragLesen()
{
  string FG_NR;
  string MOTOR_NR;

  // Box-Nummer 7 reserviert
  //DTMGetVarWert(FG_NR,"FG_NR");
  //DTMGetVarWert(MOTOR_NR,"MOTOR_NR");
  userboxclose(7);
  if (FG_NR != "")
  {
    userboxopen(7,0,71,2,25,"","");
    userboxsetcolor(7,1,10); // schwarz, grün
    userboxftextout(7," FG-Nr.: "+FG_NR,0,0,0,1);
    userboxftextout(7," Motor: "+MOTOR_NR,1,0,0,1);
  }
  else
  {
    userboxopen(7,0,71,1,25,"","");
    userboxsetcolor(7,0, 4); // weiß, rot
    userboxftextout(7," ohne ELDI-Auftrag",0,0,0,1);                 
  }
}

//**********************************************************************
//*
//* AuftragEingeben
//*
//**********************************************************************
AuftragEingeben()
{
  int    EldiResultCode;

  userboxclose(7);
  //ELDIOpenStartDialog("PZ=NEIN ZD=NEIN",EldiResultCode);
  
  AuftragLesen();
}
// -- EOF --
// end of :#include "AUFTRAG.SRC"
// start of :#include "BATTERIE.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen BATTERIE.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//**********************************************************************

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern ShowBatteryIgnition();

//**********************************************************************
//*
//* ShowBatteryIgnition
//*
//* Anzeige des Batterie- und Zündungs-Status
//*
//**********************************************************************
ShowBatteryIgnition()
{
  bool   fehlerflag;    // Fehler aufgetreten
  bool   zuendung;      // Zündung ein/aus
  bool   batterie;      // Batterie ein/aus
  int    wert;          // allgemeine Variable

  ftextout("Batterie :", 0,5,1,0);
  ftextout("Zündung  :", 0,45,1,0);

  INPAapiJob("UTILITY","STATUS_UBATT","","");
  INP1apiResultInt(fehlerflag,wert,"STAT_UBATT",1);
  if ((fehlerflag!=TRUE) || (wert==0))
  {
    batterie=FALSE;
    zuendung=FALSE;
  }
  else 
  {
    batterie=TRUE;
    INPAapiJob("UTILITY","STATUS_ZUENDUNG","","");
    INP1apiResultInt(fehlerflag,wert,"STAT_ZUENDUNG",1);
    if ((fehlerflag!=TRUE) || (wert==0))
      zuendung=FALSE;
    else
      zuendung=TRUE;
  }

  digitalout(batterie, 0,20,"","");
  if (batterie==TRUE)
    ftextout("ein  ", 0,25,1,0);
  else
    ftextout("aus  ", 0,25,1,0);
  
  digitalout(zuendung, 0,62,"","");
  if (zuendung==TRUE)
    ftextout("ein  ", 0,67,1,0);
  else
    ftextout("aus  ", 0,67,1,0);
}
// -- EOF --
// end of :#include "BATTERIE.SRC"
// start of :#include "GRP_INFO.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen GRP_INFO.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//**********************************************************************

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern GruppenDateiInfo(in: string grp,
                        inout: string grp_ecu, inout: string grp_origin, 
                        inout: string grp_revision, inout: string grp_comment);
                                    
//**********************************************************************
//*
//* GruppenDateiInfo
//*
//* Versionsinformationen über Gruppendatei
//*
//**********************************************************************
GruppenDateiInfo( in: string grp, 
                  inout: string grp_ecu, inout: string grp_origin, 
                  inout: string grp_revision, inout: string grp_comment)
{
  string CurDir;
  string Temp;
  string Puffer;
  int    Size;
  long   PufferSize;
  int    ret_int;
  string BS;
  string CR;
  int    pos1;
  int    pos2;
  
  chr( 92, BS ); // '\'
  chr( 13, CR );
  
  Size=256;
  space(CurDir,Size);
  GetDir(CurDir, Size, ret_int);

  ChDir("\EDIABAS\BIN", ret_int);

  Size=1024;
  space(Puffer,Size);
  inttolong(Size, PufferSize);
  
  XTRACT("\ediabas\ecu"+ BS + grp + ".grp", 1, Puffer, PufferSize, ret_int);

  grp_ecu="";
  instr(pos1, 0, Puffer, "ECU:");
  if (pos1 >= 0)
  {
    pos1 = pos1 + 4;
    instr(pos2, pos1, Puffer, CR );
    if (pos2 > pos1)
      midstr(grp_ecu, Puffer, pos1, pos2 - pos1);
  }

  grp_origin="";
  instr(pos1, 0, Puffer, "ORIGIN:");
  if (pos1 >= 0)
  {
    pos1 = pos1 + 7;
    instr(pos2, pos1, Puffer, CR );
    if (pos2 > pos1)
      midstr(grp_origin, Puffer, pos1, pos2 - pos1);
  }

  grp_revision="";
  instr(pos1, 0, Puffer, "REVISION:");
  if (pos1 >= 0)
  {
    pos1 = pos1 + 9;
    instr(pos2, pos1, Puffer, CR );
    if (pos2 > pos1)
    midstr(grp_revision, Puffer, pos1, pos2 - pos1);
  }

  grp_comment="";
  pos1=0;
  pos2=0;
  while ((pos1 >= 0) && (pos2 >= 0))
  {
    instr(pos1, pos2, Puffer, "ECUCOMMENT:");
    if (pos1 >= 0)
    {
      pos1 = pos1 + 11;
      instr(pos2, pos1, Puffer, CR );
      if (pos2 > pos1)
      {
        midstr(Temp, Puffer, pos1, pos2 - pos1);
        grp_comment=grp_comment+Temp+",";
      }
    }
  }
  ChDir(CurDir, ret_int);
}
// -- EOF --
// end of :#include "GRP_INFO.SRC"
// start of :#include "SGBDINFO.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen SGBDINFO.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//**********************************************************************

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern SgbdInfo(in: string sg,
                inout: string sg_ecu, inout: string sg_origin,
                inout: string sg_revision, inout: string sg_package,
                inout: string sg_comment, inout: string sg_sprache);

//**********************************************************************
//*
//* SgbdInfo
//*
//* Versionsinformationen über SGBD
//*
//**********************************************************************
SgbdInfo( in: string sg,
          inout: string sg_ecu, inout: string sg_origin,
          inout: string sg_revision, inout: string sg_package,
          inout: string sg_comment, inout: string sg_sprache)
{
  INPAapiJob(sg,"INFO","","");
  INPAapiResultText(sg_ecu,"ECU",1,"");
  INPAapiResultText(sg_revision,"REVISION",1,"");
  INPAapiResultText(sg_package,"PACKAGE",1,"");
  INPAapiResultText(sg_origin,"ORIGIN",1,"");
  INPAapiResultText(sg_comment,"COMMENT",1,"");
  INPAapiResultText(sg_sprache,"SPRACHE",1,"");
}
                                    

// -- EOF --
// end of :#include "SGBDINFO.SRC"
// start of :#include "CHECK.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen CHECK.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//**********************************************************************

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern SgbdInpaCheck();

//**********************************************************************
//*
//* SgbdInpaCheck
//*
//* Überprüfung ob SGBD zu INPA passt
//*
//**********************************************************************
SgbdInpaCheck()
{
  string sgbd_version;             // für Versionskontrolle
  string inpa_version;             // für Versionskontrolle
  string inpa_sprache="deutsch"; // für Sprachvariante
  string variante="???";           // für Variantenkontrolle
  bool   fehlerflag;               // Fehlerflag
  string err_text;                 // Fehlertext
  int    sgbd_saetze;              // für Funktionen-Suche in SGBD
  string job_name;                 // JOBNMAE in SGBD
  int    i;

  settitle(titel+" Version "+version);
  
  INPAapiJob(gruppe,"INITIALISIERUNG","","");
  INP1apiResultText(fehlerflag,variante,"VARIANTE",0,"");
  if (fehlerflag == FALSE)
  {
    INP1apiErrorText(err_text);
    messagebox("Variantenkontrolle",  
                err_text+". "+
               "Das Programm wird abgebrochen!");
    exit();
  }

  instr(i,0,","+sgbd+",",","+variante+",");
  if (i<0)
  {
    messagebox("Variantenkontrolle",  
               "Gesuchtes Steuergerät: '"+sgbd+"' nicht gefunden. "+
               "Gefundenes Steuergerät: '"+variante+"'. "+
               "Das Programm wird abgebrochen!");
    exit();
  }
  sgbd=variante;

  SgbdInfo(sgbd, sgbd_ecu, sgbd_origin, sgbd_revision, sgbd_package, sgbd_comment, sgbd_sprache);
  midstr(inpa_version,version,0,2);
  midstr(sgbd_version,sgbd_revision,0,2);
  if (inpa_version != sgbd_version)
  {
    messagebox("Versionskontrolle",  
               "Nicht zusammenpassende Versionen. "+
               "Fehlfunktion ist möglich!");
  }
  if (inpa_sprache != sgbd_sprache)
  {
    messagebox("Sprachvariantenkontrolle",  
               "Nicht zusammenpassende Sprachvariante. "+
               "Fehlfunktion ist möglich!");
  }
  GruppenDateiInfo(gruppe, gruppe_ecu, gruppe_origin, gruppe_revision, gruppe_comment);

  // Vorbelegung der Flags
  is_lesen_flag = FALSE;
  speicher_lesen_flag = FALSE;

  INPAapiJob(sgbd,"_JOBS","","");
  INP1apiResultSets(fehlerflag, sgbd_saetze);
  if (fehlerflag == FALSE)
  {
    INP1apiErrorText(err_text);
    messagebox("Unerwarteter Fehler", // sollte nie kommen
                err_text+". "+
               "Das Programm wird abgebrochen!");
    exit();
  }

  i = 1;
  while ( i <= sgbd_saetze)
  {
    INPAapiResultText(job_name,"JOBNAME",i,"");
    if (job_name == "IS_LESEN" )       is_lesen_flag=TRUE;
    if (job_name == "SPEICHER_LESEN" ) speicher_lesen_flag=TRUE;

    if ((is_lesen_flag == TRUE) && (speicher_lesen_flag) == TRUE)
      i = sgbd_saetze;
    i = i + 1;
  }
  if (speicher_lesen_parameter == "") speicher_lesen_flag = FALSE;

  if (speicher_lesen_flag == TRUE)
  {
    instr(i, 0, ";"+speicher_lesen_parameter+";", ";LAR;");
    if ( i == -1 ) speicher_lesen_lar_flag = FALSE; else speicher_lesen_lar_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";FLASH;");
    if ( i == -1 ) speicher_lesen_flash_flag = FALSE; else speicher_lesen_flash_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";UIFM;");
    if ( i == -1 ) speicher_lesen_uifm_flag = FALSE; else speicher_lesen_uifm_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";ROMI;");
    if ( i == -1 ) speicher_lesen_romi_flag = FALSE; else speicher_lesen_romi_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";RAMIS;");
    if ( i == -1 ) speicher_lesen_ramis_flag = FALSE; else speicher_lesen_ramis_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";RAMIL;");
    if ( i == -1 ) speicher_lesen_ramil_flag = FALSE; else speicher_lesen_ramil_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";NVRAM;");
    if ( i == -1 ) speicher_lesen_nvram_flag = FALSE; else speicher_lesen_nvram_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";ROMX;");
    if ( i == -1 ) speicher_lesen_romx_flag = FALSE; else speicher_lesen_romx_flag = TRUE;

    instr(i, 0, ";"+speicher_lesen_parameter+";", ";RAMXX;");
    if ( i == -1 ) speicher_lesen_ramxx_flag = FALSE; else speicher_lesen_ramxx_flag = TRUE;
  }
}
// -- EOF --
// end of :#include "CHECK.SRC"
// start of :#include "FS_LESEN.SRC"
//**********************************************************************
//*
//* INPA Library-Funktionen FS_LESEN.SRC
//*
//* mindestens INPA 4.4.7
//*
//**********************************************************************
//* Drexel TI-433
//**********************************************************************
//* History:
//* 04.07.00 rd V0.03 Ersterstellung
//* 21.11.00 rd V0.10 Umweltbedingungen als Zahl oder Text ( 0-n, Hex )
//**********************************************************************

//**********************************************************************
//*
//* Globale Variablen
//*
//**********************************************************************
int    _FsMode=0x1FF;
string _FsFileMode    = "w";
string _PreInfoFile   = "";
string _PostInfoFile  = "";
string _ApiFsJobName  = "FS_LESEN";

//**********************************************************************
//*
//* Deklaration der Funktionen
//*
//**********************************************************************
extern INPAapiFsMode_neu ( in: int FsMode, in: string FsFileMode,
                           in: string PreInfoFile, in: string PostInfoFile,
                           in: string ApiFsJobName);

extern INPAapiFsLesen_neu( in: string ecu, in: string FileName);

extern fs_protokoll_ort(in: int nr);
extern fs_protokoll_hfk(in: int nr);
extern fs_protokoll_art(in: int nr);
extern fs_protokoll_art_e(in: int nr);
extern fs_protokoll_uwb(in: int nr);
extern fs_protokoll_hex(in: int nr);

//**********************************************************************
//*
//* INPAapiFsMode_neu kompatibel mit INPAapiFsMode
//*
//**********************************************************************
INPAapiFsMode_neu(  in: int    FsMode,
                    in: string FsFileMode,
                    in: string PreInfoFile,
                    in: string PostInfoFile,
                    in: string ApiFsJobName)
{
  _FsMode       = FsMode;
  _FsFileMode   = FsFileMode;
  _PreInfoFile  = PreInfoFile;
  _PostInfoFile = PostInfoFile;
  _ApiFsJobName = ApiFsJobName;

  if (_ApiFsJobName=="") _ApiFsJobName="FS_LESEN";

  INPAapiFsMode(_FsMode, _FsFileMode, _PreInfoFile, _PostInfoFile, _ApiFsJobName);

}
  //**********************************************************************
//*
//* INPAapiFsLesen_neu kompatibel mit INPAapiFsLesen
//*
//**********************************************************************
INPAapiFsLesen_neu( in: string ecu, in: string FileName)
{
  string _ecu;
  string _FileName;
  bool   rc;
  int    i;
  int    k;
  int    x1;
  string temp1;
  string temp2;
  int    F_VERSION;
  string JOB_STATUS;
  string VARIANTE;
  int    SETS;
  int    UW_SETS;
  string FS_CODE;
  string FS_CODE_GESAMT;
  int    counter;
  string text_var;
  real   pos_d, pos_s, pos_m;
  string einheit_d, einheit_s, einheit_m;
  string text_pos_d, text_pos_s, text_pos_m;
   
    input2text(Bearbeitername,FahrzeugFGN,"Filetitel","Bitte geben Sie ihren Namen und die FG-Nr. ein!",
               "Ihr Name?","Fahrgestell-Nr.?");

    counter=0; text_var="";
    while (counter<30)
    { INP1apiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","",func_io);     
       if (func_io=="OKAY") counter=30;
       counter=counter+1;
    }

                                           
    getinputstate(input_state2);
    user_ausstieg=0;
    if (input_state2!=input_ok) user_ausstieg=1;
    
    if (user_ausstieg==0)
    {
    _ecu      = ecu;
    _FileName = FileName;
  
    INP1apiJob(_ecu, _ApiFsJobName,"","");
    INP1apiResultInt(rc, F_VERSION, "F_VERSION",1 );
    if ((rc != TRUE) || ( F_VERSION != 2 )) exit();
    INP1apiResultSets(rc,SETS);
    INP1apiResultText(rc,VARIANTE, "VARIANTE", 0, "");
    INP1apiResultText(rc,JOB_STATUS, "JOB_STATUS", SETS, "");

    getdate(temp1);
    gettime(temp2);

    fileopen ( _FileName, _FsFileMode);

    if (_ApiFsJobName == "IS_LESEN")
      filewrite( "           S H A D O W S P E I C H E R   L E S E N");
    else
      filewrite( "           F E H L E R S P E I C H E R   L E S E N");

    filewrite( "           ---------------------------------------");
    filewrite( "");
    filewrite("Datum      : "+temp1+" "+temp2);
    filewrite("ECU        : "+_ecu);
    filewrite("$SGBD: "+sgbd);
    filewrite("Job        : "+_ApiFsJobName) ;
    filewrite("JobStatus  : "+JOB_STATUS) ;
    filewrite("Variante   : "+VARIANTE);
    filewrite("Dateiname  : "+file);
    filewrite("Bearbeiter : "+Bearbeitername);
    filewrite("Kommentar  : "+FahrzeugFGN);
    filewrite( "-------------------------------------------------------------");

      filewrite( "");
      filewrite(">>>>>>>>>>>>>>        EGS Identifikation       <<<<<<<<<<<<<<");
      filewrite("");
      // Identifikation
      INPAapiJob(sgbd,"IDENT","","");
     
      INPAapiResultText(text_var,"ID_BMW_NR",1,"");
      filewrite("BMW E-Modul HW*-Nr.         : "+text_var);
      
      INPAapiResultText(text_var,"ID_HW_NR",1,"");   
      filewrite("BMW Hardwareindex           : "+text_var);
            
      INPAapiResultText(text_var,"ID_COD_INDEX",1,"");     
      filewrite("Codier-Index                : "+text_var);
          
      INPAapiResultText(text_var,"ID_DIAG_INDEX",1,"");
      filewrite("Diagnose-Index              : "+text_var);
            
      INPAapiResultText(text_var,"ID_VAR_INDEX",1,"");
      filewrite("Varianten-Index             : "+text_var);
         
      INPAapiResultText(text_var,"ID_DATUM",1,""); 
      filewrite("Herstelldatum               : "+text_var);
            
      INPAapiResultText(text_var,"ID_LIEF_TEXT",1,"");
      filewrite("Lieferant                   : "+text_var);
        
      INPAapiResultText(text_var,"ID_SW_NR_MCV",1,"");  
      filewrite("Nachrichtenkatalognummer MCV: "+text_var);
          
      INPAapiResultText(text_var,"ID_SW_NR_FSV",1,"");
      filewrite("Funktionssoftwarenummer FSV : "+text_var);
         
      INPAapiResultText(text_var,"ID_SW_NR_OSV",1,"");
      filewrite("Betriebssystemnummer OSV    : "+text_var);
      
      INPAapiJob(sgbd,"STATUS_SYSTEM_BOOT_VERSION_NR","","");
      text_var="unknown";
      INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_VERSION_NR_TEXT",1,"");
      filewrite("Bootversion                 : "+text_var);
      INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_TYPE_TEXT",1,"");
      filewrite("Boottyp                     : "+text_var);
  
      INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","","");
          
      INPAapiResultText(text_var,"STAT_PROGRAMMSTAND_TEXT",1,""); 
      filewrite("Programmstand               : "+text_var);
        
      INPAapiResultText(text_var,"STAT_ERSTELLER_TEXT",1,""); 
      filewrite("Ersteller                   : "+text_var);
          
      INPAapiResultText(text_var,"STAT_SONDERSTAND_TEXT",1,"");
      filewrite("Sonderstand                 : "+text_var);
 
      INPAapiJob(sgbd,"status_hardware_referenz","",""); 
      INPAapiResultText(text_var,"STAT_BRIF_TEXT",1,""); 
      filewrite("Hardware Referenz BRIF      : "+text_var);
     
      INPAapiJob(sgbd,"status_programm_referenz","",""); 
      INPAapiResultText(text_var,"STAT_ZIF_TEXT",1,""); 
      filewrite("Programm Referenz ZIF       : "+text_var);
     
      INPAapiJob(sgbd,"status_daten_referenz","",""); 
      INPAapiResultText(text_var,"STAT_DIF_TEXT",1,""); 
      filewrite("$DATAID: "+text_var);
      filewrite("");
      
      filewrite("");
      filewrite(">>>>>>>>>>>>>        BOOT-Identifikation       <<<<<<<<<<<<<<");
      filewrite("");
      
      INPAapiJob(sgbd,"STATUS_SYSTEM_BOOT_VERSION_NR","","");
      INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_VERSION_NR_TEXT",1,"");
      filewrite("BB Bootversion:   "+text_var);
     
      INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_TYPE_TEXT",1,"");
      filewrite("BB Boottyp:       "+text_var);
      
      INPAapiJob(sgbd,"STATUS_SYSTEM_BS_BOOT_VERSION_NR","","");
      INPAapiResultText(text_var,"STAT_SYSTEM_BS_BOOT_VERSION_NR_TEXT",1,"");
      filewrite("BS Bootversion:   "+text_var);
      filewrite("");
      
      filewrite("");
      filewrite(">>>>>>>>>>>>>            Quicktest             <<<<<<<<<<<<<<");
      filewrite("");

      // Anzahl Fehler
      INPAapiJob(sgbd,"QUICKTEST","","");
      INPAapiResultInt(int_zahl,"ANZAHL_FEHLER",1);
      inttostring(int_zahl,text_var);
      // filewrite ("Es sind " + text_var + " Fehler gespeichert");
      filewrite ("");

      // Betriebsstundenzaehler beim letzten Löschen
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_FS_LOESCHEN",1);
      realtostring(real_zahl,"8.0",text_var);  
      filewrite ("Letztes Loeschen des FS : " + text_var + " km                                ");

      // Betriebsstundenzaehler aktuell
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_AKTUELL",1);
      realtostring(real_zahl,"8.0",text_var);  
      filewrite ("Aktueller Kilometerstand : " + text_var + " km                               "); 
      filewrite("");
      if (SETS == 1)
        filewrite( "           >>>>>>>>>> Kein Fehler gefunden <<<<<<<<<<<");
      else
      {
        INPAapiJob(_ecu, _ApiFsJobName,"","");
       
        inttostring(SETS-1,temp1);
        filewrite( "ERGEBNIS:  "+temp1+" Fehler im Fehlerspeicher !");
        if ((_FsMode & 0x100) == 0)
          {
            i=1;
            while ( i < SETS )
            {
              if (_FsMode != 0) 
                filewrite( "-------------------------------------------------------------");
              if ((_FsMode & 0x01) != 0) fs_protokoll_ort(i);
              if ((_FsMode & 0x04) != 0) fs_protokoll_art(i);
              if ((_FsMode & 0x40) != 0) fs_protokoll_hex(i);
              i=i+1;
            }
          }
        else
          {
            // Detail lesen
            i=1;
            FS_CODE_GESAMT="";
            while ( i < SETS )
            {
              INPAapiResultInt(x1, "F_ORT_NR", i);
              inttohexstring(x1, 4, temp1);
              FS_CODE_GESAMT=FS_CODE_GESAMT+"0x"+temp1;
              i=i+1;
            }

            i=1;
            while ( i < SETS )
            {
              if (_FsMode != 0) 
                filewrite( "-------------------------------------------------------------");
              midstr(FS_CODE, FS_CODE_GESAMT, (i-1)*6, 6);
              INPAapiJob(_ecu, _ApiFsJobName+"_DETAIL", FS_CODE, "");
              INP1apiResultSets(rc, UW_SETS);
              if (rc == TRUE)
              {
                INPAapiResultText(JOB_STATUS, "JOB_STATUS", UW_SETS , "");
                if ( JOB_STATUS == "OKAY")
                {
                  if ((_FsMode & 0x01) != 0) fs_protokoll_ort(1);
                  if ((_FsMode & 0x20) != 0) fs_protokoll_hfk(1);

                  k=1;
                  while ( k < UW_SETS )
                  {
                    filewrite( "");
                    if ( UW_SETS > 2 )
                    {
                      inttostring(k,temp1);
                      filewrite( temp1 + ". Umweltsatz");
                    }
                    if ((_FsMode & 0x02) != 0) fs_protokoll_uwb(k);
                    k=k+1;
                  }

                  if ((_FsMode & 0x04) != 0) fs_protokoll_art(1);
                  if ((_FsMode & 0x04) != 0) fs_protokoll_art_e(1);

                  if ((_FsMode & 0x40) != 0) fs_protokoll_hex(1);
                }
                else
                {
                  filewrite( _ApiFsJobName+"_DETAIL("+FS_CODE+"): JobStatus: "+JOB_STATUS) ;
                }
              }
              else
              {
                INP1apiErrorText(temp1);
                filewrite( _ApiFsJobName+"_DETAIL("+FS_CODE+"): "+temp1);
              }
              i=i+1;
            }
          }
      } // ENDIF - ELSE - Fehler gefunden (SETS>1)

      filewrite( "");
      filewrite(">>>>>>>>>>>>>>        Info Fehlerspeicher       <<<<<<<<<<<<<<");
      filewrite("");
      
      filewrite( "-------------------------------------------------------------");
      INPAapiJob(sgbd,"IS_LESEN","","");
      INPAapiResultInt(int_zahl,"SAETZE",0);
      int_zahl = int_zahl - 1;
      
      if (int_zahl == 0)
      {
        filewrite( "Kein Fehler gefunden");
        filewrite( "-------------------------------------------------------------");
      }
      else
      {
      	i=1;
      	while(i<=int_zahl)
      	{
      	   filewrite( "");
  	   INPAapiResultInt(x1, "F_ORT_NR", i);
  	   inttohexstring(x1, 4, temp1);
  	   INPAapiResultText(temp2, "F_ORT_TEXT", i, "");
  	   filewrite( temp1+"  "+temp2);
           i=i+1;
        }
      
      }
      
      filewrite( "");
      filewrite("--------------------------------------------------------------");
      filewrite("Aktive Timeoutdiagnosen:");
      filewrite("--------------------------------------------------------------");
      filewrite("");
      
     INPAapiJob(sgbd,"STATUS_TIMEOUTDIAGNOSE","","");
     
     INPAapiResultText(text_var,"STAT_KLEMMENSTATUS_TEXT",1,"");
     filewrite("Klemmenstatus CAS: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_ZV_KLAPPENZUSTAND_TEXT",1,"");
     filewrite("ZV_Klappenzustand CAS: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT1_TEXT",1,"");
     filewrite("Drehmoment1 DME 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT2_TEXT",1,"");
     filewrite("Drehmoment2 DME: 				"+ text_var);
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT3_TEXT",1,"");
     filewrite("Drehmoment3 DME: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_MOTORDATEN_TEXT",1,"");
     filewrite("Motordaten DME: 				" + text_var);

     INPAapiResultText(text_var,"STAT_REGELGESCHWINDIGKEIT_STUEFENTEMPOMAT_TEXT",1,"");
     filewrite("Regelgeschwindigkeit Stufentempomat DME: 	" + text_var);
     
     INPAapiResultText(text_var,"STAT_RADGESCHWINDIGKEIT_TEXT",1,"");
     filewrite("Radgeschwindigkeit DSC: 			" + text_var);
     
     INPAapiResultText(text_var,"STAT_STATUS_DSC_TEXT",1,"");
     filewrite("Status DSC: 					" + text_var);
     
     INPAapiResultText(text_var,"STAT_GECHWINDIGKEIT_TEXT",1,"");
     filewrite("Geschwindigkeit DSC: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_RADTOLERANZABGLEICH_TEXT",1,"");
     filewrite("Radtoleranzabgleich DSC: 			" + text_var);
     
     INPAapiResultText(text_var,"STAT_AUSSENTEMPERATUR_RELATIVZEIT_TEXT",1,"");
     filewrite("Aussentemperatur/Relativzeit: 			" + text_var);
     
     INPAapiResultText(text_var,"STAT_DREHMOMENTANFORDERUNG_ACC_TEXT",1,"");
     filewrite("Drehmomentanforderung ACC: 			" + text_var);
     
     INPAapiResultText(text_var,"STAT_VERZOEGERUNGSANFORDERUNG_EMF_TEXT",1," ");
     filewrite("Verzögerungsanforderung EMF: 			" + text_var);
     
     INPAapiResultText(text_var,"STAT_KILOMETERSTAND_TEXT",1," ");
     filewrite("Kilometerstand Kombi: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_SITZBELEGUNG_GURTKONTAKTE_TEXT",1," ");
     filewrite("Sitzbelegung Gurtkontakte SSFA: 		" + text_var);
     
     INPAapiResultText(text_var,"STAT_BEDIENUNG_GETRIEBEWAHLSCHALTER_TEXT",1," ");
     filewrite("Bedienung Getriebewahlschalter GWS: 		" + text_var);
     
     INPAapiResultText(text_var,"STAT_POWERMANAGEMENT_BATTERIESPANNUNG_TEXT",1," ");
     filewrite("Powermanagement Batteriespannung PM: 		" + text_var);
     
     INPAapiResultText(text_var,"STAT_ANHAENGERMODUL_TEXT",1," ");
     filewrite("Anhaengermodul AHM: 				" + text_var);

     filewrite("");
     filewrite("--------------------------------------------------------------");
     filewrite("Aktive Ersatzfunktionen:");
     filewrite("--------------------------------------------------------------");
     filewrite("");

     filewrite("Ersatzfunktionen aktiv");
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_3","","");
     
     INPAapiResultText(text_var,"STAT_KMN_GRAUS_TEXT",1,"");
     filewrite("Mechanischer Notlauf:				" + text_var);
    
     INPAapiResultText(text_var,"STAT_KMN_MM_SLIM_TEXT",1,"");
     filewrite("Anforderung Begrenzung Anfahrmoment:  		" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_PMAX_TEXT",1,"");
     filewrite("Max. Sytemdruck:  				" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_FANZ_TEXT",1,"");
     filewrite("Notlaufflag auf CAN:  				" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_MV3AUS_TEXT",1,"");
     filewrite("Deaktivieren MV3 Lowsidetreiber:  		" + text_var);
    
     INPAapiResultText(text_var,"STAT_KMN_MV4AUS_TEXT",1,"");
     filewrite("Deaktivieren MV4 Lowsidetreiber:   		" + text_var);
       
     INPAapiResultText(text_var,"STAT_KMN_LOWSIDE_OFF_TEXT",1,"");
     filewrite("Lowside FETs aus: 				" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_SBCAUS_TEXT",1,"");
     filewrite("Deaktivieren der NIC-Funktion:  		" + text_var);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_2","","");
     
     INPAapiResultText(text_var,"STAT_KMN_WKAUF_TEXT",1,"");
     filewrite("Wandlerkupplung öffnen:  			" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_AFIX_TEXT",1,"");
     filewrite("Festes Schaltprogramm (Kein S, M):		" + text_var);
      
     INPAapiResultText(text_var,"STAT_KMN_NRAERS_TEXT",1,"");
     filewrite("Radgeschwindigkeit aus Abtriebsdrehzahl:	" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_NABERS_TEXT",1,"");
     filewrite("Abtriebsdrehzahl aus Radgeschwindigkeiten:  	" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_PNAUS_TEXT",1,"");
     filewrite("Shiftlock Funktion AUS:				" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_GFIX_TEXT",1,"");
     filewrite("aktuellen Gang halten:  			" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_G5FIX_TEXT",1,"");
     filewrite("Schalten in den 5. Gang und Ganghalten:  	" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_G4FIX_TEXT",1,"");
     filewrite("Schalten in den 4. Gang und Ganghalten:  	" + text_var);

     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_1","","");
     
     INPAapiResultText(text_var,"STAT_KMN_ENPG5_TEXT",1,"");
     filewrite("Elektrischer Notlauf 5. Gang:  			" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_ENPG35_TEXT",1,"");
     filewrite("Elektrischer Notlauf 5. Gang nachf. 3. Gang:	" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_ADAPT_AUS_TEXT",1,"");
     filewrite("Adaptionen aus: 				" + text_var);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_0","","");
     
     INPAapiResultText(text_var,"STAT_KMN_G3FIX_TEXT",1,"");
     filewrite("Schalten in den 3. Gang und Ganghalten:  	" + text_var);
     
     INPAapiResultText(text_var,"STAT_KMN_KEIN_R_TEXT",1,"");
     filewrite("Kein Rueckwaertsgang moeglich:  		" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_BENPG3_TEXT",1,"");
     filewrite("Bedingtes Schalten in 3. Gang:  		" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_BENPG4_TEXT",1,"");
     filewrite("Bedingtes Schalten in 4. Gang:  		" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_BENPG1_TEXT",1,"");
     filewrite("Bedingtes Schalten in 1. Gang:  		" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_BENPG2_TEXT",1,"");
     filewrite("Bedingtes Schalten in 2. Gang:                  " + text_var);

     INPAapiResultText(text_var,"STAT_KMN_KEIND_TEXT",1,"");
     filewrite("Fahrerwunsch D unterdrücken:			" + text_var);

     INPAapiResultText(text_var,"STAT_KMN_HOLDP_TEXT",1,"");
     filewrite("Position P halten:				" + text_var);

     filewrite("");
     filewrite("--------------------------------------------------------------");
     filewrite("Sicherungsfunktionen aktiv");
     filewrite("--------------------------------------------------------------");
     filewrite("");
     
     INPAapiJob(sgbd,"STATUS_SIGNAL_0","","");
         
     INPAapiResultText(text_var,"STAT_SIGNAL_ABTRIEBSDREHZAHL_TEXT",1,"");
     filewrite("Abtriebsdrehzahl:  				" + text_var);
     
     if (ESchaltung==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_PARKSPERRENSENSOR_TEXT",1,"");
       filewrite("Parksperrensensor:  				" + text_var);
     }
     else
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_POSITIONSSENOR_TEXT",1,"");
       filewrite("Positionssensor:  				  " + text_var);
     }

     INPAapiResultText(text_var,"STAT_SIGNAL_TURNBINENDREHZAHL_TEXT",1,"");
     filewrite("Turbinendrehzahl:  				" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_SUBSTRATTEMPERATUR_TEXT",1,"");
     filewrite("Substrattemperatur:  				" + text_var);
    
     INPAapiResultText(text_var,"STAT_SIGNAL_GETRIEBEOELTEMPERATUR_TEXT",1,"");
     filewrite("Getriebeöltemperatur:  				" + text_var);
    
     INPAapiJob(sgbd,"STATUS_SIGNAL_1","","");
     
     INPAapiResultText(text_var,"STAT_SIGNAL_MOMENT1_TEXT",1,"");
     filewrite("Momentenschnittstelle:  			" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_DROSSELKLAPPE_TEXT",1,"");
     filewrite("Drosselklappe:					" + text_var);

     INPAapiResultText(text_var,"STAT_SIGNAL_MOTORDREHZAHL_TEXT",1,"");
     filewrite("Motordrehzahl:  				" + text_var);

     if (ESchaltung==1)
     { 
       INPAapiResultText(text_var,"STAT_SIGNAL_PARKSPERRENANFORDERUNG_TEXT",1,"");
       filewrite("Parksperrenanforderung:  			" + text_var);
     }
     
     INPAapiJob(sgbd,"STATUS_SIGNAL_2","","");
     
     INPAapiResultText(text_var,"STAT_SIGNAL_BREMSSIGNAL_TEXT",1,"");
     filewrite("Bremssignal:  					" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_DREHRICHTUNG_TEXT",1,"");
     filewrite("Drehrichtung:  					" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_HL_TEXT",1,"");
     filewrite("Radgeschwindigkeit HL:  			" + text_var);
    
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_HR_TEXT",1,"");
     filewrite("Radgeschwindigkeit HR:  			" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_VL_TEXT",1,"");
     filewrite("Radgeschwindigkeit VL:				" + text_var);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_VR_TEXT",1,"");
     filewrite("Radgeschwindigkeit VR  				" + text_var);
    
     INPAapiJob(sgbd,"STATUS_SIGNAL_3","","");

     INPAapiResultText(text_var,"STAT_SIGNAL_KL15_TEXT",1,"");
     filewrite("Kl15 CAN Signal:  				" + text_var);
     
     if (ESchaltung==1)
     { 
       INPAapiResultText(text_var,"STAT_SIGNAL_POS_CAN_TEXT",1,"");
       filewrite("GWS Positionsinfo CAN Signal:  		        " + text_var);
     
       INPAapiResultText(text_var,"STAT_SIGNAL_S_TASTER_TEXT",1,"");
       filewrite("GWS S-Taster:  				        " + text_var);
     }

     if (Fzg_E65==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_FAHRERSITZ_TEXT",1,"");
       filewrite("Fahrersitz:  					" + text_var);
     }
     
     INPAapiResultText(text_var,"STAT_SIGNAL_FAHRERTUER_TEXT",1,"");
     filewrite("Fahrertür:					" + text_var);
     
     if (ESchaltung==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_TIP_TASTER_TEXT",1,"");
       filewrite("GWS Tip+/Tip- Taster:				" + text_var);
     
       INPAapiResultText(text_var,"STAT_SIGNAL_POS_SERIELL_TEXT",1,"");
       filewrite("GWS Posinfo LIN Signal:				" + text_var);
   
       INPAapiResultText(text_var,"STAT_SIGNAL_SCHLUESSEL_STECKT_TEXT",1,"");
       filewrite("Schlüssel Steckt:				" + text_var);
     }
     
         filewrite("");
     filewrite("--------------------------------------------------------------");
     filewrite("Infozähler/Fehlerzähler");
     filewrite("--------------------------------------------------------------");
     filewrite("");
     
   
   
   INPAapiJob(sgbd,"STATUS_RESET_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("EGS Resetzähler: 				" + text_var);  
   
   INPAapiJob(sgbd,"STATUS_ZWANGSHOCHSCHALTUNG_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("DME Zwangshochschaltung 5->6 : 			" + text_var);

   if (ESchaltung==1)
   {
   INPAapiJob(sgbd,"STATUS_AUTO_P_PM1_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("AUTO-P wegen Power Modul Abschaltung : 		" + text_var);

   INPAapiJob(sgbd,"STATUS_AUTO_P_EMF2_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("AUTO-P wegen Absicherung EMF Komfortebene: 	" + text_var);

   INPAapiJob(sgbd,"STATUS_AUTO_P_EMF1_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("AUTO-P wegen EMF Hilferuf: 			" + text_var); 
   
   INPAapiJob(sgbd,"STATUS_AUTO_N_SZL_ZAEHLER","","");
   INPAapiCheckJobStatus("OKAY");    
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   filewrite("AUTO-N wegen GWS Zwischenposition/Init:	 	" + text_var); 

   }

   INPAapiJob(sgbd,"STATUS_D_S_M_ZAEHLER","","");
   INPAapiResultAnalog(pos_d,"STAT_POSITION_D_WERT",1);
   realtostring(pos_d,"8.0",text_pos_d);
   INPAapiResultText(einheit_d,"STAT_POSITION_D_EINH",1,"");
   INPAapiResultAnalog(pos_s,"STAT_POSITION_S_WERT",1);
   realtostring(pos_s,"8.0",text_pos_s);
   INPAapiResultText(einheit_s,"STAT_POSITION_S_EINH",1,"");
   INPAapiResultAnalog(pos_m,"STAT_POSITION_M_WERT",1);
   realtostring(pos_m,"8.0",text_pos_m);
   INPAapiResultText(einheit_m,"STAT_POSITION_M_EINH",1,"");      
   filewrite("Schaltprogrammzähler D / S / M  : "+text_pos_d+einheit_d+" / "+text_pos_s+einheit_s+" / "+text_pos_m+einheit_m);  
     
     filewrite("");
      filewrite( "=============================================================");
      filewrite("");
      filewrite("");
      filewrite( "           A D A P T I O N S W E R T E   L E S E N");
      filewrite( "           ---------------------------------------");     
      filewrite("");
  
      filewrite("Adaptionswerte FLARE in ms");
      filewrite("");

      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_2_1","","");
      filewrite("    CG_B_1   CG_B_2   CG_B_3   CG_B_4");
      filewrite("");
      filewrite(" Schaltung 2->1");
      
      while (zeile<=1)
       {
         zeilentext="";
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"9.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        } 
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_3_2","","");
      filewrite(" Schaltung 3->2");
     
    
      
      while (zeile<=1)
       {
         zeilentext="";
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"9.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;  
        } 
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_4_3","","");
      filewrite(" Schaltung 4->3");
    
    
      
      while (zeile<=1)
       {
         zeilentext="";
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"9.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_5_4","","");
      filewrite(" Schaltung 5->4");
     
    
      
      while (zeile<=1)
       {
         zeilentext="";
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"9.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        }
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_6_5","","");
      filewrite(" Schaltung 6->5");
     
    
      
      while (zeile<=1)
       {
         zeilentext="";
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"9.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }  
       
       
       
      filewrite("");
      filewrite("Adaptionswerte GLUE in bar");
      filewrite("");

      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_1_2","","");
      filewrite("  MT_B1  MT_B2  MT_B3  MT_B4  MT_B5  MT_B6  MT_B7  MT_B8  MT_B9  MT_B10 MT_B11 MT_B12");
      filewrite("");
      filewrite(" Schaltung 1->2");
      
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        } 
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_2_3","","");
      filewrite(" Schaltung 2->3");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;  
        } 
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_3_4","","");
      filewrite(" Schaltung 3->4");
    
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_4_5","","");
      filewrite(" Schaltung 4->5");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        }
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_5_6","","");
      filewrite(" Schaltung 5->6");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }  

      filewrite("");
      filewrite("Adaptionswerte GLS in bar");
      filewrite("");

   
   
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_1_2","","");
      filewrite("  MT_B1  MT_B2  MT_B3  MT_B4  MT_B5  MT_B6  MT_B7  MT_B8  MT_B9  MT_B10 MT_B11 MT_B12");
      filewrite("");
      filewrite(" Schaltung 1->2");
      
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        } 
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_2_3","","");
      filewrite(" Schaltung 2->3");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;  
        } 
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_3_4","","");
      filewrite(" Schaltung 3->4");
    
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_4_5","","");
      filewrite(" Schaltung 4->5");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        }
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_5_6","","");
      filewrite(" Schaltung 5->6");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }  

     

   
   
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_2_1","","");
      filewrite(" Schaltung 2->1");
    
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        } 
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_3_2","","");
      filewrite(" Schaltung 3->2");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;  
        } 
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_4_3","","");
      filewrite(" Schaltung 4->3");
    
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }
  
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_5_4","","");
      filewrite(" Schaltung 5->4");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
        }
         
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=12;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_6_5","","");
      filewrite(" Schaltung 6->5");
     
    
      
      while (zeile<=8)
       {
         zeilentext="";
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"7.2",text_var);    
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          strcat(zeilentext,zeilentext,"");
          strcat(zeilentext,zeilentext,text_var);
          }
         filewrite(zeilentext);
         zeile=zeile+1;
         spalte=1;
         array_spalte=12;
         array_zeile=array_zeile+1;
       }  
      
      INPAapiJob(sgbd,"status_adaptionswerte_sf","","");
      filewrite("");
      filewrite("Adaptionswerte Kupplungsbezogen");
      filewrite("");
      filewrite(" Schnellfüllzeit in ms");
      filewrite("");
  	
      INPAapiResultAnalog(real_zahl,"STAT_SF_1_WERT",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung A : "+text_var);
  	
      INPAapiResultAnalog(real_zahl, "STAT_SF_2_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung B : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_SF_3_WERT",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung C : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_SF_4_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung D : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_SF_5_WERT",1);
      realtostring(real_zahl,"8.2",text_var);   
      filewrite("  Kupplung E : "+text_var);
  
      
      INPAapiJob(sgbd,"status_adaptionspruefzaehler","","");
      filewrite("");
      filewrite(" Anzahl durchgeführte Prüfzyklen Schnellfüllzeit");
      filewrite("");
  	
      INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_1",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung A : "+text_var);
  	
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_SF_2",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung B : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_SF_3",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung C : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_SF_4",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung D : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_SF_5",1);
      realtostring(real_zahl,"8.2",text_var);   
      filewrite("  Kupplung E : "+text_var);
      
  
      INPAapiJob(sgbd,"status_adaptionswerte_pf","","");
      filewrite("");
      filewrite(" Fülldruck in mbar");
      filewrite("");
  	
      INPAapiResultAnalog(real_zahl,"STAT_PF_1_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung A : "+text_var);
  	
      INPAapiResultAnalog(real_zahl,"STAT_PF_2_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung B : "+text_var);
  	
      INPAapiResultAnalog(real_zahl,"STAT_PF_3_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung C : "+text_var);
  	
      INPAapiResultAnalog(real_zahl,"STAT_PF_4_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung D : "+text_var);
  	
      INPAapiResultAnalog(real_zahl,"STAT_PF_5_WERT",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung E : "+text_var);
      
      INPAapiJob(sgbd,"status_adaptionspruefzaehler","","");
      filewrite("");
      filewrite(" Anzahl durchgeführte Prüfzyklen Fülldruck");
      filewrite("");
  	
      INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_1",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung A : "+text_var);
  	
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_PF_2",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung B : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_PF_3",1);
      realtostring(real_zahl,"8.2",text_var);
      filewrite("  Kupplung C : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_PF_4",1);
      realtostring(real_zahl,"8.2",text_var); 
      filewrite("  Kupplung D : "+text_var);
  
      INPAapiResultAnalog(real_zahl, "STAT_PRUEFZAEHLER_PF_5",1);
      realtostring(real_zahl,"8.2",text_var);   
      filewrite("  Kupplung E : "+text_var);
      
      filewrite("");
      filewrite("Adaptionswerte Gangeinlegen");
      filewrite("");
      
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=10;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gangeinlegen","","");
      filewrite("                N_MOT_1  N_MOT_2  N_MOT_3");
      filewrite("");
            
      while (zeile<=2)
       {
         zeilentext="";
         while (spalte<=3) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"8.2",text_var);    
          spalte=spalte+1;
          array_spalte=array_spalte+10;
          strcat(zeilentext,zeilentext," ");
          strcat(zeilentext,zeilentext,text_var);
          }
          
         if(zeile==1)
          {
           filewrite("  GE nach D:"+zeilentext);
          }
         if(zeile==2)
          {
           filewrite("  GE nach R:"+zeilentext);
          }
         
         zeile=zeile+1;
         spalte=1;
         array_spalte=10;
         array_zeile=array_zeile+1;
       }
         
  

     	INPAapiJob(sgbd,"status_adaptionswerte_ada","","");
     	filewrite("");
    	filewrite("Adaptionswerte Ada-Beeinflussung in mbar");
  	filewrite("");
  	
  	filewrite(" Für GLÜ-Adaption");
  	filewrite("");
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_1_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 1->2 :"+text_var);   
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_2_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 2->3 :"+text_var);    
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_3_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	filewrite("  Schaltung 3->4 :"+text_var);    
  	  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_4_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 4->5 :"+text_var);    
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_5_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	filewrite("  Schaltung 5->6 :"+text_var);  
  	
  	filewrite("");
  	filewrite(" Für GLS-Adaption");
  	filewrite("");
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_6_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 1->2 :"+text_var);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_7_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 2->3 :"+text_var);    
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_8_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	filewrite("  Schaltung 3->4 :"+text_var);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_9_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 4->5 :"+text_var);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_10_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	filewrite("  Schaltung 5->6 :"+text_var);
  	
  	filewrite("");
  	filewrite(" Für GLS-Rück-Adaption");
  	filewrite("");
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_11_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 2->1 :"+text_var);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_12_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 3->2 :"+text_var);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_13_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	filewrite("  Schaltung 4->3 :"+text_var);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_14_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	filewrite("  Schaltung 5->4 :"+text_var);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_15_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	filewrite("  Schaltung 6->5 :"+text_var);
  	
  	//Zähler Ausgeben----------------------------------------

	//Resetzähler
   	filewrite("EGS Infozähler/Fehlerzähler:");
   	INPAapiJob(sgbd,"STATUS_RESET_ZAEHLER","","");
   	INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   	realtostring(real_zahl,"8.0",text_var);
   	filewrite("EGS Resetzähler : "+text_var);  

   	//Zwangshochschaltung
   	INPAapiJob(sgbd,"STATUS_ZWANGSHOCHSCHALTUNG_ZAEHLER","","");
   	INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   	realtostring(real_zahl,"8.0",text_var);
   	filewrite("DME Zwangshochschaltung 5->6  : "+text_var);

   	if (ESchaltung==1)
   	{
   		//Auto-P durch Powermodul
   		INPAapiJob(sgbd,"STATUS_AUTO_P_PM1_ZAEHLER","","");
   		INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   		realtostring(real_zahl,"8.0",text_var);
   		filewrite("AUTO-P wegen Power Modul Abschaltung  : "+text_var);

		//Auto-P durch EMF Komfort 
   		INPAapiJob(sgbd,"STATUS_AUTO_P_EMF2_ZAEHLER","","");
   		INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   		realtostring(real_zahl,"8.0",text_var);
   		filewrite("AUTO-P wegen Absicherung EMF Komfortebene : "+text_var);
	
		//Auto-P durch EMF Hilferuf
   		INPAapiJob(sgbd,"STATUS_AUTO_P_EMF1_ZAEHLER","","");
   		INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   		realtostring(real_zahl,"8.0",text_var);
   		filewrite("AUTO-P wegen EMF Hilferuf : "+text_var);  
   	
   		//Auto-N
   		INPAapiJob(sgbd,"STATUS_AUTO_N_SZL_ZAEHLER","","");    
   		INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   		realtostring(real_zahl,"8.0",text_var);
   		filewrite("AUTO-N wegen GWS Zwischenposition/Init  : "+text_var);  
   	}

   	//D-S-M-Zähler
   	INPAapiJob(sgbd,"STATUS_D_S_M_ZAEHLER","","");
   	INPAapiResultAnalog(real_zahl,"STAT_POSITION_D_WERT",1);
   	realtostring(real_zahl,"8.0",text_var);
   	filewrite("Sekunden in D: "+text_var);
   	
   	INPAapiJob(sgbd,"STATUS_D_S_M_ZAEHLER","","");
   	INPAapiResultAnalog(real_zahl,"STAT_POSITION_S_WERT",1);
   	realtostring(real_zahl,"8.0",text_var);
   	filewrite("Sekunden in S: "+text_var);
   	
   	INPAapiJob(sgbd,"STATUS_D_S_M_ZAEHLER","","");
   	INPAapiResultAnalog(real_zahl,"STAT_POSITION_D_WERT",1);
   	realtostring(real_zahl,"8.0",text_var);
   	filewrite("Sekunden in M: "+text_var);

  	
    fileclose();
    
    }
  
}


//**********************************************************************
//*
//* Fehlerprotokollausgabe Fehlerort
//*
//**********************************************************************
fs_protokoll_ort(in: int nr)
{
  int    i;
  int    x1;
  string temp1;
  string temp2;

  i=nr;
  filewrite( "");
  INPAapiResultInt(x1, "F_ORT_NR", i);
  inttohexstring(x1, 4, temp1);
  INPAapiResultText(temp2, "F_ORT_TEXT", i, "");
  filewrite("$FehlerOrtNr: " + temp1);
  filewrite("$FehlerOrtText: " + temp2);
}

fs_protokoll_hfk(in: int nr)
{
  int    i;
  string temp1;

  i=nr;
  filewrite( "");
  INPAapiResultText(temp1, "F_HFK", i, "");
  if (temp1 !="-1") filewrite( "Fehlerhäufigkeit: "+ temp1);
  INPAapiResultText(temp1, "F_LZ", i, "");
  if (temp1 !="-1") filewrite( "Logistikzähler  : "+ temp1);
}

//**********************************************************************
//*
//* Fehlerprotokollausgabe Fehlerarten
//*
//**********************************************************************
fs_protokoll_art(in: int nr)
{
  int    i;
  string temp1;

  i=nr;
  filewrite( "");
  INPAapiResultText(temp1, "F_SYMPTOM_TEXT", i, "");
  if (temp1 !="--") filewrite( "   "+ temp1);
  INPAapiResultText(temp1, "F_READY_TEXT", i, "");
  if (temp1 !="--") filewrite( "   "+ temp1);
  INPAapiResultText(temp1, "F_VORHANDEN_TEXT", i, "");
  if (temp1 !="--") filewrite( "   "+ temp1);
  INPAapiResultText(temp1, "F_WARNUNG_TEXT", i, "");
  if (temp1 !="--") filewrite( "   "+ temp1);
}

//**********************************************************************
//*
//* Fehlerprotokollausgabe erweiterte Fehlerarten
//*
//**********************************************************************
fs_protokoll_art_e(in: int nr)
{
  int    i;
  int    k;
  int    F_ART_ANZ;
  string temp1;
  string temp2;

  i=nr;
  INPAapiResultInt(F_ART_ANZ, "F_ART_ANZ", i);
  if ( F_ART_ANZ > 0 )
  {
    k=0;
    while ( k < F_ART_ANZ )
    {
      k = k + 1;
      inttostring(k,temp2);
      INPAapiResultText(temp1, "F_ART"+temp2+"_TEXT", i, "");
      if (temp1 !="--") filewrite( "   "+ temp1);
    }
  }
}

//**********************************************************************
//*
//* Fehlerprotokollausgabe Umweltbedingungen
//*
//**********************************************************************
fs_protokoll_uwb(in: int nr)
{
  int    i;
  int    k;
  int    F_UW_ANZ;
  string temp1;
  string temp2;
  string temp3;

  i=nr;
  INPAapiResultText(temp1, "F_UW_KM", i, "6L");
  if (temp1 != "524280")
  {
    temp2 = "Kilometerstand                          ";
    filewrite( "   " + temp2 + temp1 + "     km");
  }
  INPAapiResultInt(F_UW_ANZ, "F_UW_ANZ", i);
  if ( F_UW_ANZ > 0 )
  {
    k=0;
    while ( k < F_UW_ANZ )
    {
      k = k + 1;
      inttostring(k,temp2);
      INPAapiResultText(temp3, "F_UW"+temp2+"_EINH", i, "");
      AnsiUpper(temp3,temp3);
      if ((temp3 == "0-N") || (temp3 == "HEX"))
      {
        INPAapiResultText(temp1, "F_UW"+temp2+"_TEXT", i, "-20T");
        if (temp1 !="--")
        {
          if ((_FsMode & 0x08) != 0)
          {
            INPAapiResultText(temp3, "F_UW"+temp2+"_WERT", i, "28T");
            temp1 = temp1 + " " + temp3;
          }
          if ((_FsMode & 0x10) != 0)
          {
            INPAapiResultText(temp3, "F_UW"+temp2+"_EINH", i, "");
            temp1 = temp1 + "  " + temp3;
          }
          filewrite( "   "+ temp1);
        }
      }
      else
      {
        INPAapiResultText(temp1, "F_UW"+temp2+"_TEXT", i, "-40T");
        if (temp1 !="--")
        {
          if ((_FsMode & 0x08) != 0)
          {
            INPAapiResultText(temp3, "F_UW"+temp2+"_WERT", i, "8.2R");
            temp1 = temp1 + " " + temp3;
          }
          if ((_FsMode & 0x10) != 0)
          {
            INPAapiResultText(temp3, "F_UW"+temp2+"_EINH", i, "");
            temp1 = temp1 + "  " + temp3;
          }
          filewrite( "   "+ temp1);
        }
      }
    }
  }
}

//**********************************************************************
//*
//* Fehlerprotokollausgabe Hexcode
//*
//**********************************************************************
fs_protokoll_hex(in: int nr)
{
  string nl;
  int    i;
  int    x1;
  int    x2;
  int    x3;
  string temp1;
  string temp2;
  string temp3;

  chr(10,nl);
  i=nr;
  filewrite( "");
  INPAapiResultBinary("F_HEX_CODE", i);
  GetBinaryDataString ( temp1, x1);
  x2 = 0;
  x3 = 0;
  temp2="";
  while ( x2 < x1 )
  {
    midstr(temp3, temp1, x2, 2);
    temp2 = temp2 + temp3;
    x2 = x2 + 2;
    x3 = x3 + 1;
    if ( x2 < x1 )
    {
      if ( x3 < 16 )
        temp2 = temp2 + " ";
      else
      {
        x3 = 0;
        temp2 = temp2 + nl + "            ";
      }
    }
  }
  filewrite( "Fehlercode: "+temp2);
}
// -- EOF --





  
  



dataausgabe()
{
        satz_tel_antwort=6;
        INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
        GetBinaryDataString(wert1_binary,wert1_antw_laenge);
        ftextout("SG-Antwort Backup FS lesen: ", 2,0,0,1);
        strlen(slaenge,wert1_binary);
        if (slaenge>=70) 
         {
           midstr(text_var,wert1_binary,0,70);
           ftextout(text_var, 3,0,0,1);
         }
         else 
         {
           midstr(text_var,wert1_binary,0,slaenge);
           ftextout(text_var, 3,0,0,1);
         }
         
        if (slaenge>140) 
        {
          midstr(text_var,wert1_binary,70,70);
          ftextout(text_var, 4,0,0,1);
        }
        if ((slaenge>70) && (slaenge <=140))
        {
           midstr(text_var,wert1_binary,70,slaenge-70);
           ftextout(text_var, 4,0,0,1);
        } 
         
        if (slaenge>210) 
        {
           midstr(text_var,wert1_binary,140,70);
           ftextout(text_var, 5,0,0,1);
           midstr(text_var,wert1_binary,210,slaenge-210);
           ftextout(text_var, 6,0,0,1);
         }
         if ((slaenge>140) && (slaenge <=210)) 
         {
           midstr(text_var,wert1_binary,140,slaenge-140);
           ftextout(text_var, 5,0,0,1);   
         } 
   }

initfile()
{
  string name;                 // Name des Bearbeiters
  string fahrzeug;             // Identifikation des Fahrzeugs
  string date;                 // Systemdatum
  string time;                 // Systemzeit
    
  // Eingabe: Filename, Identifizierungsdaten
  inputtext(file,"Filename","Geben sie den Namen fuer den Pruefcode ein!");
  getinputstate(input_state);
  if (input_state==input_ok)
    {
    fileopen(file,"w");
    input2text(name,fahrzeug,"Filetitel","Geben sie die Daten"+
    " zur Identifikation des Files ein!","Ihr Name?","E65 IEX/PPP Nr.?");
    getinputstate(input_state2);
    if (input_state2==input_ok)
      {   
      filewrite("==============================================================================================");
      filewrite("");
      filewrite(">>>>>>>>>>>>>>>>>>>>>>>>>>>         Prüfcode für EGS GS19.04       <<<<<<<<<<<<<<<<<<<<<<<<<<<");
      filewrite("");
      getdate (date);
      gettime (time);      
      filewrite("Datum/Zeit : "+date+"  "+time);
      filewrite("Dateiname  : "+file);
      filewrite("Bearbeiter : "+name);
      filewrite("Kommentar  : "+fahrzeug);
      filewrite("SGBD-Vers. : "+sgbd_ecu);
      filewrite("INPA-Vers. : "+titel+ea71_version);
      filewrite("");
      filewrite("==============================================================================================");
      filewrite("");      
      filewrite(">>>>>>>>>>>>>>>>>>>>>>>>>>>           EGS Identifikation           <<<<<<<<<<<<<<<<<<<<<<<<<<<");
      filewrite("");
      // Identifikation
      INPAapiJob(sgbd,"IDENT","","");
     
      INPAapiResultText(text_var,"ID_BMW_NR",1,"");
      filewrite("BMW Teilenummer             : "+text_var);
      
      INPAapiResultText(text_var,"ID_HW_NR",1,"");   
      filewrite("BMW Hardwarenummer          : "+text_var);
            
      INPAapiResultText(text_var,"ID_COD_INDEX",1,"");     
      filewrite("Codier-Index                : "+text_var);
          
      INPAapiResultText(text_var,"ID_DIAG_INDEX",1,"");
      filewrite("Diagnose-Index              : "+text_var);
            
      INPAapiResultText(text_var,"ID_VAR_INDEX",1,"");
      filewrite("Varianten-Index             : "+text_var);
         
      INPAapiResultText(text_var,"ID_DATUM",1,""); 
      filewrite("Herstelldatum               : "+text_var);
            
      INPAapiResultText(text_var,"ID_LIEF_TEXT",1,"");
      filewrite("Lieferant                   : "+text_var);
        
      INPAapiResultText(text_var,"ID_SW_NR_MCV",1,"");  
      filewrite("Nachrichtenkatalognummer MCV: "+text_var);
          
      INPAapiResultText(text_var,"ID_SW_NR_FSV",1,"");
      filewrite("Funktionssoftwarenummer FSV : "+text_var);
         
      INPAapiResultText(text_var,"ID_SW_NR_OSV",1,"");
      filewrite("Betriebssystemnummer OSV    : "+text_var);
      
      INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","","");
          
      INPAapiResultText(text_var,"STAT_PROGRAMMSTAND_TEXT",1,""); 
      filewrite("Programmstand               : "+text_var);
        
      INPAapiResultText(text_var,"STAT_ERSTELLER_TEXT",1,""); 
      filewrite("Ersteller                   : "+text_var);
          
      INPAapiResultText(text_var,"STAT_SONDERSTAND_TEXT",1,"");
      filewrite("Sonderstand                 : "+text_var);
      
      filewrite("");
      filewrite("==============================================================================================");
      filewrite("");
      file_da=TRUE;
      }
    }
}  

// Quicktest Ergebnis abspeichern
quicktesttofile()
{
  int tellaenge;             // Telegrammlänge
  string telant;             // Telegramm als String

  INPAapiJob(sgbd,"QUICKTEST","","");
  
  filewrite(">>>>>>>>>>>>>>>>>>>>>>>>>                 Quicktest                  <<<<<<<<<<<<<<<<<<<<<<<<<");
  filewrite("");

  // Anzahl Fehler
  INPAapiResultInt(int_zahl,"ANZAHL_FEHLER",1);
  inttostring(int_zahl,text_var);
  filewrite ("Es sind " + text_var + " Fehler gespeichert");
  filewrite ("");

  // Betriebsstundenzaehler beim letzten Löschen
  INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_FS_LOESCHEN",1);
  realtostring(real_zahl,"8.0",text_var);  
  filewrite ("Letztes Loeschen des FS : " + text_var + " km                                ");

  // Betriebsstundenzaehler aktuell
  INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_AKTUELL",1);
  realtostring(real_zahl,"8.0",text_var);  
  filewrite ("Aktueller Kilometerstand : " + text_var + " km                               "); 
  filewrite("");
  filewrite("==============================================================================================");
  filewrite("");
  
}

fstofile()
{
  filewrite(">>>>>>>>>>>>>>>>>>>>>>>>>>>          Fehlerspeicher lesen          <<<<<<<<<<<<<<<<<<<<<<<<<<");
  filewrite("");
  INPAapiJob(sgbd,"FS_LESEN","","");
  INPAapiResultInt(fehler_gesamt,"SAETZE",0);
  fehler_gesamt=fehler_gesamt-1; 
  counter=1;
  
  while (counter <= fehler_gesamt)
  {
    filewrite("----------------------------------------------------------------------------------------------");
    inttostring(counter,counter_string);
    filewrite("Fehler Nr."+counter_string);
    INPAapiJob(sgbd,"fs_lesen","",""); 
    INPAapiResultInt(fehlercode,"F_ORT_NR",counter); 
    inttostring(fehlercode,text_var);
    INPAapiJob(sgbd,"fs_lesen_detail",text_var,"");       //<---- Aktivieren
    //INPAapiJob(sgbd,"fs_lesen_detail","20647","");       //<---- Deaktivieren
              
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    filewrite ("Fehlerort Text           : " + text_var);
        
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    filewrite ("Fehlercode               : " + text_var);
             
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    filewrite ("Fehlerart                : " + text_var);
 
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    filewrite ("Fehlerhäufigkeit         : " + text_var);
      
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    filewrite ("Fehlerlogistikzähler     : " + text_var);
        
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    filewrite ("CARB Fehler              : " + text_var);
    
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    filewrite ("Fehler Status            : " + text_var);
    
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    filewrite ("Testbedingung            : " + text_var);
    
    filewrite("");
    if(anzahl_uw_saetze>=1)
      {
      filewrite("");
      filewrite ("Umweltbedingungen Satz 1 :");
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);
      
      INPAapiResultAnalog(real_zahl,"F_UW_KM",1);
      realtostring(real_zahl,"8.0",text_var);  
      filewrite("");   
      filewrite ("Kilometerstand           : " + text_var + " km");
      filewrite("");
      
      zahl=1;           
      while (zahl <= uw_bedingungen)
      {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,1,"");
         INPAapiResultText(text_zahl,f_uw_wert,1,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,1,"");
        
         strlen(slaenge,text_var);
         platz=1;
         blank1=" ";
         while(platz<=75-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank1=blank1+" ";
           platz=platz+1;
         }
        
         //realtostring(real_zahl,"6.2",text_zahl);
         //strlen(slaenge,text_zahl);
         strlen(slaenge,text_zahl);
         platz=1;
         blank2=" ";
         while(platz<=10-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank2=blank2+" ";
           platz=platz+1;
         }
                               
         filewrite (text_var+blank1+text_zahl+blank2+einh_var);
         zahl=zahl+1;
         
        }   // end while
      } // end if
         
     if(anzahl_uw_saetze>=2)
      {
       filewrite("");
       filewrite ("Umweltbedingungen Satz 2 :");  
       INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",2);
       
       INPAapiResultAnalog(real_zahl,"F_UW_KM",2);
       realtostring(real_zahl,"8.0",text_var);    
       filewrite(""); 
       filewrite ("Kilometerstand           : " + text_var + " km");
       filewrite("");
       zahl=1;
       while (zahl <= uw_bedingungen)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,2,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,2);
         INPAapiResultText(einh_var,f_uw_einh,2,"");
             
         strlen(slaenge,text_var);
         platz=1;
         blank1=" ";
         while(platz<=75-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank1=blank1+" ";
           platz=platz+1;
         }
        
         realtostring(real_zahl,"6.2",text_zahl);
         strlen(slaenge,text_zahl);
         platz=1;
         blank2=" ";
         while(platz<=10-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank2=blank2+" ";
           platz=platz+1;
         }
                
         filewrite (text_var+blank1+text_zahl+blank2+einh_var);
         zahl=zahl+1;
        }   // end while  
       } // end if
        
    if(anzahl_uw_saetze>=3)
      {
      filewrite("");
      filewrite ("Umweltbedingungen Satz 3 :");
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",3);
      
      INPAapiResultAnalog(real_zahl,"F_UW_KM",3);
      realtostring(real_zahl,"8.0",text_var);     
      filewrite("");
      filewrite ("Kilometerstand           : " + text_var + " km");
      filewrite("");
      zahl=1;
      while (zahl <= uw_bedingungen)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,3,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,3);
         INPAapiResultText(einh_var,f_uw_einh,3,"");
                
         strlen(slaenge,text_var);
         platz=1;
         blank1=" ";
         while(platz<=75-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank1=blank1+" ";
           platz=platz+1;
         }
        
         realtostring(real_zahl,"6.2",text_zahl);
         strlen(slaenge,text_zahl);
         platz=1;
         blank2=" ";
         while(platz<=10-slaenge)         //Formatierung: Zwischenraum dimensionieren
         {
           blank2=blank2+" ";
           platz=platz+1;
        }
                
         filewrite (text_var+blank1+text_zahl+blank2+einh_var);
         zahl=zahl+1;
        
        }   // end while  
       
      }    // end if
      
    
     if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
        INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
        GetBinaryDataString(wert1_binary,wert1_antw_laenge);
        filewrite("");
        filewrite("SG Antwort FS Lesen Detail");
        filewrite(wert1_binary);        
    
    filewrite("");
    counter=counter+1;  
    }     // end while
     filewrite("==============================================================================================");
}

// Neues File zum abspeichern öffnen
reinitfile()
{
  bool alt;
  
  inputdigital(alt,"Neues File?","Die zur Zeit geöffnete Datei heißt " + file +
  ". Wollen sie die alte Datei weiterverwenden oder eine neue öffnen?",
  "Neue Datei öffnen", "Alte Datei weiterverwenden");
  
  getinputstate(input_state);
  if((input_state==input_ok)&&(alt==FALSE))
    {
    file_da=FALSE;
    file="";
    fileclose();
    initfile();
    }
}


//Funktion zum speichern des Temperaturkollektivs
temperaturkollektiv_speichern()
{

    // Eingabe: Filename, Identifizierungsdaten
    file = "C:\EGS_Temp.txt";
    inputtext(file,"Filename","Dateiname fuer Fehlerspeicher und SG-Status eingeben!");
    getinputstate(input_state);
    
    //Wenn Eingabe OK, dann File abspeichern
    if (input_state==input_ok)
    {
    	fileopen(file,"w");
    	
    	filewrite("Temperaturkollektiv:");
    	filewrite("");
    	

     	INPAapiResultText(text_var,"STAT_CGTKO_0_WERT",1,""); 
        filewrite("Zaehler Temperaturbereich bis 60°C:  "+text_var);     	
     
     	INPAapiResultText(text_var,"STAT_CGTKO_1_WERT",1,""); 
        filewrite("Zaehler Temperaturbereich bis 70°C:  "+text_var); 
        
     	INPAapiResultText(text_var,"STAT_CGTKO_2_WERT",1,""); 
	filewrite("Zaehler Temperaturbereich bis 80°C:  "+text_var);            

     	INPAapiResultText(text_var,"STAT_CGTKO_3_WERT",1,""); 
     	filewrite("Zaehler Temperaturbereich bis 90°C:  "+text_var); 
   
     	INPAapiResultText(text_var,"STAT_CGTKO_4_WERT",1,""); 
        filewrite("Zaehler Temperaturbereich bis 100°C: "+text_var); 
   
     	INPAapiResultText(text_var,"STAT_CGTKO_5_WERT",1,""); 
        filewrite("Zaehler Temperaturbereich bis 110°C: "+text_var); 

     	INPAapiResultText(text_var,"STAT_CGTKO_6_WERT",1,""); 
        filewrite("Zaehler Temperaturbereich bis 120°C: "+text_var);
     
     	INPAapiResultText(text_var,"STAT_CGTKO_7_WERT",1,""); 
     	filewrite("Zaehler Temperaturbereich bis 130°C: "+text_var);
     
     	INPAapiResultText(text_var,"STAT_CGTKO_8_WERT",1,""); 
     	filewrite("Zaehler Temperaturbereich bis 140°C: "+text_var);
     
     	INPAapiResultText(text_var,"STAT_CGTKO_9_WERT",1,""); 
     	filewrite("Zaehler Temperaturbereich bis 180°C: "+text_var);
     
     	INPAapiResultText(text_var,"STAT_ZEIT_UPTDATE_WERT",1,""); 
     	filewrite("");
     	filewrite("Zeit bis Update in Sekunden: "+text_var);
     	filewrite("");
         	
     	INPAapiResultText(text_var,"STAT_SUMME_8_9_WERT",1,""); 
     	filewrite("Summe Temperaturbereich bis 130-180°C    : "+text_var);
     
     	INPAapiResultText(text_var,"STAT_SUMME_8_9_ALT_WERT",1,"");    
     	filewrite("Summe Alt Temperaturbereich bis 130-180°C: "+text_var);
    
    	fileclose();
    }
    
    file="C:\DATEN\Fehlerspeicher\.txt"; //rücksetzten file name für FS speichern
}





// **************************
// ***     Hauptmenue     ***
// **************************

SCREEN s_main()
{
  
  INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
  INPAapiResultText(text_var,"JOB_STATUS",1,"");
  userboxclose(0);      // Bereits aktive User-Box schliessen
  ftextout("Hauptmenü GS19.11",1,0,1,0); 

  LINE("","")
    {
    ftextout("< F1 >   Information"                           , 3,0,0,1);
    ftextout("< F2 >   Identifikation"                        , 5,0,0,1);
    ftextout("< F3 >   Adaptionswerte"                        , 7,0,0,1);
    ftextout("< F4 >   Fehlerspeicher, Ersatzfunktionen"     , 9,0,0,1);
    ftextout("< F5 >   Messen     "                          ,11,0,0,1);
    ftextout("< F6 >   Status Signal/Stellglied steuern"      ,13,0,0,1);
    ftextout("< F7 >   Speicher"                        ,15,0,0,1);
    ftextout("< F8 >   Anwenderinfofeld (AIF) BRIF/ZIF/DIF"   ,17,0,0,1);
    ftextout("< F9 >   EGS CAN-Kommunikation/Reset EGS/Sleep-Mode"  ,19,0,0,1);
    ftextout("< F10>   Flashverifikation"                           ,21,0,0,1);  
    ftextout("< Shift > + < F1 >   Boot-Identifikation"             ,23,0,0,1);  
    ftextout("< Shift > + < F2 >   Codierung"			    ,25,0,0,1);

    ftextout("< Shift > + < F9 >  Zurück"                           ,27,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,27,35,0,1);  
    wert1=0;
    wert2=0;
    wert3=0;
    wert4=0;
    wert5=0;
    test_var_gang=0;
    }
}


// ****************************
// * Screen Flashverifikation *
// ****************************

SCREEN s_flashverifikation()
{
  userboxclose(0);      // Bereits aktive User-Box schliessen
  ftextout("Flashverifikation",1,0,1,0);
  
   LINE("","")
    {
    INPAapiJob(sgbd,"FLASH_ZEITEN_LESEN","","");
    INPAapiResultInt(int_zahl,"FLASH_LOESCHZEIT",1);     
    ftextout("Flash Löschzeit",3,0,0,1);   
    ftextout(": ",3,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,3,27,0,1);
    
    INPAapiResultInt(int_zahl,"FLASH_SIGNATURTESTZEIT",1);     
    ftextout("Flash Signaturtestzeit",4,0,0,1);   
    ftextout(": ",4,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,4,27,0,1);
    
    INPAapiResultInt(int_zahl,"FLASH_RESETZEIT",1);     
    ftextout("Flash Resetzeit",5,0,0,1);   
    ftextout(": ",5,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,5,27,0,1);
    
    INPAapiResultInt(int_zahl,"FLASH_AUTHENTISIERZEIT",1);     
    ftextout("Flash Authentisierzeit",6,0,0,1);   
    ftextout(": ",6,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,6,27,0,1);
    }    
    
   LINE("","")
    {
    INPAapiJob(sgbd,"FLASH_BLOCKLAENGE_LESEN","","");

    INPAapiResultInt(int_zahl,"FLASH_BLOCKLAENGE_GESAMT",1);     
    ftextout("Flash Blocklaenge gesamt",3,0,0,1);   
    ftextout(": ",3,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,3,27,0,1);

    INPAapiResultInt(int_zahl,"FLASH_BLOCKLAENGE_DATEN",1);     
    ftextout("Flash Blocklaenge Daten",4,0,0,1);   
    ftextout(": ",4,25,0,1);
    inttostring(int_zahl,text_var);
    ftextout(text_var,4,27,0,1);
    }

   LINE("","")
    {
    INPAapiJob(sgbd,"FLASH_PROGRAMMIER_STATUS_LESEN","","");


    INPAapiResultText(text_status,"FLASH_PROGRAMMIER_STATUS_TEXT",1,"");
    ftextout("Flash Programmierstatus",3,0,0,1);   
    ftextout(": ",3,25,0,1);
    ftextout(text_status,3,31,0,1);
    INPAapiResultInt(int_zahl,"FLASH_PROGRAMMIER_STATUS",1);     
    inttostring(int_zahl,text_var);
    ftextout(text_var,3,27,0,1);
    }

   LINE("","")
    {
    INPAapiJob(sgbd,"PHYSIKALISCHE_HW_NR_LESEN","","");
    INPAapiResultText(text_status,"PHYSIKALISCHE_HW_NR",1,"");
    ftextout("BMW E-Modul HW-Nr.",3,0,0,1);   
    ftextout(": ",3,25,0,1);
    ftextout(text_status,3,27,0,1);

    INPAapiJob(sgbd,"IDENT","","");
    ftextout("BMW E-Modul HW*-Nr.",4,0,0,1);
    ftextout(":",4,25,0,1);
    INPAapiResultText(text_var,"ID_BMW_NR",1,"");
    ftextout(text_var,4,27,0,1);
    }

   LINE("","")
    {
    INPAapiJob(sgbd,"ZIF_BACKUP_LESEN","","");

    INPAapiResultText(text_status,"ZIF_BACKUP_PROGRAMM_REFERENZ",1,"");
    ftextout("ZIF Backup Programmref.",3,0,0,1);   
    ftextout(": ",3,25,0,1);
    ftextout(text_status,3,27,0,1);
    
    INPAapiResultText(text_status,"ZIF_BACKUP_BMW_HW",1,"");
    ftextout("ZIF Backup E-Modul HW*-Nr.",4,0,0,1);   
    ftextout(": ",4,25,0,1);
    ftextout(text_status,4,27,0,1);    
    }
    
}


// **************************
// * Screen Kommunikation   *
// **************************

SCREEN s_kommunikation()
{
  userboxclose(0);      // Bereits aktive User-Box schliessen
  ftextout("CAN-Kommunikation/Reset EGS/Sleep-Mode",1,0,1,0);
  
   LINE("","")
    {
    INPAapiJob(sgbd,"SIGNATURTEST_PAF","","");
    ftextout("Signaturtest PAF: ",1,0,0,1);   
    INPAapiResultInt(int_zahl,"STAT_SIGNATUR_PAF_WERT",1);     
    if (int_zahl==0) tmpBool=0;
        else tmpBool=1;   
     digitalout(tmpBool,3,0,"Signaturpruefung iO        ","Signaturpruefung niO          ");  
     
    INPAapiJob(sgbd,"SIGNATURTEST_DAF","","");
    ftextout("Signaturtest DAF: ",1,50,0,1);   
    INPAapiResultInt(int_zahl,"STAT_SIGNATUR_DAF_WERT",1);      
    if (int_zahl==0) tmpBool=0;
        else tmpBool=1;   
     digitalout(tmpBool,3,50,"Signaturpruefung iO        ","Signaturpruefung niO          ");  
    }
    
  LINE("","")
    {
    ftextout("< F1 >   EGS Reset (Ausführungsbedingungen beachten!)"                             , 3,0,0,1);
    ftextout("< F2 >   EGS Sleep Mode (Ausführungsbedingungen beachten!)"                        , 5,0,0,1);
    ftextout("< F3 >   EGS CAN-Kommunikation stoppen (Ausführungsbedingungen beachten!)"         , 7,0,0,1);
    ftextout("< F4 >   EGS CAN-Kommunikation starten"         , 9,0,0,1);
    ftextout("< F5 >   Ganganzeige im Kombi starten"         , 11,0,0,1);  
    ftextout("< F6 >   Ganganzeige im Kombi stoppen"         , 13,0,0,1);
    ftextout("< Shift > + < F9 >  Zurück"                           ,21,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,21,35,0,1);   
     
    }
}

// **************************
// * Speicher lesen Screen  *
// **************************

SCREEN s_speicher()
{
  INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
  INPAapiResultText(text_var,"JOB_STATUS",1,"");
  userboxclose(0);      // Bereits aktive User-Box schliessen
  ftextout("Speicher lesen",1,0,1,0);
  
  LINE("","")
    {
    ftextout("< F1 >  WERT 1:"                          , 3,0,0,1);   
    if (wert1==1)
    { 
      ftextout(wert1_text                        , 3,20,0,1); 
      inttostring(wert1_lang,text_zahl);                 
      inttostring(zahl_adresse_1,text_zahl_adresse);                 
      INPAapiJob(sgbd,"speicher_lesen",speicher_seg_1+";"+text_zahl_adresse+";"+text_zahl,"");
      INPAapiResultBinary("daten",1);
      GetBinaryDataString(wert1_binary,wert1_antw_laenge);
      ftextout(wert1_binary  , 3,40,0,1);
     }      
    ftextout("< F2 >  WERT 2:"                          , 5,0,0,1);   
    if (wert2==1)
    { 
      ftextout(wert2_text                        , 5,20,0,1); 
      inttostring(wert2_lang,text_zahl);    
      inttostring(zahl_adresse_2,text_zahl_adresse);                 
      INPAapiJob(sgbd,"speicher_lesen",speicher_seg_2+";"+text_zahl_adresse+";"+text_zahl,"");
      INPAapiResultBinary("daten",1);
      GetBinaryDataString(wert2_binary,wert2_antw_laenge);
      ftextout(wert2_binary  , 5,40,0,1);
     } 
    ftextout("< F3 >  WERT 3:"                          , 7,0,0,1);    
    if (wert3==1)
    { 
      ftextout(wert3_text                        , 7,20,0,1); 
      inttostring(wert3_lang,text_zahl);                 
      inttostring(zahl_adresse_3,text_zahl_adresse);                 
      INPAapiJob(sgbd,"speicher_lesen",speicher_seg_3+";"+text_zahl_adresse+";"+text_zahl,"");
      INPAapiResultBinary("daten",1);
      GetBinaryDataString(wert3_binary,wert3_antw_laenge);
      ftextout(wert3_binary  , 7,40,0,1);
     } 
    ftextout("< F4 >  WERT 4:"                          , 9,0,0,1);    
    if (wert4==1)
    { 
      ftextout(wert4_text                        , 9,20,0,1); 
      inttostring(wert4_lang,text_zahl);                 
      inttostring(zahl_adresse_4,text_zahl_adresse);                 
      INPAapiJob(sgbd,"speicher_lesen",speicher_seg_4+";"+text_zahl_adresse+";"+text_zahl,"");
      INPAapiResultBinary("daten",1);
      GetBinaryDataString(wert4_binary,wert4_antw_laenge);
      ftextout(wert4_binary  , 9,40,0,1);
     } 
    ftextout("< F5 >  WERT 5:"                          , 11,0,0,1);  
    if (wert5==1)
    { 
      ftextout(wert5_text                        , 11,20,0,1); 
      inttostring(wert5_lang,text_zahl);                 
      inttostring(zahl_adresse_5,text_zahl_adresse);                 
      INPAapiJob(sgbd,"speicher_lesen",speicher_seg_5+";"+text_zahl_adresse+";"+text_zahl,"");
      INPAapiResultBinary("daten",1);
      GetBinaryDataString(wert5_binary,wert5_antw_laenge);
      ftextout(wert5_binary  , 11,40,0,1);
     }   
    ftextout("< Shift > + < F9 >  Zurück"                           ,26,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,26,35,0,1);   
   }
      
}


// **************************
// *** Infoscreen         ***
// **************************
SCREEN s_info ()
{
  INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
  INPAapiResultText(text_var,"JOB_STATUS",1,"");
  
  ftextout("Information",1,0,1,0);
  ftextout("INPA Oberfläche für Entwicklung",4,0,0,1);
  ftextout(":",4,25,0,1);
  ftextout(titel,4,27,0,1);
  ftextout("Basis-Version",6,0,0,1);
  ftextout(":",6,25,0,1);
  ftextout(version,6,27,0,1);
  ftextout("Ansprechpartner",8,0,0,1);
  ftextout(":",8,25,0,1);
  ftextout(origin,8,27,0,1);
  ftextout("Steuergerätebeschreibungsdatei",13,0,0,1);
  ftextout(":",13,25,0,1);
  ftextout(sgbd,13,27,0,1);
  ftextout("Steuergerät",15,0,0,1);
  ftextout(":",15,25,0,1);
  ftextout(sgbd_ecu,15,27,0,1);
  ftextout("Basis-Version",17,0,0,1);
  ftextout(":",17,25,0,1);
  ftextout(sgbd_revision,17,27,0,1);
  ftextout("Ansprechpartner",19,0,0,1);
  ftextout(":",19,25,0,1);
  ftextout(sgbd_origin,19,27,0,1);
  ftextout("Sprache",21,0,0,1);
  ftextout(":",21,25,0,1);
  ftextout(sgbd_sprache,21,27,0,1);
  if (sgbd_comment!="")
    {
    ftextout("Kommentar",23,0,0,1);
    ftextout(":",23,25,0,1);
    ftextout(sgbd_comment,23,27,0,1);
    }
    ftextout("< Shift > + < F9 >  Zurück"                           ,29,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,29,35,0,1);  
}

// ***************************
// *** Identscreen         ***
// ***************************
SCREEN s_ident()
{
  ftextout("Identifikation",1,0,1,0);
  ftextout("",2,18,0,0);

  LINE("","")
    {    
    INPAapiJob(sgbd,"PHYSIKALISCHE_HW_NR_LESEN","","");
    INPAapiResultText(text_status,"PHYSIKALISCHE_HW_NR",1,"");

    // ID lesen
    INPAapiJob(sgbd,"IDENT","","");

    ftextout("BMW E-Modul HW*-Nr.",1,0,0,1);
    ftextout(":",1,30,0,1);
    INPAapiResultText(text_var,"ID_BMW_NR",1,"");
    ftextout(text_var,1,32,0,1);

    ftextout("BMW E-Modul HW-Nr.",2,0,0,1);   
    ftextout(": ",2,30,0,1);
    ftextout(text_status,2,32,0,1);

    ftextout("BMW Hardwareindex",3,0,0,1);
    ftextout(":",3,30,0,1);
    INPAapiResultText(text_var,"ID_HW_NR",1,"");
    ftextout(text_var,3,32,0,1);
    
    ftextout("Codier-Index",5,0,0,1);
    ftextout(":",5,30,0,1);
    INPAapiResultText(text_var,"ID_COD_INDEX",1,"");
    ftextout(text_var,5,32,0,1);
    
    ftextout("Diagnose-Index",6,0,0,1);
    ftextout(":",6,30,0,1);
    INPAapiResultText(text_var,"ID_DIAG_INDEX",1,"");
    ftextout(text_var,6,32,0,1);
    
    ftextout("Varianten-Index",7,0,0,1);
    ftextout(":",7,30,0,1);
    INPAapiResultText(text_var,"ID_VAR_INDEX",1,"");
    ftextout(text_var,7,32,0,1);
   
    ftextout("Herstelldatum ",9,0,0,1);
    ftextout(":",9,30,0,1);
    INPAapiResultText(text_var,"ID_DATUM",1,"");
    ftextout(text_var,9,32,0,1); 
    
    ftextout("Lieferant",11,0,0,1);
    ftextout(":",11,30,0,1);
    INPAapiResultText(text_var,"ID_LIEF_TEXT",1,"");
    ftextout(text_var,11,32,0,1);
    
    ftextout("Nachrichtenkatalognummer MCV",13,0,0,1);
    ftextout(":",13,30,0,1);
    INPAapiResultText(text_var,"ID_SW_NR_MCV",1,"");
    ftextout(text_var,13,32,0,1);
    
    ftextout("Funktionssoftwarenummer FSV",14,0,0,1);
    ftextout(":",14,30,0,1);
    INPAapiResultText(text_var,"ID_SW_NR_FSV",1,"");
    ftextout(text_var,14,32,0,1);
    
    ftextout("Betriebssystemnummer OSV",15,0,0,1);
    ftextout(":",15,30,0,1);
    INPAapiResultText(text_var,"ID_SW_NR_OSV",1,"");
    ftextout(text_var,15,32,0,1);
    
    INPAapiJob(sgbd,"STATUS_SYSTEM_SUPPLIER_ECU_HW_NR","","");
    ftextout("BOSCH EGS HW-Nummer",17,0,0,1);
    ftextout(":",17,30,0,1);
    INPAapiResultText(text_var,"STAT_SYSTEM_SUPPLIER_ECU_HW_NR_WERT",1,"");
    ftextout(text_var,17,32,0,1);
    
    INPAapiJob(sgbd,"STATUS_SYSTEM_SUPPLIER_ECU_SERIAL_NR","","");
    ftextout("BOSCH EGS Serien-Nummer",18,0,0,1);
    ftextout(":",18,30,0,1);
    INPAapiResultText(text_var,"STAT_SYSTEM_SUPPLIER_ECU_SERIAL_NR_TEXT",1,"");
    ftextout(text_var,18,32,0,1);
    
    INPAapiJob(sgbd,"STATUS_MODUL_SERIAL_NR","","");
    ftextout("MODUL Serien-Nummer",19,0,0,1);
    ftextout("ZF-Teilenummer:  ",19,32,0,1);
    INPAapiResultText(text_var,"STAT_ZF_MODUL_SERIAL_NR_TEXT",1,"");
    ftextout(text_var,19,47,0,1);
    ftextout("RB-Seriennummer:  ",20,32,0,1);
    INPAapiResultText(text_var,"STAT_RB_MODUL_SERIAL_NR_TEXT",1,"");
    ftextout(text_var,20,47,0,1);
    ftextout("Fertigungsdatum:  ",21,32,0,1);
    INPAapiResultText(text_var,"STAT_DATUM_TEXT",1,"");
    ftextout(text_var,21,47,0,1);
        
    INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","","");
    ftextout("Programmstand",23,0,0,1);
    ftextout(":",23,15,0,1);
    INPAapiResultText(text_var,"STAT_PROGRAMMSTAND_TEXT",1,"");
    ftextout(text_var,23,17,0,1);

   

    INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","","");
    ftextout("Ersteller",24,0,0,01);
    ftextout(":",24,15,0,1);
    INPAapiResultText(text_var,"STAT_ERSTELLER_TEXT",1,""); 
    ftextout(text_var,24,17,0,1);
    
    ftextout("Sonderstand",24,40,0,01);
    ftextout(":",24,55,0,1);
    INPAapiResultText(text_var,"STAT_SONDERSTAND_TEXT",1,"");
    ftextout(text_var,24,57,0,1);    
    ftextout("< Shift > + < F9 >  Zurück"                           ,26,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,26,35,0,1);    
    }        
    
}


SCREEN s_bootident()
{
  ftextout("Boot-Identifikation",1,0,1,0);
  ftextout("",2,18,0,0);


 text_var="unknown";
    INPAapiJob(sgbd,"STATUS_SYSTEM_BOOT_VERSION_NR","","");
    ftextout("BB Bootversion",4,0,0,1);
    ftextout(":",4,15,0,1);
    INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_VERSION_NR_TEXT",1,"");
    ftextout(text_var,4,20,0,1);
    ftextout("BB Boottyp",6,0,0,1);
    ftextout(":",6,15,0,1);
    INPAapiResultText(text_var,"STAT_SYSTEM_BOOT_TYPE_TEXT",1,"");
    ftextout(text_var,6,20,0,1);
    INPAapiJob(sgbd,"STATUS_SYSTEM_BS_BOOT_VERSION_NR","","");
    ftextout("BS Bootversion",8,0,0,1);
    ftextout(":",8,15,0,1);
    INPAapiResultText(text_var,"STAT_SYSTEM_BS_BOOT_VERSION_NR_TEXT",1,"");
    ftextout(text_var,8,20,0,1);
    ftextout("< Shift > + < F9 >  Zurück"                           ,29,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,29,35,0,1);
    
}    

SCREEN s_codierung()
{
  ftextout("Codierung:",1,0,1,0);
  ftextout("",3,0,0,0);
  
  INPAapiJob(sgbd,"STATUS_CODIERUNG","","");
  INPAapiResultText(text_var,"STAT_CODIERUNG_TEXT",1,"");
  ftextout("Status Codierung: ",4,0,0,1);
  ftextout(text_var,4,20,0,0);

  if(text_var != "SG NICHT CODIERT")
  {
    INPAapiResultText(text_var,"STAT_CODIERUNG_NIC_TEXT",1,"");
    ftextout("Status Codierung NIC: ",6,0,0,1);
    ftextout(text_var,6,20,0,0);
  
    INPAapiResultText(text_var,"STAT_CODIERUNG_EL_INTERLOCK_TEXT",1,"");
    ftextout("Status Codierung el. Interlock: ",7,0,0,1);
    ftextout(text_var,7,20,0,0);
    
    INPAapiResultText(text_var,"STAT_CODIERUNG_ISO_OBD_TEXT",1,"");
    ftextout("Status Codierung OBD Variante: ",8,0,0,1);
    ftextout(text_var,8,20,0,0);
  }
}

// **************************
// *** Fehlerscreen FS 1  ***
// **************************
SCREEN s_fehler()
{
  ftextout("Fehlerspeicher, Ersatzfunktionen",1,0,1,0);
  ftextout("",3,0,0,0);

  LINE("","")
    {
      
    // Anzahl Fehler
    INPAapiJob(sgbd,"FS_LESEN","","");
   
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(int_zahl,"SAETZE",0);
    int_zahl=int_zahl-1;
    inttostring(int_zahl,text_var);
    ftextout("Es sind " + text_var + " Fehler gespeichert",0,0,0,1);

    // Fehlerspeicher Quicktest 
    INPAapiJob(sgbd,"QUICKTEST","","");
    INPAapiCheckJobStatus("OKAY");
    
    // Betriebsstundenzaehler beim letzten Loeschen
    ftextout("Kilometerstand beim letzten Loeschen des FS",2,0,0,1);
    ftextout(":",2,38,0,1);
    
    INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_FS_LOESCHEN",1);
    realtostring(real_zahl,"8.0",text_var);
    ftextout(text_var + " km                              ",2,40,0,1);
     
    // Betriebsstundenzaehler aktuell
    ftextout("Aktueller Stand Kilometerstand",3,0,0,1);
    ftextout(":",3,38,0,1);
    
    INPAapiResultAnalog(real_zahl,"KILOMETERSTAND_AKTUELL",1);
     realtostring(real_zahl,"8.0",text_var);
     ftextout(text_var + " km                              ",3,40,0,1);
     
     
    ftextout("< F1 >  Primär-Fehlerspeicher lesen"     , 6,0,0,1);
    ftextout("< F2 >  Fehlerspeicher speichern in Datei" ,8,0,0,1);
    ftextout("< F3 >  Fehlerspeicher löschen"   , 10,0,0,1);    
    ftextout("< F4 >  Sicherungsfunktionen aktiv" ,12,0,0,1);
    ftextout("< F5 >  Ersatzfunktionen aktiv" ,14,0,0,1);    
    ftextout("< F6 >  Backup-Fehlerspeicher lesen" ,16,0,0,1);
    ftextout("< F7 >  Infozähler lesen" ,6,40,0,1);
    ftextout("< F8 >  Timeoutdiagnose aktiv" ,8,40,0,1);
    ftextout("< F9 >  Status Standardabsicherung" ,10,40,0,1);
    ftextout("< F10>  Infospeicher lesen" ,12,40,0,1);
    
    
    ftextout("< Shift > + < F9 >  Zurück"                           ,25,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,25,35,0,1);  
    }
}

 

 
SCREEN s_infozaehler()
{  real   pos_d, pos_s, pos_m;
   string einheit_d, einheit_s, einheit_m;
   string text_pos_d, text_pos_s, text_pos_m;


   ftextout("EGS Infozähler/Fehlerzähler ",1,0,1,0);
   INPAapiJob(sgbd,"STATUS_RESET_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("EGS Resetzähler : ",5,0,0,1);  
   ftextout(text_var+"  EGS Resets vorhanden",5,40,0,1); 
   
   INPAapiJob(sgbd,"STATUS_ZWANGSHOCHSCHALTUNG_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("DME Zwangshochschaltung 5->6  : ",7,0,0,1);
   ftextout(text_var+"  Anforderungen vorhanden",7,40,0,1); 

   if (ESchaltung==1)
   {
   INPAapiJob(sgbd,"STATUS_AUTO_P_PM1_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("AUTO-P wegen Power Modul Abschaltung  : ",9,0,0,1);
   ftextout(text_var+"  Anforderungen vorhanden",9,40,0,1); 

   INPAapiJob(sgbd,"STATUS_AUTO_P_EMF2_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("AUTO-P wegen Absicherung EMF Komfortebene : ",11,0,0,1);
   ftextout(text_var+"  Anforderungen vorhanden",11,40,0,1); 

   INPAapiJob(sgbd,"STATUS_AUTO_P_EMF1_ZAEHLER","","");
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("AUTO-P wegen EMF Hilferuf : ",13,0,0,1); 
   ftextout(text_var+"  Anforderungen vorhanden",13,40,0,1); 
   
   INPAapiJob(sgbd,"STATUS_AUTO_N_SZL_ZAEHLER","","");
   INPAapiCheckJobStatus("OKAY");    
   INPAapiResultAnalog(real_zahl,"STAT_ZAEHLER_WERT",1);
   realtostring(real_zahl,"8.0",text_var);
   ftextout("AUTO-N wegen GWS Zwischenposition/Init  : ",15,0,0,1); 
   ftextout(text_var+"  Anforderungen vorhanden",15,40,0,1); 
   }

   INPAapiJob(sgbd,"STATUS_D_S_M_ZAEHLER","","");
   INPAapiResultAnalog(pos_d,"STAT_POSITION_D_WERT",1);
   realtostring(pos_d,"8.0",text_pos_d);
   INPAapiResultText(einheit_d,"STAT_POSITION_D_EINH",1,"");
   INPAapiResultAnalog(pos_s,"STAT_POSITION_S_WERT",1);
   realtostring(pos_s,"8.0",text_pos_s);
   INPAapiResultText(einheit_s,"STAT_POSITION_S_EINH",1,"");
   INPAapiResultAnalog(pos_m,"STAT_POSITION_M_WERT",1);
   realtostring(pos_m,"8.0",text_pos_m);
   INPAapiResultText(einheit_m,"STAT_POSITION_M_EINH",1,"");      
   ftextout("Schaltprogrammzähler D / S / M  : "+text_pos_d+einheit_d+" / "+text_pos_s+einheit_s+" / "+text_pos_m+einheit_m,17,0,0,1);  

   ftextout("< Shift > + < F9 >  Zurück"                           ,28,0,0,1);    
   ftextout("< Shift > + < F10 >  Ende"                            ,28,35,0,1);  
}

// **************************
// *** Fslesen Menue FS 2 ***
// **************************
SCREEN s_fslesen()
{
  ftextout("Fehlerspeicher lesen",1,0,1,0);
    
  LINE("","")
    {
     
    // Anzahl Fehler    
     INPAapiJob(sgbd,"FS_LESEN","","");
     //INPAapiCheckJobStatus("OKAY");
     INPAapiResultInt(fehler_ist,"SAETZE",0);
     fehler_ist=fehler_ist-1; 
     inttostring(fehler_ist,text_var);
     ftextout("Gespeicherte Fehler: "+text_var+"                          ",1,0,0,1);
     
     zahl=1;
        
     while(zahl<=fehler_ist)
      {
      	if(zahl<=10)
      	{
      		INPAapiResultText(fehler_text,"F_ORT_TEXT",zahl,""); 
      		inttostring(zahl,text_var);
      		ftextout("<F"+text_var+">  Fehler "+fehler_text+" ",2+(zahl),0,0,1);
        }
        if(zahl > 10 && zahl <= 18)
        {
        	INPAapiResultText(fehler_text,"F_ORT_TEXT",zahl,""); 
      		inttostring(zahl-10,text_var);
      		ftextout("<Shift><F"+text_var+">  Fehler "+fehler_text+" ",2+zahl,0,0,1);
      	}      
      zahl=zahl+1;
      }
      
    if(fehler_ist > 18)
    {
    	inttostring(fehler_ist-18, text_var);
    	ftextout("Es sind noch "+text_var+" weitere Fehler gespeichert !" ,24,10,0,1);
    }	  

    ftextout("< Shift > + < F9 >   Zurück"                           ,26,0,0,1);    
    ftextout("< Shift > + < F10 >  FS Löschen"                            ,26,35,0,1);  
    
    }
}

// **************************
// *** Fslesen Menue IS 2 ***
// **************************
SCREEN s_islesen()
{
  ftextout("Infospeicher lesen",1,0,1,0);
    
  LINE("","")
    {
     
    // Anzahl Fehler    
     INPAapiJob(sgbd,"IS_LESEN","","");
     //INPAapiCheckJobStatus("OKAY");
     INPAapiResultInt(fehler_ist,"SAETZE",0);
     fehler_ist=fehler_ist-1; 
     inttostring(fehler_ist,text_var);
     ftextout("Gespeicherte Fehler: "+text_var+"                          ",1,10,0,1);
     
     zahl=1;
        
     while(zahl<=fehler_ist)
      {
      
      INPAapiResultText(fehler_text,"F_ORT_TEXT",zahl,""); 
      inttostring(zahl,text_var);
      ftextout("<F"+text_var+">  Fehler "+fehler_text+"                          ",1+(zahl*2),0,0,1);
      zahl=zahl+1;
      }
      
    ftextout("< Shift > + < F3 >   IS Löschen"                      ,25,0,0,1);    
    ftextout("< Shift > + < F9 >   Zurück"                           ,26,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,26,35,0,1);  
    
    }
}




// ***************************
// *** FS set Screen  FS 3 ***
// ***************************
SCREEN s_fslesenset()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"FS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Fehlerspeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende                         ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);
    
    INPAapiJob(sgbd,"fs_lesen_detail",text_var,"");      
    //INPAapiCheckJobStatus("OKAY");
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(unsigned_int_zahl,"F_ORT_NR",1);
    
    inttostring(unsigned_int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
    inttohexstring(unsigned_int_zahl, 4, text_var);
    ftextout("("+text_var+" hex)                  ",4,35,0,1);

    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);

    ftextout("PCode Mode 3",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_PCODE_STRING",1,"");
    ftextout(text_var+"      ",9,20,0,1);
    INPAapiResultText(text_var,"F_PCODE_TEXT",1,"");
    ftextout("("+text_var+")                                           ",9,28,0,1);

    ftextout("PCode Mode 7",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_PCODE7_STRING",1,"");
    ftextout(text_var+"      ",10,20,0,1);
    INPAapiResultText(text_var,"F_PCODE7_TEXT",1,"");
    ftextout("("+text_var+")                                           ",10,28,0,1);

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
  
  
    LINE("","")
    {
     if(anzahl_uw_saetze>=1)
      {
     
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);
      ftextout("Umweltbedingung Satz 1",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",1);
      realtostring(real_zahl,"8.0",text_var);     
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       while (zahl <= uw_bedingungen)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,1,"");
          INPAapiResultText(text_zahl,f_uw_wert,1,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,1,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
        if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
         
       } // end line 
      } // end if
     
     LINE("","")
     { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
     }    
   
}


// ***************************
// *** FS set Screen  IS 3 ***
// ***************************
SCREEN s_islesenset()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"IS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Infospeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende                         ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);

    
    INPAapiJob(sgbd,"is_lesen_detail",text_var,"");      
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(unsigned_int_zahl,"F_ORT_NR",1);
    inttostring(unsigned_int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
    inttohexstring(unsigned_int_zahl, 4, text_var);
    ftextout("("+text_var+" hex)                  ",4,35,0,1);

    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);

    

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
  
  
    LINE("","")
    {
     if(anzahl_uw_saetze>=1)
      {
     
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);
      ftextout("Umweltbedingung Satz 1",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",1);
      realtostring(real_zahl,"8.0",text_var);     
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       while (zahl <= uw_bedingungen)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,1,"");
          INPAapiResultText(text_zahl,f_uw_wert,1,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,1,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
        if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
         
       } // end line 
      } // end if
     
     LINE("","")
     { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
     }    
   
}

// ********************************************
// *** FS set Screen  FS 3 Uweltbedingung 2 ***
// ********************************************
SCREEN s_fslesenset_uw2()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"FS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Fehlerspeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);
    
    INPAapiJob(sgbd,"fs_lesen_detail",text_var,"");       
          
    //INPAapiCheckJobStatus("OKAY");
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("PCode Mode 3",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_PCODE_STRING",1,"");
    ftextout(text_var+"   ",9,20,0,1);
    INPAapiResultText(text_var,"F_PCODE_TEXT",1,"");
    ftextout("("+text_var+")                         ",9,28,0,1);

    ftextout("PCode Mode 7",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_PCODE7_STRING",1,"");
    ftextout(text_var+"   ",10,20,0,1);
    INPAapiResultText(text_var,"F_PCODE7_TEXT",1,"");
    ftextout("("+text_var+")                         ",10,28,0,1);

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
  
  
    LINE("","")
    {
    
     if(anzahl_uw_saetze>=2)
      {
     
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",2);
      ftextout("Umweltbedingung Satz 2",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",2);
      realtostring(real_zahl,"8.0",text_var);   
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
       zahl=1;
       while (zahl <= uw_bedingungen)
         {      
        inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
        INPAapiResultText(text_var,f_uw_text,2,"");
          INPAapiResultText(text_zahl,f_uw_wert,2,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,2,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while  
         if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
        } // end line
       } // end if
     
       LINE("","")
       { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
        }    
   
}


// ********************************************
// *** FS set Screen  IS 3 Uweltbedingung 2 ***
// ********************************************
SCREEN s_islesenset_uw2()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"IS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Infospeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);
    
    INPAapiJob(sgbd,"is_lesen_detail",text_var,"");       
          
    //INPAapiCheckJobStatus("OKAY");
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
  

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
  
  
    LINE("","")
    {
    
     if(anzahl_uw_saetze>=2)
      {
     
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",2);
      ftextout("Umweltbedingung Satz 2",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",2);
      realtostring(real_zahl,"8.0",text_var);   
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
       zahl=1;
       while (zahl <= uw_bedingungen)
         {      
        inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
        INPAapiResultText(text_var,f_uw_text,2,"");
          INPAapiResultText(text_zahl,f_uw_wert,2,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,2,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while  
         if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
        } // end line
       } // end if
     
       LINE("","")
       { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
        }    
   
}



// ********************************************
// *** FS set Screen  FS 3 Uweltbedingung 3 ***
// ********************************************
SCREEN s_fslesenset_uw3()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"FS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Fehlerspeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);
    
    INPAapiJob(sgbd,"fs_lesen_detail",text_var,"");        
    
    //INPAapiCheckJobStatus("OKAY");
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("PCode Mode 3",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_PCODE_STRING",1,"");
    ftextout(text_var+"   ",9,20,0,1);
    INPAapiResultText(text_var,"F_PCODE_TEXT",1,"");
    ftextout("("+text_var+")                         ",9,28,0,1);

    ftextout("PCode Mode 7",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_PCODE7_STRING",1,"");
    ftextout(text_var+"   ",10,20,0,1);
    INPAapiResultText(text_var,"F_PCODE7_TEXT",1,"");
    ftextout("("+text_var+")                         ",10,28,0,1);

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
   
    LINE("","")
    {  
      if(anzahl_uw_saetze>=3)
      {
      
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",3);
      ftextout("Umweltbedingung Satz 3",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",3);
      realtostring(real_zahl,"8.0",text_var);   
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1); 
      zahl=1;
      while (zahl <= uw_bedingungen)
         {        
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,3,"");
          INPAapiResultText(text_zahl,f_uw_wert,3,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,3,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while 
        if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
          
       }     // end line
      }    // end if
      
     LINE("","")
       { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
        }    
}


// ********************************************
// *** FS set Screen  IS 3 Uweltbedingung 3 ***
// ********************************************
SCREEN s_islesenset_uw3()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"IS_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");
    INPAapiResultInt(fehler_ist,"SAETZE",0);
    fehler_ist=fehler_ist-1;
    inttostring(fehler_ist,text_var);
    ftextout("Infospeicher lesen: Gespeicherte Fehler:  "+text_var+"   <Shift> + <F9>: Zurück  <Shift> + <F10>: Ende ",1,0,0,0);
    
    
    inttostring(fehlercode,text_var);
    
    INPAapiJob(sgbd,"is_lesen_detail",text_var,"");        
    
    //INPAapiCheckJobStatus("OKAY");
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"F_HFK",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("Fehlerlogistikzähler",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"F_LZ",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
   

    ftextout("Fehler Status",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",11,20,0,1);   
    
    ftextout("Testbedingung",12,0,0,1);
    ftextout(":",12,19,0,1);
    INPAapiResultText(text_var,"F_READY_TEXT",1,"");
    ftextout(text_var+"                         ",12,20,0,1);   
  } //end line
   
    LINE("","")
    {  
      if(anzahl_uw_saetze>=3)
      {
      
      INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",3);
      ftextout("Umweltbedingung Satz 3",1,0,1,1);
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"F_UW_KM",3);
      realtostring(real_zahl,"8.0",text_var);   
      ftextout(text_var + " km",3,20,0,1);
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1); 
      zahl=1;
      while (zahl <= uw_bedingungen)
         {        
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,3,"");
          INPAapiResultText(text_zahl,f_uw_wert,3,"");
         //INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,3,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         //realtostring(text_zahl,"6.2",text_var);
         ftextout(text_zahl,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while 
        if (anzahl_uw_saetze>3) satz_tel_antwort=4;
        else satz_tel_antwort=anzahl_uw_saetze+1;
          
       }     // end line
      }    // end if
      
     LINE("","")
       { 
         INPAapiResultBinary("_TEL_ANTWORT",satz_tel_antwort);
         GetBinaryDataString(wert1_binary,wert1_antw_laenge);
         ftextout("SG Antwort FS Lesen Detail: ", 2,0,0,1);
         ftextout(wert1_binary  , 3,0,0,1);
        }    
}


// **************************
// **  Backup 1 FS lesen   **
// **************************

SCREEN s_backup_1()
{ bool rc;
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");
    //INPAapiCheckJobStatus("OKAY");  
            
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INP1apiResultText(rc,text_var,"F_VORHANDEN_TEXT",1,"");
    if (rc!=TRUE) text_var="Fehler ist vorhanden"; /* Workarround wg. Bug in SGBD V1.01 */
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",1,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
    ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);  
     } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);  
      ftextout("Umweltbedingung Satz 1",1,0,1,1);    
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",1);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1; 
      INPAapiResultInt(uw_anzahl,"UW_ANZ",1);
      
      while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,1,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,1,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
        
       } // end line       
      
   LINE("","")
   {
    dataausgabe(); 
    ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1);  
    } //end line        
}

// **************************
// **  Backup 2 FS lesen   **
// **************************

SCREEN s_backup_2()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",2,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",2,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",2);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",2,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",2,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",2,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);  
      ftextout("Umweltbedingung Satz 1",1,0,1,1);    
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",2);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
       zahl=1;
       
       INPAapiResultInt(uw_anzahl,"UW_ANZ",2);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,2,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,2);
         INPAapiResultText(einh_var,f_uw_einh,2,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
        
       } // end line       
       
    LINE("","")
    {
    dataausgabe(); 
    ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1);  
    } //end line        
}

// **************************
// **  Backup 3 FS lesen   **
// **************************

SCREEN s_backup_3()
{
   
   LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",3,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",3,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",3);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",3,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",3,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",3,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",3);  
      ftextout("Umweltbedingung Satz 1",1,0,1,1);    
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",3);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
       zahl=1;
       
       INPAapiResultInt(uw_anzahl,"UW_ANZ",3);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,3,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,3);
         INPAapiResultText(einh_var,f_uw_einh,3,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
        
       } // end line       
       
    LINE("","")
    {
    dataausgabe(); 
    ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1);  
    } //end line        
}

// **************************
// **  Backup 4 FS lesen   **
// **************************

SCREEN s_backup_4()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",4,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",4,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",4);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",4,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",4,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",4,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);  
      ftextout("Umweltbedingung Satz 1",1,0,1,1);    
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",4);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
       zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",4);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,4,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,4);
         INPAapiResultText(einh_var,f_uw_einh,4,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while        #
        
       } // end line  
       
    LINE("","")
   {
    dataausgabe(); 
    ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line        
}

// **************************
// **  Backup 5 FS lesen   **
// **************************

SCREEN s_backup_5()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",5,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",5,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",5);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",5,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",5,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",5,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",5);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",5);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,5,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,5);
         INPAapiResultText(einh_var,f_uw_einh,5,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 6 FS lesen   **
// **************************

SCREEN s_backup_6()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",6,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",6,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",6);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",6,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",6,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",6,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",6);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",6);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,6,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,6);
         INPAapiResultText(einh_var,f_uw_einh,6,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 7 FS lesen   **
// **************************

SCREEN s_backup_7()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",7,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",7,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",7);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",7,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",7,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",7,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",7);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",7);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,7,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,7);
         INPAapiResultText(einh_var,f_uw_einh,7,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 8 FS lesen   **
// **************************

SCREEN s_backup_8()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",8,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",8,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",8);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",8,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",8,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",8,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",8);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",8);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,8,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,8);
         INPAapiResultText(einh_var,f_uw_einh,8,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 9 FS lesen   **
// **************************

SCREEN s_backup_9()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",9,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",9);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",9,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",9);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",9);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",9,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",9,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",9,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",9);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",9);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",9);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,9,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,9);
         INPAapiResultText(einh_var,f_uw_einh,9,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 10 FS lesen  **
// **************************

SCREEN s_backup_10()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",10,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",10);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",10,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",10);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",10);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",10,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",10,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",10,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",10);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",10);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",10);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,10,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,10);
         INPAapiResultText(einh_var,f_uw_einh,10,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 11 FS lesen  **
// **************************

SCREEN s_backup_11()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",1,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",1,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",1);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",1,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",1,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",1,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",1);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",1);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",1);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,1,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,1);
         INPAapiResultText(einh_var,f_uw_einh,1,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 12 FS lesen  **
// **************************

SCREEN s_backup_12()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",2,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",2,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",2);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",2,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",2,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",2,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",2);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",2);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",2);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,2,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,2);
         INPAapiResultText(einh_var,f_uw_einh,2,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 13 FS lesen  **
// **************************

SCREEN s_backup_13()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",3,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",3,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",3);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",3,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",3,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",3,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",3);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",3);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",3);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,3,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,3);
         INPAapiResultText(einh_var,f_uw_einh,3,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 14 FS lesen  **
// **************************

SCREEN s_backup_14()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",4,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",4,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",4);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",4,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",4,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",4,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",4);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",4);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",4);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,4,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,4);
         INPAapiResultText(einh_var,f_uw_einh,4,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 15 FS lesen  **
// **************************

SCREEN s_backup_15()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",5,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",5,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",5);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",5,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",5,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",5,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",5);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",5);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",5);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,5,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,5);
         INPAapiResultText(einh_var,f_uw_einh,5,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 16 FS lesen  **
// **************************

SCREEN s_backup_16()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",6,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",6,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",6);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",6,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",6,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",6,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",6);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",6);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",6);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,6,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,6);
         INPAapiResultText(einh_var,f_uw_einh,6,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 17 FS lesen  **
// **************************

SCREEN s_backup_17()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",7,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",7,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",7);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",7,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",7,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",7,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",7);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",7);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",7);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,7,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,7);
         INPAapiResultText(einh_var,f_uw_einh,7,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Backup 18 FS lesen  **
// **************************

SCREEN s_backup_18()
{
   
  LINE("","")
    { 
     
    // Anzahl Fehler
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    inttostring(fehlercode,text_var);
    //ftextout(text_var,3,20,0,1);
               
    INPAapiResultText(text_var,"F_ORT_TEXT",8,"");
    ftextout(text_var,2,0,1,1);
    
    ftextout("Fehlercode",4,0,0,1);
    ftextout(":",4,19,0,1);
    INPAapiResultInt(int_zahl,"F_ORT_NR",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+" dez                     ",4,20,0,1);
         
    ftextout("Fehlerart",5,0,0,1);
    ftextout(":",5,19,0,1);
    INPAapiResultText(text_var,"F_SYMPTOM_TEXT",8,"");
    ftextout(text_var+"                         ",5,20,0,1);    

    ftextout("Fehlerhäufigkeit",6,0,0,1);
    ftextout(":",6,19,0,1);
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",8);
    inttostring(anzahl_uw_saetze,text_var);
    ftextout(text_var+"                         ",6,20,0,1);
      
    ftextout("CARB_TRIPS_DRIVING",7,0,0,1);
    ftextout(":",7,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_TRIPS_DRIVING",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",7,20,0,1);
    
    ftextout("CARB Fehler",8,0,0,1);
    ftextout(":",8,19,0,1);
    INPAapiResultText(text_var,"F_WARNUNG_TEXT",8,"");
    ftextout(text_var+"                         ",8,20,0,1);
    
    ftextout("Fehler Status",9,0,0,1);
    ftextout(":",9,19,0,1);
    INPAapiResultText(text_var,"F_VORHANDEN_TEXT",8,"");
    ftextout(text_var+"                         ",9,20,0,1);   
    
    ftextout("Ersatzfunktion",10,0,0,1);
    ftextout(":",10,19,0,1);
    INPAapiResultText(text_var,"F_ERSATZFUNKTION_TEXT",8,"");
    ftextout(text_var+"                         ",10,20,0,1);   
    
     ftextout("CARB_WARM_UP",11,0,0,1);
    ftextout(":",11,19,0,1);
    INPAapiResultInt(int_zahl,"CARB_ZAEHLER_WARM_UP",8);
    inttostring(int_zahl,text_var);
    ftextout(text_var+"                         ",11,20,0,1);   
  } //end line
    
    LINE("","")
    {     
      //INPAapiResultInt(uw_bedingungen,"F_UW_ANZ",1);    
      ftextout("Umweltbedingung Satz 1",1,0,1,1);  
      ftextout("Kilometerstand",3,0,0,1);
      ftextout(":",3,19,0,1);
      INPAapiResultAnalog(real_zahl,"KILOMETERSTAND",8);
      realtostring(real_zahl,"8.0",text_var);
      ftextout(text_var + " km",3,20,0,1);      
      ftextout("Text:",5,0,0,1);
      ftextout("Einheit:",5,40,0,1);
      ftextout("Wert:",5,50,0,1);
      zahl=1;
       
      INPAapiResultInt(uw_anzahl,"UW_ANZ",8);
       while (zahl <=uw_anzahl)
         {     
         inttostring(zahl,text_var);
         strcat(f_uw_text,"F_UW",text_var);
         strcat(f_uw_text,f_uw_text,"_TEXT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_wert,"F_UW",text_var);
         strcat(f_uw_wert,f_uw_wert,"_WERT");
         
         inttostring(zahl,text_var);
         strcat(f_uw_einh,"F_UW",text_var);
         strcat(f_uw_einh,f_uw_einh,"_EINH");
             
         INPAapiResultText(text_var,f_uw_text,8,"");
         INPAapiResultAnalog(real_zahl,f_uw_wert,8);
         INPAapiResultText(einh_var,f_uw_einh,8,"");
        
         ftextout(text_var,5+zahl,0,0,1);
         ftextout(einh_var,5+zahl,40,0,1);
         realtostring(real_zahl,"6.2",text_var);
         ftextout(text_var,5+zahl,50,0,1);
         zahl=zahl+1;
        }   // end while
       
       } // end line  
       
   LINE("","")
   {
    dataausgabe(); 
   ftextout("< Shift > + < F9 >  Zurück"                           ,6,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,6,35,0,1); 
    } //end line                 
}

// **************************
// **  Signalstatus lesen   **
// **************************
SCREEN s_sigstati()
{ int row_miss_compense;

  row_miss_compense=0;
       
  LINE("","")
    { 
     ftextout("Sicherungsfunktionen aktiv",1,0,1,1);
     
     INPAapiJob(sgbd,"STATUS_SIGNAL_0","","");
     //INPAapiCheckJobStatus("OKAY");
         
     INPAapiResultText(text_var,"STAT_SIGNAL_ABTRIEBSDREHZAHL_TEXT",1,"");
     ftextout("Abtriebsdrehzahl  ",4,0,0,0);
     ftextout(":  ",4,35,0,0);
     ftextout(text_var+"                              ",4,40,0,0);
     
     if (ESchaltung==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_PARKSPERRENSENSOR_TEXT",1,"");
       ftextout("Positionssensor  ",5,0,0,0);
       ftextout(":  ",5,35,0,0);
       ftextout(text_var+"                              ",5,40,0,0);
     }
     else
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_POSITIONSSENOR_TEXT",1,"");
       ftextout("Positionssensor  ",5,0,0,0);
       ftextout(":  ",5,35,0,0);
       ftextout(text_var+"                              ",5,40,0,0);
     }

     INPAapiResultText(text_var,"STAT_SIGNAL_TURNBINENDREHZAHL_TEXT",1,"");
     ftextout("Turbinendrehzahl  ",6,0,0,0);
     ftextout(":  ",6,35,0,0);
     ftextout(text_var+"                              ",6,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_SUBSTRATTEMPERATUR_TEXT",1,"");
     ftextout("Substrattemperatur  ",7,0,0,0);
     ftextout(":  ",7,35,0,0);
     ftextout(text_var+"                              ",7,40,0,0);
    
     INPAapiResultText(text_var,"STAT_SIGNAL_GETRIEBEOELTEMPERATUR_TEXT",1,"");
     ftextout("Getriebeöltemperatur  ",8,0,0,0);
     ftextout(":  ",8,35,0,0);
     ftextout(text_var+"                              ",8,40,0,0);
    
     INPAapiJob(sgbd,"STATUS_SIGNAL_1","","");
     INPAapiResultText(text_var,"STAT_SIGNAL_MOMENT1_TEXT",1,"");
     ftextout("Momentenschnittstelle  ",9,0,0,0);
     ftextout(":  ",9,35,0,0);
     ftextout(text_var+"                              ",9,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_DROSSELKLAPPE_TEXT",1,"");
     ftextout("Drosselklappe  ",10,0,0,0);
     ftextout(":  ",10,35,0,0);
     ftextout(text_var+"                              ",10,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_MOTORDREHZAHL_TEXT",1,"");
     ftextout("Motordrehzahl  ",11,0,0,0);
     ftextout(":  ",11,35,0,0);
     ftextout(text_var+"                              ",11,40,0,0);
     
     if (ESchaltung==1)
     { 
       INPAapiResultText(text_var,"STAT_SIGNAL_PARKSPERRENANFORDERUNG_TEXT",1,"");
       ftextout("Parksperrenanforderung  ",12,0,0,0);
       ftextout(":  ",12,35,0,0);
       ftextout(text_var+"                              ",12,40,0,0);
     }
     else
       row_miss_compense=row_miss_compense+1;
     
     INPAapiJob(sgbd,"STATUS_SIGNAL_2","","");
     INPAapiResultText(text_var,"STAT_SIGNAL_BREMSSIGNAL_TEXT",1,"");
     ftextout("Bremssignal  ",13-row_miss_compense,0,0,0);
     ftextout(":  ",13-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",13-row_miss_compense,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_DREHRICHTUNG_TEXT",1,"");
     ftextout("Drehrichtung  ",14-row_miss_compense,0,0,0);
     ftextout(":  ",14-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",14-row_miss_compense,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_HL_TEXT",1,"");
     ftextout("Radgeschwindigkeit HL  ",15-row_miss_compense,0,0,0);
     ftextout(":  ",15-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",15-row_miss_compense,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_HR_TEXT",1,"");
     ftextout("Radgeschwindigkeit HR  ",16-row_miss_compense,0,0,0);
     ftextout(":  ",16-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",16-row_miss_compense,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_VL_TEXT",1,"");
     ftextout("Radgeschwindigkeit VL  ",17-row_miss_compense,0,0,0);
     ftextout(":  ",17-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",17-row_miss_compense,40,0,0);
     
     INPAapiResultText(text_var,"STAT_SIGNAL_RADGESCHWINDIGKEIT_VR_TEXT",1,"");
     ftextout("Radgeschwindigkeit VR  ",18-row_miss_compense,0,0,0);
     ftextout(":  ",18-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",18-row_miss_compense,40,0,0);
     
     INPAapiJob(sgbd,"STATUS_SIGNAL_3","","");
     INPAapiResultText(text_var,"STAT_SIGNAL_KL15_TEXT",1,"");
     ftextout("Kl15 CAN Signal  ",19-row_miss_compense,0,0,0);
     ftextout(":  ",19-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",19-row_miss_compense,40,0,0);
     
     if (ESchaltung==1)
     { INPAapiResultText(text_var,"STAT_SIGNAL_POS_CAN_TEXT",1,"");
       ftextout("GWS Positionsinfo CAN Signal  ",20-row_miss_compense,0,0,0);
       ftextout(":  ",20-row_miss_compense,35,0,0);
       ftextout(text_var+"                              ",20-row_miss_compense,40,0,0);
     
       INPAapiResultText(text_var,"STAT_SIGNAL_S_TASTER_TEXT",1,"");
       ftextout("GWS S-Taster  ",21-row_miss_compense,0,0,0);
       ftextout(":  ",21-row_miss_compense,35,0,0);
       ftextout(text_var+"                              ",21-row_miss_compense,40,0,0);
     }
     else
       row_miss_compense=row_miss_compense+2;

     if (Fzg_E65==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_FAHRERSITZ_TEXT",1,"");
       ftextout("Fahrersitz  ",22-row_miss_compense,0,0,0);
       ftextout(":  ",22-row_miss_compense,35,0,0);
       ftextout(text_var+"                              ",22-row_miss_compense,40,0,0);
     }
     else
       row_miss_compense=row_miss_compense+1;
     
     INPAapiResultText(text_var,"STAT_SIGNAL_FAHRERTUER_TEXT",1,"");
     ftextout("Fahrertür  ",23-row_miss_compense,0,0,0);
     ftextout(":  ",23-row_miss_compense,35,0,0);
     ftextout(text_var+"                              ",23-row_miss_compense,40,0,0);
     
     if (ESchaltung==1)
     {
       INPAapiResultText(text_var,"STAT_SIGNAL_TIP_TASTER_TEXT",1,"");
       ftextout("GWS Tip+/Tip- Taster  ",24-row_miss_compense,0,0,0);
       ftextout(":  ",24-row_miss_compense,35,0,0);
       ftextout(text_var+"                              ",24-row_miss_compense,40,0,0);
     
       INPAapiResultText(text_var,"STAT_SIGNAL_POS_SERIELL_TEXT",1,"");
       ftextout("GWS Posinfo LIN Signal  ",25-row_miss_compense,0,0,0);
       ftextout(":  ",25-row_miss_compense,35,0,0);
       ftextout(text_var+"                              ",25-row_miss_compense,40,0,0);
     
       INPAapiResultText(text_var,"STAT_SIGNAL_SCHLUESSEL_STECKT_TEXT",1,"");
       ftextout(":  ",26-row_miss_compense,35,0,0);
       ftextout("Schlüssel steckt  ",26-row_miss_compense,0,0,0);
       ftextout(text_var+"                              ",26-row_miss_compense,40,0,0);
     }
     else
       row_miss_compense=row_miss_compense+3;
        
     ftextout("< Shift > + < F9 >  Zurück"                           ,29,0,0,1);    
     ftextout("< Shift > + < F10 >  Ende"                            ,29,35,0,1); 
     }
    
    }

// **************************
// ** Timeoutüberwachung   **
// **************************

SCREEN s_timeout()
{
       
  LINE("","")
    { 
     ftextout("Timeoutüberwachung aktiv",1,0,1,1);
     
     INPAapiJob(sgbd,"STATUS_TIMEOUTDIAGNOSE","","");
     
     INPAapiResultText(text_var,"STAT_KLEMMENSTATUS_TEXT",1,"");
     ftextout("Klemmenstatus CAS ",3,0,0,0);
     ftextout(":",3,45,0,0);
     ftextout(text_var+"                              ",3,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_ZV_KLAPPENZUSTAND_TEXT",1,"");
     ftextout("ZV_Klappenzustand CAS ",4,0,0,0);
     ftextout(":",4,45,0,0);
     ftextout(text_var+"                              ",4,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT1_TEXT",1,"");
     ftextout("Drehmoment1 DME ",5,0,0,0);
     ftextout(":",5,45,0,0);
     ftextout(text_var+"                              ",5,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT2_TEXT",1,"");
     ftextout("Drehmoment2 DME ",6,0,0,0);
     ftextout(":",6,45,0,0);
     ftextout(text_var+"                              ",6,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_DREHMOMENT3_TEXT",1,"");
     ftextout("Drehmoment3 DME ",7,0,0,0);
     ftextout(":",7,45,0,0);
     ftextout(text_var+"                              ",7,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_MOTORDATEN_TEXT",1,"");
     ftextout("Motordaten DME ",8,0,0,0);
     ftextout(":",8,45,0,0);
     ftextout(text_var+"                              ",8,50,0,0); 

     INPAapiResultText(text_var,"STAT_REGELGESCHWINDIGKEIT_STUEFENTEMPOMAT_TEXT",1,"");
     ftextout("Regelgeschwindigkeit Stufentempomat DME ",9,0,0,0);
     ftextout(":",9,45,0,0);
     ftextout(text_var+"                              ",9,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_RADGESCHWINDIGKEIT_TEXT",1,"");
     ftextout("Radgeschwindigkeit DSC ",10,0,0,0);
     ftextout(":",10,45,0,0);
     ftextout(text_var+"                              ",10,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_STATUS_DSC_TEXT",1,"");
     ftextout("Status DSC  ",11,0,0,0);
     ftextout(":",11,45,0,0);
     ftextout(text_var+"                              ",11,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_GECHWINDIGKEIT_TEXT",1,"");
     ftextout("Geschwindigkeit DSC  ",12,0,0,0);
     ftextout(":",12,45,0,0);
     ftextout(text_var+"                              ",12,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_RADTOLERANZABGLEICH_TEXT",1,"");
     ftextout("Radtoleranzabgleich DSC ",13,0,0,0);
     ftextout(":",13,45,0,0);
     ftextout(text_var+"                              ",13,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_AUSSENTEMPERATUR_RELATIVZEIT_TEXT",1,"");
     ftextout("Aussentemperatur/Relativzeit  ",14,0,0,0);
     ftextout(":",14,45,0,0);
     ftextout(text_var+"                              ",14,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_DREHMOMENTANFORDERUNG_ACC_TEXT",1,"");
     ftextout("Drehmomentanforderung ACC  ",15,0,0,0);
     ftextout(":",15,45,0,0);
     ftextout(text_var+"                              ",15,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_VERZOEGERUNGSANFORDERUNG_EMF_TEXT",1," ");
     ftextout("Verzögerungsanforderung EMF  ",16,0,0,0);
     ftextout(":",16,45,0,0);
     ftextout(text_var+"                              ",16,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KILOMETERSTAND_TEXT",1," ");
     ftextout("Kilometerstand Kombi  ",17,0,0,0);
     ftextout(":",17,45,0,0);
     ftextout(text_var+"                              ",17,50,0,0);
     
     INPAapiResultText(text_var,"STAT_SITZBELEGUNG_GURTKONTAKTE_TEXT",1," ");
     ftextout("Sitzbelegung Gurtkontakte SSFA  ",18,0,0,0);
     ftextout(":",18,45,0,0);
     ftextout(text_var+"                              ",18,50,0,0);
     
     INPAapiResultText(text_var,"STAT_BEDIENUNG_GETRIEBEWAHLSCHALTER_TEXT",1," ");
     ftextout("Bedienung Getriebewahlschalter GWS ",19,0,0,0);
     ftextout(":",19,45,0,0);
     ftextout(text_var+"                              ",19,50,0,0);
     
     INPAapiResultText(text_var,"STAT_POWERMANAGEMENT_BATTERIESPANNUNG_TEXT",1," ");
     ftextout("Powermanagement Batteriespannung PM  ",20,0,0,0);
     ftextout(":",20,45,0,0);
     ftextout(text_var+"                              ",20,50,0,0);
     
     INPAapiResultText(text_var,"STAT_ANHAENGERMODUL_TEXT",1," ");
     ftextout("Anhaengermodul AHM  ",21,0,0,0);
     ftextout(":",21,45,0,0);
     ftextout(text_var+"                              ",21,50,0,0);
     
     ftextout("< F1 >  Alle Lernfunktionen zurücksetzen"             ,26,0,0,1);    
     ftextout("< Shift > + < F9 >  Zurück"                           ,28,0,0,1);    
     ftextout("< Shift > + < F10 >  Ende"                            ,28,35,0,1);  
     
    }

}


// **************************
// **  Standardabsicherung **
// **************************

SCREEN s_sa()
{
       
  LINE("","")
    { 
     ftextout("Status Standardabsicherung (CS/Alive Fehler)",1,0,1,1);
     
     INPAapiJob(sgbd,"STATUS_STANDARDABSICHERUNG","","");
     
     INPAapiResultText(text_var,"STAT_SA_ACC_TEXT",1,"");
     ftextout("Drehmomentanforderung ACC ",8,0,0,0);
     ftextout(":",8,45,0,0);
     ftextout(text_var+"                              ",8,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_SA_CAS_TEXT",1,"");
     ftextout("Klemmenstatus CAS ",4,0,0,0);
     ftextout(":",4,45,0,0);
     ftextout(text_var+"                              ",4,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_SA_DME1_TEXT",1,"");
     ftextout("Drehmoment1 DME ",5,0,0,0);
     ftextout(":",5,45,0,0);
     ftextout(text_var+"                              ",5,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_SA_DME2_TEXT",1,"");
     ftextout("Drehmoment2 DME ",6,0,0,0);
     ftextout(":",6,45,0,0);
     ftextout(text_var+"                              ",6,50,0,0); 
     
     INPAapiResultText(text_var,"STAT_SA_DME3_TEXT",1,"");
     ftextout("Drehmoment3 DME ",7,0,0,0);
     ftextout(":",7,45,0,0);
     ftextout(text_var+"                              ",7,50,0,0); 
          
     ftextout("< Shift > + < F9 >  Zurück"                           ,28,0,0,1);    
     ftextout("< Shift > + < F10 >  Ende"                            ,28,35,0,1);  
    }

}

// **************************
// **   Ersatzfunkionen    **
// **************************

SCREEN s_ersatz()
{
       
  LINE("","")
    { 
     ftextout("Ersatzfunktionen aktiv",1,0,1,1);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_3","","");
     
     INPAapiResultText(text_var,"STAT_KMN_GRAUS_TEXT",1,"");
     ftextout("Mechanischer Notlauf  ",3,0,0,0);
     ftextout(":",3,45,0,0);
     ftextout(text_var+"                              ",3,50,0,0);
    
     INPAapiResultText(text_var,"STAT_KMN_MM_SLIM_TEXT",1,"");
     ftextout("Anforderung Begrenzung Anfahrmoment  ",4,0,0,0);
      ftextout(":",4,45,0,0);
     ftextout(text_var+"                              ",4,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_PMAX_TEXT",1,"");
     ftextout("Max. Sytemdruck  ",5,0,0,0);
      ftextout(":",5,45,0,0);
     ftextout(text_var+"                              ",5,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_FANZ_TEXT",1,"");
     ftextout("Notlaufflag auf CAN  ",6,0,0,0);
      ftextout(":",6,45,0,0);
     ftextout(text_var+"                              ",6,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_MV3AUS_TEXT",1,"");
     ftextout("Deaktivieren MV3 Lowsidetreiber  ",7,0,0,0);
      ftextout(":",7,45,0,0);
     ftextout(text_var+"                              ",7,50,0,0);
    
     INPAapiResultText(text_var,"STAT_KMN_MV4AUS_TEXT",1,"");
     ftextout("Deaktivieren MV4 Lowsidetreiber  ",8,0,0,0);
      ftextout(":",8,45,0,0);
     ftextout(text_var+"                              ",8,50,0,0);
       
     INPAapiResultText(text_var,"STAT_KMN_LOWSIDE_OFF_TEXT",1,"");
     ftextout("Lowside FETs aus ",9,0,0,0);
      ftextout(":",9,45,0,0);
     ftextout(text_var,9,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_SBCAUS_TEXT",1,"");
     ftextout("Deaktivieren der NIC-Funktion  ",10,0,0,0);
      ftextout(":",10,45,0,0);
     ftextout(text_var+"                              ",10,50,0,0);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_2","","");
     
     INPAapiResultText(text_var,"STAT_KMN_WKAUF_TEXT",1,"");
     ftextout("Wandlerkupplung öffnen  ",11,0,0,0);
     ftextout(":",11,45,0,0);
     ftextout(text_var+"                              ",11,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_AFIX_TEXT",1,"");
     ftextout("Festes Schaltprogramm (Kein S, M, Steptronic-Programm)",12,0,0,0);
     ftextout(":",12,45,0,0);
     ftextout(text_var+"                              ",12,50,0,0);
      
     INPAapiResultText(text_var,"STAT_KMN_NRAERS_TEXT",1,"");
     ftextout("Radgeschwindigkeit aus Abtriebsdrehzahl  ",13,0,0,0);
     ftextout(":",13,45,0,0);
     ftextout(text_var+"                              ",13,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_NABERS_TEXT",1,"");
     ftextout("Abtriebsdrehzahl aus Radgeschwindigkeiten  ",14,0,0,0);
     ftextout(":",14,45,0,0);
     ftextout(text_var+"                              ",14,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_PNAUS_TEXT",1,"");
     ftextout("Shiftlock Funktion AUS",15,0,0,0);
     ftextout(":",15,45,0,0);
     ftextout(text_var+"                              ",15,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_GFIX_TEXT",1,"");
     ftextout("aktuellen Gang halten  ",16,0,0,0);
     ftextout(":",16,45,0,0);     
     ftextout(text_var+"                              ",16,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_G5FIX_TEXT",1,"");
     ftextout("Schalten in den 5. Gang und Ganghalten  ",17,0,0,0);
     ftextout(":",17,45,0,0);
     ftextout(text_var+"                              ",17,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_G4FIX_TEXT",1,"");
     ftextout("Schalten in den 4. Gang und Ganghalten  ",18,0,0,0);
     ftextout(":",18,45,0,0);
     ftextout(text_var+"                              ",18,50,0,0);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_1","","");
     
     //INPAapiResultText(text_var,"KMN_G13",1,"");
     //ftextout("nicht realisiert:  ",19,0,0,0);
     //ftextout(text_var,19,40,0,0);
     
     //INPAapiResultText(text_var,"KMN_G46",1,"");
     //ftextout("nicht realisiert:  ",20,0,0,0);
     //ftextout(text_var,20,40,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_ENPG5_TEXT",1,"");
     ftextout("Elektrischer Notlauf 5. Gang  ",19,0,0,0);
     ftextout(":",19,45,0,0);
     ftextout(text_var+"                              ",19,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_ENPG35_TEXT",1,"");
     ftextout("Elektrischer Notlauf 5. Gang nachfolgend 3. Gang  ",20,0,0,0);
      ftextout(":",20,45,0,0);
     ftextout(text_var+"                              ",20,50,0,0);
     
     //INPAapiResultText(text_var,"KMN_RNGERS",1,"");
     //ftextout("nicht realisiert:  ",23,0,0,0);
     //ftextout(text_var,23,40,0,0);
     
     //INPAapiResultText(text_var,"KMN_GFIXLOW",1,"");
     //ftextout("nicht realisiert:  ",24,0,0,0);
     //ftextout(text_var,24,40,0,0);
     
     //INPAapiResultText(text_var,"STAT_KMN_GRAUSSON_TEXT",1,"");
     //ftextout("GWS Posinfo LIN Signal  ",21,0,0,0);
     // ftextout(":",21,45,0,0);
     //ftextout(text_var+"                              ",21,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_ADAPT_AUS_TEXT",1,"");
     ftextout("Adaptionen aus ",21,0,0,0);
     ftextout(":",21,45,0,0);
     ftextout(text_var+"                              ",21,50,0,0);
     
     INPAapiJob(sgbd,"STATUS_ERSATZPROGRAMME_0","","");
     //INPAapiCheckJobStatus("OKAY");
     
     INPAapiResultText(text_var,"STAT_KMN_G3FIX_TEXT",1,"");
     ftextout("Schalten in den 3. Gang und Ganghalten  ",22,0,0,0);
     ftextout(":",22,45,0,0);
     ftextout(text_var+"                              ",22,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_KEIN_R_TEXT",1,"");
     ftextout("Kein Rueckwaertsgang moeglich  ",23,0,0,0);
     ftextout(":",23,45,0,0);
     ftextout(text_var+"                              ",23,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_BENPG3_TEXT",1,"");
     ftextout("Bedingtes Schalten in 3. Gang  ",24,0,0,0);
     ftextout(":",24,45,0,0);
     ftextout(text_var+"                              ",24,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_BENPG4_TEXT",1,"");
     ftextout("Bedingtes Schalten in 4. Gang  ",25,0,0,0);
     ftextout(":",25,45,0,0);
     ftextout(text_var+"                              ",25,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_BENPG1_TEXT",1,"");
     ftextout("Bedingtes Schalten in 1. Gang  ",26,0,0,0);
     ftextout(":",26,45,0,0);
     ftextout(text_var+"                              ",26,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_BENPG2_TEXT",1,"");
     ftextout("Bedingtes Schalten in 2. Gang                     ",27,0,0,0);
     ftextout(":",27,45,0,0);
     ftextout(text_var+"                              ",27,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_KEIND_TEXT",1,"");
     ftextout("Fahrerwunsch D unterdrücken                     ",28,0,0,0);
     ftextout(":",28,45,0,0);
     ftextout(text_var+"                              ",28,50,0,0);
     
     INPAapiResultText(text_var,"STAT_KMN_HOLDP_TEXT",1,"");
     ftextout("Position P halten                     ",29,0,0,0);
     ftextout(":",29,45,0,0);
     ftextout(text_var+"                              ",29,50,0,0);
         
    ftextout("< Shift > + < F9 >  Zurück"                           ,28,65,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,29,65,0,1); 
    } 
    
    }



// *********************************
// *** Statusscreen E-Schaltung  ***
// *********************************
SCREEN s_status_es()
{
  INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
  INPAapiResultText(text_var,"JOB_STATUS",1,"");
  
  ftextout("Messen",1,0,1,0);
  ftextout("",2,19,0,0);
   enable1=0;
  LINE("","")
    {
    ftextout("< F1 >  Magnetventile, EDS"          ,  3,  0, 0, 1);
    ftextout("< F2 >  Schaltung"                   ,  5,  0, 0, 1);
    ftextout("< F3 >  Drehzahlen/Geschwindigkeit"  ,  7,  0, 0, 1);
    ftextout("< F4 >  Motor"                       ,  9,  0, 0, 1);
    ftextout("< F5 >  Getriebe"                    , 11,  0, 0, 1);
    ftextout("< F6 >  E-Schaltung"                 , 13,  0, 0, 1);
    ftextout("< F7 >  Temperaturkollektiv"         , 15,  0, 0, 1);
    ftextout("< F8 >  Benutzerdefinierte Auswahl"  , 17,  0, 0, 1);
    ftextout("<Shift> + < F9>  Zurück"                           ,26,0,0,1);    
    ftextout("<Shift> + < F10>  Ende"                            ,26,35,0,1);  
    }
}

// *********************************
// *** Statusscreen M-Schaltung  ***
// *********************************
SCREEN s_status_ms()
{
  INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
  INPAapiResultText(text_var,"JOB_STATUS",1,"");
  
  ftextout("Messen",1,0,1,0);
  ftextout("",2,19,0,0);
   enable1=0;
  LINE("","")
    {
    ftextout("< F1 >  Magnetventile, EDS"          ,  3,  0, 0, 1);
    ftextout("< F2 >  Schaltung"                   ,  5,  0, 0, 1);
    ftextout("< F3 >  Drehzahlen/Geschwindigkeit"  ,  7,  0, 0, 1);
    ftextout("< F4 >  Motor"                       ,  9,  0, 0, 1);
    ftextout("< F5 >  Getriebe"                    , 11,  0, 0, 1);
    ftextout("< F6 >  Temperaturkollektiv"         , 13,  0, 0, 1);
    ftextout("< F7 >  Benutzerdefinierte Auswahl"  , 15,  0, 0, 1);
    ftextout("<Shift> + < F9>  Zurück"                           ,26,0,0,1);    
    ftextout("<Shift> + < F10>  Ende"                            ,26,35,0,1);  
    }
}



// ***************************
// *** Drehzahl-Screen     ***
// ***************************
SCREEN s_drehzahlen()
{
  ftextout("Drehzahlen/Geschwindigkeit ",1,0,1,0);
  ftextout("",2,18,0,0);
      
  LINE ( "Motordrehzahl ", "")
  {
    // Motordrehzahl
    INPAapiJob(sgbd,"STATUS_MOTORDREHZAHL","","");
    ftextout("Motordrehzahl ",1,0,0,1);
    ftextout("[1/min]   (0..8160)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORDREHZAHL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 8160.0, 0.0, 8160.0,"");
  }

  LINE("Turbinendrehzahl, Abtriebsdrehzahl","")
  {
    // Turbinendrehzahl
    INPAapiJob(sgbd,"STATUS_TURBINENDREHZAHL","","");
    ftextout("Turbinendrehzahl ",1,0,0,1);
    ftextout("[1/min]   (0..8160)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_TURBINENDREHZAHL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 8160.0, 0.0, 8160.0,"");
        
    // Abtriebsdrehzahl
    INPAapiJob(sgbd,"STATUS_ABTRIEBSDREHZAHL","","");
    ftextout("Abtriebsdrehzahl",1,43,0,1);
    ftextout("[1/min]   (0..8160)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_ABTRIEBSDREHZAHL_WERT",1);
    analogout(real_zahl,3,43, 0.0, 8160.0, 0.0, 8160.0,"");
  }
    
  LINE("Mittlere Radgeschwindigkeit","")
  {    
    // Raddrehzahl VL
    INPAapiJob(sgbd,"STATUS_RADGESCHWINDIGKEITEN","","");
    ftextout("Mittlere Radgeschwindigkeit",1,0,0,1);
    ftextout("[km/h]   (0..510)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_RADGESCHWINDIGKEITEN_WERT",1);
    analogout(real_zahl,3,0, 0.0, 510.0, 0.0, 510.0,"");      
  }
}

// ***************************
// *** Getriebe-Screen     ***
// ***************************
SCREEN s_getriebe()
{
  ftextout("Getriebe ",1,0,1,0);
  ftextout("",2,14,0,0);
    
  LINE ( "Drehzahlen ", "")
  {
    // Turbinendrehzahl
    INPAapiJob(sgbd,"STATUS_TURBINENDREHZAHL","","");
    ftextout("Turbinendrehzahl",1,0,0,1);
    ftextout("[1/min]   (0..8160)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_TURBINENDREHZAHL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 8160.0, 0.0, 8160.0,"");
       
    // Abtriebsdrehzahl
    INPAapiJob(sgbd,"STATUS_ABTRIEBSDREHZAHL","","");
    ftextout("Abtriebsdrehzahl",1,43,0,1);
    ftextout("[1/min]   (0..8160)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_ABTRIEBSDREHZAHL_WERT",1);
    analogout(real_zahl,3,43, 0.0, 8160.0, 0.0, 8160.0,"");
  }

  LINE("Getriebeöltemperatur","")
  {
    // Getriebetemperatur
    INPAapiJob(sgbd,"STATUS_GETRIEBETEMPERATUR","","");
    ftextout("Getriebeöltemperatur",1,0,0,1); 
    ftextout("[Grad C]   (-40..+215)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_GETRIEBETEMPERATUR_WERT",1);
    analogout(real_zahl,3,0, -40.0, 215.0, -40.0, 215.0,"");   
  }

  LINE("Versorgungsspannung","")
  {
    INPAapiJob(sgbd,"STATUS_BATTERIESPANNUNG","","");
    ftextout("Batteriespannung U_BATT",1,0,0,1);
    ftextout("[V]   (0..+20.4)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_BATTERIESPANNUNG_WERT",1);
    analogout(real_zahl,3,0, 0.0, 20.4, 0.0, 20.4,"");   
    
    INPAapiJob(sgbd,"STATUS_DR_MV_SPANNUNG","","");
    ftextout("Versorgungsspannung DR/MV",1,43,0,1);
    ftextout("[V]   (0..+20.4)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_DR_MV_SPANNUNG_WERT",1);
    analogout(real_zahl,3,43, 0.0, 20.4, 0.0, 20.4,"");   
  }
    
  LINE("Inputpegel","")
  {
     INPAapiJob(sgbd,"STATUS_INPUTPEGEL","","");

     ftextout("Pegel an L1 Pin",1,0,0,1);   
     INPAapiResultText(einh_var,"STAT_PEGEL_L1_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,1,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L2 Pin",1,20,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L2_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,20,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L3 Pin",1,40,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L3_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,40,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L4 Pin",1,60,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L4_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,60,"1 (LOW)","0 (HIGH)");

       ftextout("Pegel Tip+ Pin",6,0,0,1);   
       INPAapiResultText(einh_var,"STAT_PEGEL_TIP_PLUS_TEXT",1,""); 
       if (einh_var=="LOW") tmpBool=1;
       else tmpBool=0;   
       digitalout(tmpBool,8,1,"1 (LOW)","0 (HIGH)");
     
       ftextout("Pegel Tip- Pin",6,20,0,1);
       INPAapiResultText(einh_var,"STAT_PEGEL_TIP_MINUS_TEXT",1,""); 
       if (einh_var=="LOW") tmpBool=1;
       else tmpBool=0;   
       digitalout(tmpBool,8,20,"1 (LOW)","0 (HIGH)");
     
     if (MSchaltung==1)
     {
       ftextout("Pegel M-Gasse",6,40,0,1);
       INPAapiResultText(einh_var,"STAT_PEGEL_M_GASSE_TEXT",1,""); 
       if (einh_var=="LOW") tmpBool=1;
       else tmpBool=0;   
       digitalout(tmpBool,8,40,"1 (LOW)","0 (HIGH)");
     }
  }
}


// ***************************
// ***Auswahl-Screen       ***
// ***************************
SCREEN s_auswahl()
{    
  LINE("CAS, ","")
  {
    
    ftextout("CAS  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" KL15 CAN Signal",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_KL_15_CAN_TEXT",1,""); 
    if (einh_var=="AUS") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"EIN  ","AUS  ");

    ftextout(" Weckleitung",3,25,0,1);
    INPAapiResultText(einh_var,"STAT_WECKLEITUNG_TEXT",1,""); 
    if (einh_var=="LOW") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,25,"HIGH  ","LOW  ");
     
    ftextout(" Schlüssel steckt CAN Signal",3,50,0,1);
    INPAapiResultText(einh_var,"STAT_SCHLUESSEL_TEXT",1,""); 
    if (einh_var=="STECKT NICHT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,50,"STECKT               ","STECKT NICHT    ");
   }
     
   LINE("Sitz/Tür, ","")
   {  
     ftextout("Sitz / Tür  ",1,0,1,0);
     INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
     ftextout(" Tür CAN Signal",3,0,0,1);
     INPAapiResultText(einh_var,"STAT_TUER_TEXT",1,""); 
     if (einh_var=="ZU") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,5,0,"GESCHLOSSEN     ","OFFEN                        ");
     
     INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
     ftextout(" Sitz CAN Signal",3,25,0,1);
     INPAapiResultText(einh_var,"STAT_SITZ_TEXT",1,""); 
     if (einh_var=="NICHT BELEGT") tmpBool=0;
     else tmpBool=1;   
     digitalout(tmpBool,5,25,"BELEGT             ","NICHT BELEGT  ");  
   }
     
   LINE("AUTO-N/-P, ","")
   {    
     ftextout("Auto-N / Auto-P  ",1,0,1,0);
     INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
     ftextout(" Auto-N",3,0,0,1);
     INPAapiResultText(einh_var,"STAT_AUTO_N_TEXT",1,""); 
     if (einh_var=="NICHT AKTIV") tmpBool=0;
     else tmpBool=1;   
     digitalout(tmpBool,5,0,"AKTIV                   ","NICHT AKTIV  ");
     
     INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
     ftextout(" Auto-P",3,25,0,1);
     INPAapiResultText(einh_var,"STAT_AUTO_P_TEXT",1,""); 
     if (einh_var=="NICHT AKTIV") tmpBool=0;
     else tmpBool=1;   
     digitalout(tmpBool,5,25,"AKTIV                   ","NICHT AKTIV  ");
     
     INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
     ftextout("N-Haltephase",3,50,0,1);
     INPAapiResultText(einh_var,"STAT_N_HALTEPHASE_TEXT",1,""); 
     if (einh_var=="NICHT AKTIV") tmpBool=0;
     else tmpBool=1;   
     digitalout(tmpBool,5,50,"AKTIV                   ","NICHT AKTIV  ");
   }

   LINE ( "Turbinendrehzahl/Abtriebsdrehzahl ", "")
   {
     // Turbinendrehzahl
     INPAapiJob(sgbd,"STATUS_TURBINENDREHZAHL","","");
     ftextout("Turbinendrehzahl",1,0,0,1);
     ftextout("[1/min]   (0..8160)",2,0,0,1);
     INPAapiResultAnalog(real_zahl,"STAT_TURBINENDREHZAHL_WERT",1);
     analogout(real_zahl,3,0, 0.0, 8160.0, 0.0, 8160.0,"");
       
     // Abtriebsdrehzahl
     INPAapiJob(sgbd,"STATUS_ABTRIEBSDREHZAHL","","");
     ftextout("Abtriebsdrehzahl",1,43,0,1);
     ftextout("[1/min]   (0..8160)",2,43,0,1);
     INPAapiResultAnalog(real_zahl,"STAT_ABTRIEBSDREHZAHL_WERT",1);
     analogout(real_zahl,3,43, 0.0, 8160.0, 0.0, 8160.0,"");
   }

  LINE("Getriebeöltemperatur","")
  {
    // Getriebetemperatur
    INPAapiJob(sgbd,"STATUS_GETRIEBETEMPERATUR","","");
    ftextout("Getriebeöltemperatur",1,0,0,1); 
    ftextout("[Grad C]   (-40..+215)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_GETRIEBETEMPERATUR_WERT",1);
    analogout(real_zahl,3,0, -40.0, 215.0, -40.0, 215.0,"");   
  }

  LINE("Versorgungsspannung","")
  {
    INPAapiJob(sgbd,"STATUS_BATTERIESPANNUNG","","");
    ftextout("Batteriespannung U_BATT",1,0,0,1);
    ftextout("[V]   (0..+20.4)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_BATTERIESPANNUNG_WERT",1);
    analogout(real_zahl,3,0, 0.0, 20.4, 0.0, 20.4,"");   
    
    INPAapiJob(sgbd,"STATUS_DR_MV_SPANNUNG","","");
    ftextout("Versorgungsspannung DR/MV",1,43,0,1);
    ftextout("[V]   (0..+20.4)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_DR_MV_SPANNUNG_WERT",1);
    analogout(real_zahl,3,43, 0.0, 20.4, 0.0, 20.4,"");   
  }
    
  LINE("Inputpegel L-Leitung","")
  {
     INPAapiJob(sgbd,"STATUS_INPUTPEGEL","","");

     ftextout("Pegel an L1 Pin",1,0,0,1);   
     INPAapiResultText(einh_var,"STAT_PEGEL_L1_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,1,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L2 Pin",1,20,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L2_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,20,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L3 Pin",1,40,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L3_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,40,"1 (LOW)","0 (HIGH)");
     
     ftextout("Pegel an L4 Pin",1,60,0,1);
     INPAapiResultText(einh_var,"STAT_PEGEL_L4_TEXT",1,""); 
     if (einh_var=="LOW") tmpBool=1;
     else tmpBool=0;   
     digitalout(tmpBool,3,60,"1 (LOW)","0 (HIGH)");
  }
    
  LINE("Inputpegel M-Schaltung","")
  {
     INPAapiJob(sgbd,"STATUS_INPUTPEGEL","","");

      ftextout("Pegel Tip+ Pin",1,0,0,1);   
      INPAapiResultText(einh_var,"STAT_PEGEL_TIP_PLUS_TEXT",1,""); 
      if (einh_var=="LOW") tmpBool=1;
      else tmpBool=0;   
      digitalout(tmpBool,3,1,"1 (LOW)","0 (HIGH)");
     
     
      ftextout("Pegel Tip- Pin",1,20,0,1);
      INPAapiResultText(einh_var,"STAT_PEGEL_TIP_MINUS_TEXT",1,""); 
      if (einh_var=="LOW") tmpBool=1;
      else tmpBool=0;   
      digitalout(tmpBool,3,20,"1 (LOW)","0 (HIGH)");
     
      ftextout("Pegel M-Gasse",1,40,0,1);
      INPAapiResultText(einh_var,"STAT_PEGEL_M_GASSE_TEXT",1,""); 
      if (einh_var=="LOW") tmpBool=1;
      else tmpBool=0;   
      digitalout(tmpBool,3,40,"1 (LOW)","0 (HIGH)");
  }

  LINE ( "Motordrehzahl ", "")
  {
    // Motordrehzahl
    INPAapiJob(sgbd,"STATUS_MOTORDREHZAHL","","");
    ftextout("Motordrehzahl ",1,0,0,1);
    ftextout("[1/min]   (0..8160)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORDREHZAHL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 8160.0, 0.0, 8160.0,"");
  }
    
  LINE("Mittlere Radgeschwindigkeit","")
  {    
    // Raddrehzahl VL
    INPAapiJob(sgbd,"STATUS_RADGESCHWINDIGKEITEN","","");
    ftextout("Mittlere Radgeschwindigkeit",1,0,0,1);
    ftextout("[km/h]   (0..510)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_RADGESCHWINDIGKEITEN_WERT",1);
    analogout(real_zahl,3,0, 0.0, 510.0, 0.0, 510.0,"");      
  }

  LINE("Magnetventil, ","")
  {
    // Istgang
    ftextout("Magnetventile  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_MAGNETVENTILE","",""); 
     
    ftextout(" MV1",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_MV1_TEXT",1,""); 
    if (einh_var=="AUS") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"EIN  ","AUS  ");
  
    if (ESchaltung==1)
    {    
      ftextout(" MV2",3,30,0,1);
      INPAapiResultText(einh_var,"STAT_MV2_TEXT",1,""); 
      if (einh_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,30,"EIN  ","AUS  ");
     
      ftextout(" MV3",3,60,0,1);                                                    
      INPAapiResultText(einh_var,"STAT_MV3_TEXT",1,""); 
      if (einh_var=="NICHT BESTROMT") tmpBool=0;
      else tmpBool=1;   
      if (einh_var=="NICHT BESTROMT") digitalout(tmpBool,5,60,"FEHLER","NICHT BESTROMT     ");
      if (einh_var=="BESTROMT HOLD-PHASE") digitalout(tmpBool,5,60,"BESTROMT HOLD   ","NICHT BESTROMT     ");
      if (einh_var=="BESTROMT PEEK-PHASE") digitalout(tmpBool,5,60,"BESTROMT PEEK   ","NICHT BESTROMT      ");
      if (einh_var=="BESTROMT PEEK-PHASE HOLD-PHASE") digitalout(tmpBool,5,60,"FEHLER       ","NICHT BESTROMT  ");      
    } 
    else
    {
      ftextout(" IL",3,30,0,1);
      INPAapiResultText(einh_var,"STAT_MV3_TEXT",1,""); 
      if (einh_var=="AUS") tmpBool=1;
      else tmpBool=0;   
      digitalout(tmpBool,5,30,"OFFEN    ","SPERREN    ");

      ftextout(" SL",3,60,0,1);
      INPAapiResultText(einh_var,"STAT_MV4_TEXT",1,""); 
      if (einh_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,60,"SPERREN    ","OFFEN     ");
    }     
  } 
          
  LINE("EDS1/2/3, ","")
  {  
    ftextout("Druckregler      ",1,0,1,0);         
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS1",""); 
    ftextout("EDS1:",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,">100 mA  ","<=100 mA  ");  
                  
         
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS2",""); 
    ftextout("EDS2:",3,30,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,30,">100 mA  ","<=100 mA  ");  
     
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS3",""); 
    ftextout("EDS3:",3,60,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,60,">100 mA  ","<=100 mA  ");                  
  }
    
  LINE("EDS4/5/6, ","")
  {              
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS4",""); 
    ftextout("EDS4:",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,">100 mA  ","<=100 mA  ");           
   
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS5",""); 
    ftextout("EDS5:",3,30,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,30,">100 mA  ","<=100 mA  ");       
    
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS6",""); 
    ftextout("EDS6:",3,60,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,60,">100 mA  ","<=100 mA  ");            
  }

  LINE("HW P-Leitung, ","")
  {  
     if (ESchaltung==1)
     {    
       ftextout(" HW P-Leitung  ",1,0,1,0);
       INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","P_Leitung",""); 
       ftextout(" P-Leitung",3,0,0,1);
       INPAapiResultText(text_var,"STAT_CONTROLSTATE_TEXT",1,"");
       if (text_var=="AUS") tmpBool=0;
       else tmpBool=1;   
       digitalout(tmpBool,5,0,"EIN  ","AUS  ");
     }
     else
     {    
       ftextout(" HW P/N-Leitung  ",1,0,1,0);
       INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","P_Leitung",""); 
       ftextout(" P/N-Leitung",3,0,0,1);
       INPAapiResultText(text_var,"STAT_CONTROLSTATE_TEXT",1,"");
       if (text_var=="AUS") tmpBool=0;
       else tmpBool=1;   
       digitalout(tmpBool,5,0,"EIN  ","AUS  ");
     }
  }
   
  LINE("Istgang, ","")
  {
    // Istgang
    INPAapiJob(sgbd,"STATUS_ISTGANG","","");    
    INPAapiResultText(text_var,"STAT_ISTGANG_TEXT",1,"");
    ftextout("Istgang",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);
  }
    
  LINE("Wandlerkupplung","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_WK","","");
    INPAapiResultText(text_var,"STAT_WK_TEXT",1,"");
    ftextout("Wandlerkupplung",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  }
    
  LINE("Schaltart","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_GEAR","","");
    INPAapiResultText(text_var,"STAT_SA_TEXT",1,"");
    ftextout("Schaltart",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  } 
    
  LINE("Position WH","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_WH_POSITION","","");
    INPAapiResultText(text_var,"STAT_WH_POSITION_TEXT",1,"");
    ftextout("Wählhebelposition",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);           
  }  
    
  LINE("Getriebeposition","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_GETRIEBEPOSITION","","");
    INPAapiResultText(text_var,"STAT_GETRIEBEPOSITION_TEXT",1,"");
    ftextout("Getriebeposition",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);           
  }  
    
  LINE("AGS","")
  {                 
    INPAapiJob(sgbd,"STATUS_AGS","","");
    INPAapiResultText(text_var,"STAT_SCHALTDIAGRAMM_AGS_TEXT",1,"");
    ftextout("aktuelles Schaltprogramm",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);                
  }  
    
  LINE("STEPTRONIC","")
  {   
    INPAapiJob(sgbd,"STATUS_STEPTRONIC","",""); 
    ftextout(" Tip+ links",1,0,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_PLUS_LINKS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,0,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Tip+ rechts",1,25,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_PLUS_RECHTS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,25,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Tip- links",5,0,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_MINUS_LINKS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,7,0,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Tip- rechts",5,25,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_MINUS_RECHTS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,7,25,"Taste betätigt          ","Taste nicht betätigt  ");
  }
    
  LINE("P/S-Taster","")
  {   
    INPAapiJob(sgbd,"STATUS_STEPTRONIC","","");     
    ftextout(" P-Taster",1,0,0,1);
    INPAapiResultText(einh_var,"STAT_P_TASTER_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,0,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" S-Taster",1,25,0,1);
    INPAapiResultText(einh_var,"STAT_S_TASTER_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,25,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Bremse ",1,50,0,1);
    INPAapiResultText(einh_var,"STAT_BREMSE_GETRETEN_TEXT",1,""); 
    if (einh_var=="BREMSE NICHT GETRETEN") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,50,"Bremse getreten                   ","Bremse nicht getreten      ");     
  }

  LINE("Fahrpedalwinkel","")
  {
    // Lastsignal DKG
    INPAapiJob(sgbd,"STATUS_FAHRPEDALWINKEL","","");
    ftextout("HDK Fahrpedalwinkel",1,0,0,1);
    ftextout("[%]   (0..100)",2,0,0,1);                        
    INPAapiResultAnalog(real_zahl,"STAT_FAHRPEDALWINKEL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 100.0, 0.0, 100.0,"");         
  }
    
  LINE("Motortemperatur, ","")
  {
    // Motortemperatur
    INPAapiJob(sgbd,"STATUS_MOTORTEMPERATUR","","");
    ftextout("Motortemperatur",1,0,0,1); 
    ftextout("[Grad C]   (-48..+207)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORTEMPERATUR_WERT",1);
    analogout(real_zahl,3,0, -48.0, 207.0, -48.0, 207.0,"");  
  }
    
  LINE("Mmot ","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_MOTORISTMOMENT","","");
    ftextout("Motoristmoment",1,0,0,1); 
    ftextout("[Nm]   (-100..916)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORISTMOMENT_WERT",1);
    analogout(real_zahl,3,0, -100.0, 916.0, -100.0, 916.0,"");
      
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_MOTORSOLLMOMENT","","");
    ftextout("Motorsollmoment",1,43,0,1); 
    ftextout("[Nm]   (-100..916)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORSOLLMOMENT_WERT",1);
    analogout(real_zahl,3,43, -100.0, 916.0, -100.0, 916.0,"");
      
    // Motordrehzahl
    INPAapiJob(sgbd,"STATUS_MOTORDREHZAHL","","");
    ftextout("Motordrehzahl ",6,0,0,1);
    ftextout("[1/min]   (0..8160)",7,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORDREHZAHL_WERT",1);
    analogout(real_zahl,8,0, 0.0, 8160.0, 0.0, 8160.0,"");
  }
}


SCREEN s_motor()
{
  ftextout("Motor ",1,0,1,0);
  ftextout("",2,10,0,0);
 
  LINE("Fahrpedalwinkel","")
  {
    // Lastsignal DKG
    INPAapiJob(sgbd,"STATUS_FAHRPEDALWINKEL","","");
    ftextout("HDK Fahrpedalwinkel",1,0,0,1);
    ftextout("[%]   (0..100)",2,0,0,1);                        
    INPAapiResultAnalog(real_zahl,"STAT_FAHRPEDALWINKEL_WERT",1);
    analogout(real_zahl,3,0, 0.0, 100.0, 0.0, 100.0,"");         
  }
    
  LINE("Motortemperatur, ","")
  {
    // Motortemperatur
    INPAapiJob(sgbd,"STATUS_MOTORTEMPERATUR","","");
    ftextout("Motortemperatur",1,0,0,1); 
    ftextout("[Grad C]   (-48..+207)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORTEMPERATUR_WERT",1);
    analogout(real_zahl,3,0, -48.0, 207.0, -48.0, 207.0,"");  
  }
    
  LINE("Mmot ","")
  {    
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_MOTORISTMOMENT","","");
    ftextout("Motoristmoment",1,0,0,1); 
    ftextout("[Nm]   (-100..916)",2,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORISTMOMENT_WERT",1);
    analogout(real_zahl,3,0, -100.0, 916.0, -100.0, 916.0,"");
      
    // Lastsignal
    INPAapiJob(sgbd,"STATUS_MOTORSOLLMOMENT","","");
    ftextout("Motorsollmoment",1,43,0,1); 
    ftextout("[Nm]   (-100..916)",2,43,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORSOLLMOMENT_WERT",1);
    analogout(real_zahl,3,43, -100.0, 916.0, -100.0, 916.0,"");
      
    // Motordrehzahl
    INPAapiJob(sgbd,"STATUS_MOTORDREHZAHL","","");
    ftextout("Motordrehzahl ",6,0,0,1);
    ftextout("[1/min]   (0..8160)",7,0,0,1);
    INPAapiResultAnalog(real_zahl,"STAT_MOTORDREHZAHL_WERT",1);
    analogout(real_zahl,8,0, 0.0, 8160.0, 0.0, 8160.0,"");
  }
}

// ***************************
// *** MV/EDS-Screen        ***
// ***************************
SCREEN s_mv_eds()
{   
  LINE("Magnetventil, ","")
  {
    // Istgang
    ftextout("Magnetventile  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_MAGNETVENTILE","",""); 
     
    ftextout(" MV1",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_MV1_TEXT",1,""); 
    if (einh_var=="AUS") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"EIN  ","AUS  ");
  
    if (ESchaltung==1)
    {    
      ftextout(" MV2",3,30,0,1);
      INPAapiResultText(einh_var,"STAT_MV2_TEXT",1,""); 
      if (einh_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,30,"EIN  ","AUS  ");
     
      ftextout(" MV3",3,60,0,1);                                                    
      INPAapiResultText(einh_var,"STAT_MV3_TEXT",1,""); 
      if (einh_var=="NICHT BESTROMT") tmpBool=0;
      else tmpBool=1;   
      if (einh_var=="NICHT BESTROMT") digitalout(tmpBool,5,60,"FEHLER","NICHT BESTROMT     ");
      if (einh_var=="BESTROMT HOLD-PHASE") digitalout(tmpBool,5,60,"BESTROMT HOLD   ","NICHT BESTROMT     ");
      if (einh_var=="BESTROMT PEEK-PHASE") digitalout(tmpBool,5,60,"BESTROMT PEEK   ","NICHT BESTROMT      ");
      if (einh_var=="BESTROMT PEEK-PHASE HOLD-PHASE") digitalout(tmpBool,5,60,"FEHLER       ","NICHT BESTROMT  ");      
    } 
    else
    {
      ftextout(" IL",3,30,0,1);
      INPAapiResultText(einh_var,"STAT_MV3_TEXT",1,""); 
      if (einh_var=="NICHT BESTROMT") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,30,"OFFEN       ","SPERREN");

      ftextout(" SL",3,60,0,1);
      INPAapiResultText(einh_var,"STAT_MV4_TEXT",1,""); 
      if (einh_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,60,"SPERREN","OFFEN       ");
    }         
  } 
          
  LINE("EDS1/2/3, ","")
  {  
    ftextout("Druckregler      ",1,0,1,0);         
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS1",""); 
    ftextout("EDS1:",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,">100 mA  ","<=100 mA  ");  

    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS2",""); 
    ftextout("EDS2:",3,30,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,30,">100 mA  ","<=100 mA  ");  

    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS3",""); 
    ftextout("EDS3:",3,60,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,60,">100 mA  ","<=100 mA  ");                  
  }
    
  LINE("EDS4/5/6, ","")
  {              
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS4",""); 
    ftextout("EDS4:",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,">100 mA  ","<=100 mA  ");           
   
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS5",""); 
    ftextout("EDS5:",3,30,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,30,">100 mA  ","<=100 mA  ");       
    
    INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","EDS6",""); 
    ftextout("EDS6:",3,60,0,1);
    INPAapiResultText(einh_var,"STAT_CONTROLSTATE_TEXT",1,""); 
    if (einh_var=="<=100mA") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,60,">100 mA  ","<=100 mA  ");            
  }
  
  LINE("HW P-Leitung, ","")
  {      
    if (ESchaltung==1)
    {
      ftextout(" HW P-Leitung  ",1,0,1,0);
      INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","P_Leitung",""); 
      ftextout(" P-Leitung",3,0,0,1);
      INPAapiResultText(text_var,"STAT_CONTROLSTATE_TEXT",1,"");
      if (text_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,0,"EIN  ","AUS  ");
    }
    else
    {
      ftextout(" HW P/N-Leitung  ",1,0,1,0);
      INPAapiJob(sgbd,"STATUS_SIGNAL_STELLGLIED","P_Leitung",""); 
      ftextout(" P/N-Leitung",3,0,0,1);
      INPAapiResultText(text_var,"STAT_CONTROLSTATE_TEXT",1,"");
      if (text_var=="AUS") tmpBool=0;
      else tmpBool=1;   
      digitalout(tmpBool,5,0,"EIN  ","AUS  ");
    }
  }
}

// ***************************
// *** E-Schaltung-Screen  ***
// ***************************
SCREEN s_e_schaltung()
{
  LINE("CAS, ","")
  {  
    ftextout("CAS  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" KL15 CAN Signal",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_KL_15_CAN_TEXT",1,""); 
    if (einh_var=="AUS") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"EIN  ","AUS  ");

    ftextout(" Weckleitung",3,25,0,1);
    INPAapiResultText(einh_var,"STAT_WECKLEITUNG_TEXT",1,""); 
    if (einh_var=="LOW") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,25,"HIGH  ","LOW  ");
     
    ftextout(" Schlüssel steckt CAN Signal",3,50,0,1);
    INPAapiResultText(einh_var,"STAT_SCHLUESSEL_TEXT",1,""); 
    if (einh_var=="STECKT NICHT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,50,"STECKT               ","STECKT NICHT    ");
  }
     
  LINE("Sitz/Tür, ","")
  {  
    ftextout("Sitz / Tür  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" Tür CAN Signal",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_TUER_TEXT",1,""); 
    if (einh_var=="ZU") tmpBool=1;
    else tmpBool=0;   
    digitalout(tmpBool,5,0,"GESCHLOSSEN  ","OFFEN                        ");
     
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" Sitz CAN Signal",3,25,0,1);
    INPAapiResultText(einh_var,"STAT_SITZ_TEXT",1,""); 
    if (einh_var=="NICHT BELEGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,25,"BELEGT             ","NICHT BELEGT  ");  
  }
   
  LINE("AUTO-N/-P, ","")
  {    
    ftextout("Auto-N / Auto-P  ",1,0,1,0);
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" Auto-N",3,0,0,1);
    INPAapiResultText(einh_var,"STAT_AUTO_N_TEXT",1,""); 
    if (einh_var=="NICHT AKTIV") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"AKTIV                   ","NICHT AKTIV  ");
     
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" Auto-P",3,25,0,1);
    INPAapiResultText(einh_var,"STAT_AUTO_P_TEXT",1,""); 
    if (einh_var=="NICHT AKTIV") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,25,"AKTIV                   ","NICHT AKTIV  ");
     
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout("N-Haltephase",3,50,0,1);
    INPAapiResultText(einh_var,"STAT_N_HALTEPHASE_TEXT",1,""); 
    if (einh_var=="NICHT AKTIV") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,50,"AKTIV                   ","NICHT AKTIV  ");
  }
}

// ***************************
// *** Temperaturkollektiv ***
// ***************************
SCREEN s_temperatur()
{
  ftextout("Aktuelles Temperaturkollektiv auslesen  ",1,0,1,0);
  INPAapiJob(sgbd,"STATUS_TEMPERATURKOLLEKTIV","",""); 
     
  LINE("Temperaturkollektiv","")
  {     
     ftextout("Zaehler Temperaturbereich bis 60°C",4,0,0,1);
     ftextout(":",4,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_0_WERT",1,""); 
     ftextout(text_var,4,45,0,1); 
     
     ftextout("Zaehler Temperaturbereich bis 70°C",5,0,0,1);
     ftextout(":",5,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_1_WERT",1,""); 
     ftextout(text_var,5,45,0,1); 
     
     ftextout("Zaehler Temperaturbereich bis 80°C",6,0,0,1);
     ftextout(":",6,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_2_WERT",1,""); 
     ftextout(text_var,6,45,0,1);           
   
     ftextout("Zaehler Temperaturbereich bis 90°C",7,0,0,1);
     ftextout(":",7,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_3_WERT",1,""); 
     ftextout(text_var,7,45,0,1);
   
     ftextout("Zaehler Temperaturbereich bis 100°C",8,0,0,1);
     ftextout(":",8,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_4_WERT",1,""); 
     ftextout(text_var,8,45,0,1);
   
     ftextout("Zaehler Temperaturbereich bis 110°C",9,0,0,1);
     ftextout(":",9,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_5_WERT",1,""); 
     ftextout(text_var,9,45,0,1);
     
     ftextout("Zaehler Temperaturbereich bis 120°C",10,0,0,1);
     ftextout(":",10,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_6_WERT",1,""); 
     ftextout(text_var,10,45,0,1);
     
     ftextout("Zaehler Temperaturbereich bis 130°C",11,0,0,1);
     ftextout(":",11,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_7_WERT",1,""); 
     ftextout(text_var,11,45,0,1);
     
     ftextout("Zaehler Temperaturbereich bis 140°C",12,0,0,1);
     ftextout(":",12,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_8_WERT",1,""); 
     ftextout(text_var,12,45,0,1);
     
     ftextout("Zaehler Temperaturbereich bis 180°C",13,0,0,1);
     ftextout(":",13,42,0,1);
     INPAapiResultText(text_var,"STAT_CGTKO_9_WERT",1,""); 
     ftextout(text_var,13,45,0,1);
     
     ftextout("Zeit bis Update in sec",15,0,0,1);
     ftextout(":",15,42,0,1);
     INPAapiResultText(text_var,"STAT_ZEIT_UPTDATE_WERT",1,""); 
     ftextout(text_var,15,45,0,1);
     
     ftextout("Summe Temperaturbereich 130°C - 180°C",17,0,0,1);
     ftextout(":",17,42,0,1);
     INPAapiResultText(text_var,"STAT_SUMME_8_9_WERT",1,""); 
     ftextout(text_var,17,45,0,1);
     
     ftextout("Summe Alt  Temperaturbereich 130°C - 180°C",18,0,0,1);
     ftextout(":",18,42,0,1);
     INPAapiResultText(text_var,"STAT_SUMME_8_9_ALT_WERT",1,""); 
     
     ftextout("<Shift+F8> Temperaturkollektiv speichern" ,26,0,0,1);
     ftextout(text_var,18,45,0,1);
  }
}

// ***************************
// *** Schaltung-Screen    ***
// ***************************
SCREEN s_schaltung_es()
{
  ftextout("Schaltung Getriebe ",1,0,1,0);
  ftextout("",2,10,0,0);

  LINE("Istgang, ","")
  {
    // Istgang
    INPAapiJob(sgbd,"STATUS_ISTGANG","","");    
    INPAapiResultText(text_var,"STAT_ISTGANG_TEXT",1,"");
    ftextout("Istgang",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);
  }
    
  LINE("Wandlerkupplung","")
  {    
    INPAapiJob(sgbd,"STATUS_WK","","");
    INPAapiResultText(text_var,"STAT_WK_TEXT",1,"");
    ftextout("Wandlerkupplung",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  }
    
  LINE("Schaltart","")
  {    
    INPAapiJob(sgbd,"STATUS_GEAR","","");
    INPAapiResultText(text_var,"STAT_SA_TEXT",1,"");
    ftextout("Schaltart",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  } 
  
  LINE("Position WH","")
  {    
    INPAapiJob(sgbd,"STATUS_WH_POSITION","","");
    INPAapiResultText(text_var,"STAT_WH_POSITION_TEXT",1,"");
    ftextout("Wählhebelposition",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);
  }  
   
  LINE("Getriebeposition","")
  {    
    INPAapiJob(sgbd,"STATUS_GETRIEBEPOSITION","","");
    INPAapiResultText(text_var,"STAT_GETRIEBEPOSITION_TEXT",1,"");
    ftextout("Getriebeposition",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);           
  }  
    
  LINE("AGS","")
  {               
    INPAapiJob(sgbd,"STATUS_AGS","","");
    INPAapiResultText(text_var,"STAT_SCHALTDIAGRAMM_AGS_TEXT",1,"");
    ftextout("aktuelles Schaltprogramm",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);            
  }  
    
  LINE("STEPTRONIC","")
  {   
    INPAapiJob(sgbd,"STATUS_STEPTRONIC","",""); 
    ftextout(" Tip+ links",1,0,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_PLUS_LINKS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,0,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Tip+ rechts",1,25,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_PLUS_RECHTS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,25,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Tip- links",5,0,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_MINUS_LINKS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,7,0,"Taste betätigt          ","Taste nicht betätigt  ");
   
    ftextout(" Tip- rechts",5,25,0,1);
    INPAapiResultText(einh_var,"STAT_TIP_MINUS_RECHTS_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,7,25,"Taste betätigt          ","Taste nicht betätigt  ");
  }
    
  LINE("P/SMD-Taster und Bremse","")
  {   
    INPAapiJob(sgbd,"STATUS_STEPTRONIC","","");
    ftextout(" P-Taster",1,0,0,1);
    INPAapiResultText(einh_var,"STAT_P_TASTER_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,0,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" S/M/D-Taster",1,25,0,1);
    INPAapiResultText(einh_var,"STAT_S_TASTER_TEXT",1,""); 
    if (einh_var=="TASTE NICHT BETAETIGT") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,25,"Taste betätigt          ","Taste nicht betätigt  ");
     
    ftextout(" Bremse ",1,50,0,1);
    INPAapiResultText(einh_var,"STAT_BREMSE_GETRETEN_TEXT",1,""); 
    if (einh_var=="BREMSE NICHT GETRETEN") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,3,50,"Bremse getreten                   ","Bremse nicht getreten      ");     
  }
}

// ***************************
// *** Schaltung-Screen    ***
// ***************************
SCREEN s_schaltung_ms()
{
  ftextout("Schaltung Getriebe ",1,0,1,0);
  ftextout("",2,10,0,0);

  LINE("Istgang, ","")
  {
    // Istgang
    INPAapiJob(sgbd,"STATUS_ISTGANG","","");    
    INPAapiResultText(text_var,"STAT_ISTGANG_TEXT",1,"");
    ftextout("Istgang",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);
  }
    
  LINE("Wandlerkupplung","")
  {    
    INPAapiJob(sgbd,"STATUS_WK","","");
    INPAapiResultText(text_var,"STAT_WK_TEXT",1,"");
    ftextout("Wandlerkupplung",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  }
    
  LINE("Schaltart","")
  {    
    INPAapiJob(sgbd,"STATUS_GEAR","","");
    INPAapiResultText(text_var,"STAT_SA_TEXT",1,"");
    ftextout("Schaltart",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);      
  } 
 
  LINE("Getriebeposition","")
  {    
    INPAapiJob(sgbd,"STATUS_GETRIEBEPOSITION","","");
    INPAapiResultText(text_var,"STAT_GETRIEBEPOSITION_TEXT",1,"");
    ftextout("Getriebeposition",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);           
  }  
    
  LINE("AGS","")
  {               
    INPAapiJob(sgbd,"STATUS_AGS","","");
    INPAapiResultText(text_var,"STAT_SCHALTDIAGRAMM_AGS_TEXT",1,"");
    ftextout("aktuelles Schaltprogramm",1,0,0,1);
    ftextout(":",1,25,0,1);
    ftextout(text_var+"                         ",1,30,0,1);            
  }  
    
  LINE("Bremse und Klemme 15","")
  {   
    ftextout(" Bremse ",3,0,0,1);
    INPAapiJob(sgbd,"STATUS_STEPTRONIC","","");
    INPAapiResultText(einh_var,"STAT_BREMSE_GETRETEN_TEXT",1,""); 
    if (einh_var=="BREMSE NICHT GETRETEN") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,0,"Bremse getreten           ","Bremse nicht getreten ");
    
    INPAapiJob(sgbd,"STATUS_E_SCHALTUNG","",""); 
    ftextout(" KL15 CAN Signal",3,25,0,1);
    INPAapiResultText(einh_var,"STAT_KL_15_CAN_TEXT",1,""); 
    if (einh_var=="AUS") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,25,"EIN  ","AUS  ");

    ftextout(" Weckleitung",3,50,0,1);
    INPAapiResultText(einh_var,"STAT_WECKLEITUNG_TEXT",1,""); 
    if (einh_var=="LOW") tmpBool=0;
    else tmpBool=1;   
    digitalout(tmpBool,5,50,"HIGH  ","LOW  ");
  }
}


// ********************************
// *** Adaptionswerte-Screen    ***
// ********************************
SCREEN s_adapt()
{
  ftextout("Adaptionswerte ",1,0,1,0);
  ftextout("",2,10,0,0);

  LINE("","")
    {
    ftextout("< F1 >   Flare Adaption"                        ,3,0,0,1);
    ftextout("< F2 >   GLUE Adaption"                         ,5,0,0,1);
    ftextout("< F3 >   GLS Adaption"                          ,7,0,0,1);
    ftextout("< F4 >   Schnellfüllzeit & Fülldruck Adaption"  ,9,0,0,1);
    ftextout("< F5 >   Gangeinlegen Adaption"                 ,11,0,0,1);
    ftextout("< F6>    Ada-Beeinflussung Adaption"            ,13,0,0,1);
    ftextout("< F7>    Pulsadaptionswerte löschen"            ,15,0,0,1);
    ftextout("< F9 >   Adaptionswerte speichern"              ,17,0,0,1);
    ftextout("< F10 >  Adaptionswerte ruecksetzen"            ,19,0,0,1);
    ftextout("< Shift > + < F9 >  Zurück"                     ,26,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                      ,26,35,0,1);  
    }
}


// ***************************
// *** Adaptionswerte-Screen  ***
// ***************************
SCREEN s_adapt_flare()
{
   
  ftextout("Adaptionswerte FLARE in ms",1,0,1,0);
  ftextout("",2,10,0,0);
   
   zeile=1;
   spalte=1;
   array_zeile=5;
   array_spalte=12;
   
    
  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=6;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_2_1","","");
      ftextout(" Schaltung 2->1",1,6,0,0);
      ftextout(" CG_B_1      CG_B_2      CG_B_3      CG_B_4   ",2,6,0,0);
      
      while (zeile<=1)
       {
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+9;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=6;
         array_zeile=array_zeile+1;
      }
    }
   
   
   LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=6;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_3_2","","");
      ftextout(" Schaltung 3->2",1,6,0,0);
      ftextout(" CG_B_1      CG_B_2      CG_B_3      CG_B_4   ",2,6,0,0);
  
      while (zeile<=1)
       {
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+9;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=6;
         array_zeile=array_zeile+1;
      }
    }
   
   LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=6;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_4_3","","");
      ftextout(" Schaltung 4->3",1,6,0,0);
      ftextout(" CG_B_1      CG_B_2      CG_B_3      CG_B_4   ",2,6,0,0);
      
      while (zeile<=1)
       {
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+9;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=6;
         array_zeile=array_zeile+1;
       }
     }
   
   
   LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=6;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_5_4","","");
      ftextout(" Schaltung 5->4",1,6,0,0);
      ftextout(" CG_B_1      CG_B_2      CG_B_3      CG_B_4   ",2,6,0,0);
      
      while (zeile<=1)
       {
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+9;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=6;
         array_zeile=array_zeile+1;
       }
     }
   
   LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=6;
    
      INPAapiJob(sgbd,"status_adaptionswerte_flare_6_5","","");
      ftextout(" Schaltung 6->5",1,6,0,0);
      ftextout(" CG_B_1      CG_B_2      CG_B_3      CG_B_4   ",2,6,0,0);
      
      
      while (zeile<=1)
       {
         while (spalte<=4) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+9;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=6;
         array_zeile=array_zeile+1;
       }
     }
    
}



// ******************************
// *** Adaptionswerte-Screen  ***
// ******************************
SCREEN s_adapt_gls()
{


  ftextout("Adaptionswerte GLS in bar",1,0,1,0);
  ftextout("",2,10,0,0);

  
  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_1_2","","");
      ftextout(" Schaltung 1->2",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_2_3","","");
      ftextout(" Schaltung 2->3",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7  T_B8 MT_B9 MT_B10 MT_B11  MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_3_4","","");
      ftextout(" Schaltung 3->4",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_4_5","","");
      ftextout(" Schaltung 4->5",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }


  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_5_6","","");
      ftextout(" Schaltung 5->6",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

   LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_2_1","","");
      ftextout(" Schaltung 2->1",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_3_2","","");
      ftextout(" Schaltung 3->2",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_4_3","","");
      ftextout(" Schaltung 4->3",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_5_4","","");
      ftextout(" Schaltung 5->4",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }


  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gls_6_5","","");
      ftextout(" Schaltung 6->5",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }
}



// ***************************
// *** Adaptionswerte-Screen  ***
// ***************************
SCREEN s_adapt_sf_pf_pfn()
{

  LINE("","")
    {
     	INPAapiJob(sgbd,"status_adaptionswerte_sf","","");
     	ftextout("Adaptionswerte Kupplungsbezogen",1,0,1,0);
    	ftextout("Schnellfüllzeit in ms",4,0,1,0);
  	ftextout("",2,10,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_SF_1_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung A :",7, 1,0,0);   
  	ftextout(text_var,7, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_SF_2_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung B :",8, 1,0,0);    
  	ftextout(text_var,8, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_SF_3_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	ftextout("Kupplung C :",9, 1,0,0);    
  	ftextout(text_var,9, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_SF_4_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung D :",10, 1,0,0);    
  	ftextout(text_var,10, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_SF_5_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	ftextout("Kupplung E :",11, 1,0,0);  
  	ftextout(text_var,11, 15,0,0);
  	
  	
  	INPAapiJob(sgbd,"status_adaptionspruefzaehler","","");
    	ftextout("Anzahl durchgeführter Prüfzyklen",4,30,1,0);
  	ftextout("",2,10,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_1",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung A :",7, 31,0,0);   
  	ftextout(text_var,7, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_2",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung B :",8, 31,0,0);   
  	ftextout(text_var,8, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_3",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung C :",9, 31,0,0);   
  	ftextout(text_var,9, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_4",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung D :",10, 31,0,0);   
  	ftextout(text_var,10, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_SF_5",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung E :",11, 31,0,0);   
  	ftextout(text_var,11, 45,0,0);
  	
    }

  LINE("","")
    {
  	INPAapiJob(sgbd,"status_adaptionswerte_pf","","");
  	ftextout("Fülldruck in mbar",1,0,1,0);
  	ftextout("",2,10,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PF_1_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung A :",4, 1,0,0);
  	ftextout(text_var,4, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PF_2_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung B :",5, 1,0,0);
  	ftextout(text_var,5, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PF_3_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung C :",6, 1,0,0);
  	ftextout(text_var,6, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PF_4_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung D :",7, 1,0,0);
  	ftextout(text_var,7, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PF_5_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung E :",8, 1,0,0);
  	ftextout(text_var,8, 15,0,0);
  	
  	
  	INPAapiJob(sgbd,"status_adaptionspruefzaehler","","");
    	ftextout("Anzahl durchgeführter Prüfzyklen",1,30,1,0);
  	ftextout("",2,10,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_1",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung A :",4, 31,0,0);   
  	ftextout(text_var,4, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_2",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung B :",5, 31,0,0);   
  	ftextout(text_var,5, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_3",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung C :",6, 31,0,0);   
  	ftextout(text_var,6, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_4",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung D :",7, 31,0,0);   
  	ftextout(text_var,7, 45,0,0);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_PRUEFZAEHLER_PF_5",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Kupplung E :",8, 31,0,0);   
  	ftextout(text_var,8, 45,0,0);
  	
    }
}


// ***************************
// *** Adaptionswerte-Screen  ***
// ***************************
SCREEN s_adapt_gangeinlegen()
{
   
  ftextout("Adaptionswerte Gangeinlegen in mbar",1,0,1,0);
  ftextout("",2,10,0,0);

   zeile=1;
   spalte=1;
   array_zeile=5;
   array_spalte=12;
   
    
  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=10;
    
      INPAapiJob(sgbd,"status_adaptionswerte_gangeinlegen","","");
      ftextout(" N_MOT_1     N_MOT_2     N_MOT_3   ",2,10,0,0);
      ftextout("GE nach D",4,0,0,0);
      ftextout("GE nach R",5,0,0,0);
      
      while (zeile<=2)
       {
         while (spalte<=3) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"10.0",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+10;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=10;
         array_zeile=array_zeile+1;
      }
    }
}



// ***************************
// *** Adaptionswerte-Screen  ***
// ***************************
SCREEN s_adapt_ada_beeinflussung()
{

  LINE("","")
    {
     	INPAapiJob(sgbd,"status_adaptionswerte_ada","","");
    	ftextout("Adaptionswerte Ada-Beeinflussung in mbar",1,0,1,0);
  	ftextout("",2,10,0,0);
  	
  	ftextout("Für GLÜ-Adaption",4,0,0,1);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_1_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 1->2 :",6, 1,0,0);   
  	ftextout(text_var,6, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_2_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 2->3 :",7, 1,0,0);    
  	ftextout(text_var,7, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_3_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	ftextout("Schaltung 3->4 :",8, 1,0,0);    
  	ftextout(text_var,8, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_4_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 4->5 :",9, 1,0,0);    
  	ftextout(text_var,9, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_5_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	ftextout("Schaltung 5->6 :",10, 1,0,0);  
  	ftextout(text_var,10, 15,0,0);
  	
  	ftextout("Für GLS-Adaption",12,0,0,1);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_6_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 1->2 :",14, 1,0,0);   
  	ftextout(text_var,14, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_7_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 2->3 :",15, 1,0,0);    
  	ftextout(text_var,15, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_8_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	ftextout("Schaltung 3->4 :",16, 1,0,0);    
  	ftextout(text_var,16, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_9_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 4->5 :",17, 1,0,0);    
  	ftextout(text_var,17, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_10_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	ftextout("Schaltung 5->6 :",18, 1,0,0);  
  	ftextout(text_var,18, 15,0,0);
  	
  	ftextout("Für GLS-Rück-Adaption",20,0,0,1);
  	
  	INPAapiResultAnalog(real_zahl,"STAT_ADA_11_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 2->1 :",22, 1,0,0);   
  	ftextout(text_var,22, 15,0,0);
  	
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_12_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 3->2 :",23, 1,0,0);    
  	ftextout(text_var,23, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_13_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);
  	ftextout("Schaltung 4->3 :",24, 1,0,0);    
  	ftextout(text_var,24, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_14_WERT",1);
  	realtostring(real_zahl,"8.2",text_var); 
  	ftextout("Schaltung 5->4 :",25, 1,0,0);    
  	ftextout(text_var,25, 15,0,0);
  
  	INPAapiResultAnalog(real_zahl, "STAT_ADA_15_WERT",1);
  	realtostring(real_zahl,"8.2",text_var);   
  	ftextout("Schaltung 6->5 :",26, 1,0,0);  
  	ftextout(text_var,26, 15,0,0);
    }
}



// ******************************
// *** Adaptionswerte-Screen  ***
// ******************************
SCREEN s_adapt_save()
{
}



// ************************************
// *** Adaptionswerte-Screen  GLUE  ***
// ************************************
SCREEN s_adapt_glue()
{
  ftextout("Adaptionswerte GLUE in bar",1,0,1,0);
  ftextout("",2,10,0,0);

   zeile=1;
   spalte=1;
   array_zeile=5;
   array_spalte=12;
   
    
  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_1_2","","");
      ftextout(" Schaltung 1->2",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_2_3","","");
      ftextout(" Schaltung 2->3",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_3_4","","");
      ftextout(" Schaltung 3->4",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_4_5","","");
      ftextout(" Schaltung 4->5",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }


  LINE("","")
    {
    
      zeile=1;
      spalte=1;
      array_zeile=4;
      array_spalte=8;
    
      INPAapiJob(sgbd,"status_adaptionswerte_glue_5_6","","");
      ftextout(" Schaltung 5->6",1,6,0,0);
      ftextout(" MT_B1  MT_B2  MT_B3 MT_B4 MT_B5 MT_B6  MT_B7 MT_B8 MT_B9 MT_B10 MT_B11 MT_B12",2,6,0,0);
      ftextout("NT_B1",4,0,0,0);
      ftextout("NT_B2",5,0,0,0);
      ftextout("NT_B3",6,0,0,0);
      ftextout("NT_B4",7,0,0,0);
      ftextout("NT_B5",8,0,0,0);
      ftextout("NT_B6",9,0,0,0);
      ftextout("NT_B7",10,0,0,0);
      ftextout("NT_B8",11,0,0,0);
      
      while (zeile<=8)
       {
         while (spalte<=12) 
          {
          puffer="";
          puffer1="";
          inttostring(zeile, puffer1);
      
          puffer="ARRAY_";
          strcat(puffer,puffer, puffer1) ;
          strcat(puffer,puffer, "_");
          inttostring(spalte, puffer1);
          strcat(puffer,puffer, puffer1);
          
           //ftextout(puffer,10,10,0,0);
          INPAapiResultAnalog(real_zahl,puffer,1);
          realtostring(real_zahl,"2.2",text_var);    
          ftextout(text_var,array_zeile, array_spalte,0,0);
          spalte=spalte+1 ;
          array_spalte=array_spalte+6;
          }
         zeile=zeile+1;
         spalte=1;
         array_spalte=8;
         array_zeile=array_zeile+1;
     }
   }

}



// ***************************
// *** AIF Ident-Screen    ***
// ***************************
SCREEN s_identaif()
{
  
  LINE("AIF, ","")
    {
    
     ftextout("Aktuelles Anwenderinfofeld  ",1,0,1,0);
     INPAapiJob(sgbd,"aif_aktuell_lesen","",""); 
     
     ftextout("Programmstand",3,0,0,1);
     ftextout(":",3,42,0,1);
     INPAapiResultText(text_var,"Programmstand",1,""); 
     ftextout(text_var,3,45,0,1);    
      
     ftextout("BMW_AssemblyNr",5,0,0,1);
     ftextout(":",5,42,0,1);
     INPAapiResultText(text_var,"BMW_Assembly_Nr",1,""); 
     ftextout(text_var,5,45,0,1);     
      
     ftextout("BMW_ProgrammingDate",7,0,0,1);
     ftextout(":",7,42,0,1);
     INPAapiResultText(text_var,"BMW_Programming_Date",1,""); 
     ftextout(text_var,7,45,0,1); 
     
     ftextout("Tester_Seriennummer",9,0,0,1);
     ftextout(":",9,42,0,1);
     INPAapiResultText(text_var,"Tester_Seriennummer",1,""); 
     ftextout(text_var,9,45,0,1); 
     
     ftextout("KM_Stand_Programmierung",11,0,0,1);
     ftextout(":",11,42,0,1);
     INPAapiResultInt(int_zahl,"KM_Stand_Programmierung",1);   
     inttostring(int_zahl,text_var);
     ftextout(text_var,11,45,0,1); 
     
     ftextout("BMW_CalibrationDataSetNr",13,0,0,1);
     ftextout(":",13,42,0,1);
     INPAapiResultText(text_var,"BMW_Calibration_DataSet_Nr",1,""); 
     ftextout(text_var,13,45,0,1); 
     
     ftextout("Werkscode_Haendlernummer",15,0,0,1);
     ftextout(":",15,42,0,1);
     INPAapiResultText(text_var,"Werkscode_Haendlernummer",1,""); 
     ftextout(text_var,15,45,0,1); 
     
     ftextout("BMW_VehicleIdentificationNr",17,0,0,1);
     ftextout(":",17,42,0,1);
     INPAapiResultText(text_var,"BMW_Vehicle_Identification_Nr",1,""); 
     ftextout(text_var,17,45,0,1); 
     
     ftextout("BMW_ExhaustRegulationOrTypeApprovalNr",19,0,0,1);
     ftextout(":",19,42,0,1);
     INPAapiResultText(text_var,"BMW_Exhaust_Regulation_Or_Type_Approval_Nr",1,""); 
     ftextout(text_var,19,45,0,1); 
     
     ftextout("BRIF/ZIF/DIF  ",21,0,1,0);
     INPAapiJob(sgbd,"status_hardware_referenz","",""); 
     ftextout("Hardware Referenz BRIF ",23,0,0,1);
     ftextout(":",23,42,0,1);
     INPAapiResultText(text_var,"STAT_BRIF_TEXT",1,""); 
     ftextout(text_var,23,45,0,1);
     
     INPAapiJob(sgbd,"status_programm_referenz","",""); 
     ftextout("Programm Referenz ZIF  ",25,0,0,1);
     ftextout(":",25,42,0,1);
     INPAapiResultText(text_var,"STAT_ZIF_TEXT",1,""); 
     ftextout(text_var,25,45,0,1);
     
     INPAapiJob(sgbd,"status_daten_referenz","",""); 
     ftextout("Daten Referenz DIF  ",27,0,0,1);
     ftextout(":",27,42,0,1);
     INPAapiResultText(text_var,"STAT_DIF_TEXT",1,""); 
     ftextout(text_var,27,45,0,1);
     
    ftextout("< Shift > + < F9 >  Zurück"                           ,29,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,29,35,0,1);  
    }    
}



// ***********************************************
// *** Signal/Stellglied-Steuern/Status lesen  ***
// ***********************************************
SCREEN s_steuern()
{
    INPAapiJob(sgbd,"DIAGNOSE_AUFRECHT","","");
    INPAapiResultText(text_var,"JOB_STATUS",1,"");
    ftextout("Status Signal/Stellglied Steuern  ",1,0,1,0); 
    
    if (ESchaltung==1)
    { ftextout("<F1>",6,0,0,1);       ftextout("DR7",6,20,0,1);
      ftextout("<F2>",7,0,0,1);       ftextout("MV2",7,20,0,1);
      ftextout("<F3>",8,0,0,1);       ftextout("MV3",8,20,0,1);
      ftextout("<F4>",9,0,0,1);       ftextout("MV4",9,20,0,1);
      ftextout("<F5>",10,0,0,1);       ftextout("P_Leitung",10,20,0,1);
    }
    else
    { ftextout("<F1>",6,0,0,1);       ftextout("DR7",6,20,0,1);
      ftextout("<F3>",8,0,0,1);       ftextout("IL ",8,20,0,1);
      ftextout("<F4>",9,0,0,1);       ftextout("SL ",9,20,0,1); 
      ftextout("<F5>",10,0,0,1);       ftextout("P_Leitung",10,20,0,1);
    };
    
    ftextout("< Shift + F1 >",12,0,0,1);      ftextout("EDS1",12,20,0,1);
    ftextout("< Shift + F2 >",13,0,0,1);      ftextout("EDS2",13,20,0,1); 
    ftextout("< Shift + F3 >",14,0,0,1);      ftextout("EDS3",14,20,0,1); 
    ftextout("< Shift + F4 >",15,0,0,1);      ftextout("EDS4",15,20,0,1); 
    ftextout("< Shift + F5 >",16,0,0,1);      ftextout("EDS5",16,20,0,1); 
    ftextout("< Shift + F6 >",17,0,0,1);      ftextout("EDS6",17,20,0,1); 

    ftextout("<F10>",18,0,0,1);     ftextout("Kombi",18,20,0,1); 
 
    ftextout("< Shift > + < F9 >  Zurück"                           ,29,0,0,1);    
    ftextout("< Shift > + < F10 >  Ende"                            ,29,35,0,1); 
    
    ftextout("Bedingungen für Ansteuerung müssen erfüllt sein!   Nab <100 min-1  Nmot < 100 min-1  Ntu < 100 min-1",22,0,0,1); 
}


MENU m_main()
{
  INIT
    {
    setmenutitle("Hauptmenü");
    }
  ITEM ( 1 ,"Info")
    {
    setscreen(s_info,TRUE);
    setmenu(m_info);
    }
  ITEM ( 2 ,"Ident")
    {
    setscreen(s_ident,TRUE);
    setmenu(m_ident);
    }
  ITEM ( 3 ,"Adaption")  
    {
    setscreen(s_adapt ,TRUE);
    setmenu(m_adapt);
    }
  ITEM ( 4 ,"Fehler")
    {
    setscreen(s_fehler ,TRUE);
    setmenu(m_fehler);
    }
  ITEM ( 5 ,"Status")
    {
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
  ITEM ( 6 ,"Steuern")
    {
   
     setscreen(s_steuern,TRUE);
     setmenu(m_steuern);
    
    }
  
  ITEM ( 7 ,"Speicher")
    {
   
     setscreen(s_speicher,TRUE);
     setmenu(m_speicher);
    
    }
  
  ITEM ( 8 ,"AIF")
    {
    setscreen(s_identaif,TRUE);
    setmenu(m_identaif);
    }
  ITEM ( 9 ,"Kommunik.")
    {
    setscreen(s_kommunikation,TRUE);
    setmenu(m_kommunikation);
    }      
  ITEM (10 ,"Flashver.")
    {
    setscreen(s_flashverifikation,TRUE);
    setmenu(m_flashverifikation);
    
    }      
    
  ITEM ( 11 ,"Boot")
    {
    setscreen(s_bootident,TRUE);
    setmenu(m_bootident);
    }
   ITEM ( 12 ,"Codierung")
    {
    setscreen(s_codierung,TRUE);
    setmenu(m_codierung);
    } 
   ITEM ( 19 ,"Zurück")
    {
     fileclose();
     file_da=FALSE;
     exit();
    }   
     
  ITEM ( 20 ,"Ende")
    {
     fileclose();
     file_da=FALSE;
     exit();
    }
}


MENU m_adapt()
{
  INIT
    {
    setmenutitle("Adaptionswerte");
    }
    
   ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    }   
   
   ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
   ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
    
   ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
   
   ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
    }                               
    
    ITEM ( 10 ,"Rücksetzen")
     {
      userboxclose(0);
      viewclose();
      inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                   "","Nein","Ja");
      getinputstate(input_state);
      if((input_state==input_ok)&&(logik_var==TRUE))
        {
         userboxopen(0,8,20,5,50,"Adaptionswerte ","");
         userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
         delay(500);
         userboxclose (0);
         INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
         INPAapiResultText(text_var,"JOB_STATUS",1,""); 
         if (text_var!="OKAY")
          {
           inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                   +" Weiter?","Nein","Ja");
           getinputstate(input_state);
           if((input_state==input_ok)&&(logik_var==FALSE))        exit();
           userboxclose (0);
          }        
        }
     }
   
    ITEM ( 19 ,"Zurück")
     {
      userboxclose(0);
      viewclose();
      setscreen( s_main ,TRUE);
      setmenu( m_main );
     }   
     
    ITEM ( 20 ,"Ende")
     {
      fileclose();
      file_da=FALSE;
      exit();
     }
}

MENU m_adapt_flare()
{
  INIT
    {
    setmenutitle("Flare Adaption");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
      
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
       ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
   }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
          
   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_adapt_glue()
{
  INIT
    {
    setmenutitle("GLUE");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
    
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
    
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
       ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
    }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
   
   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_adapt_gls()
{
  INIT
    {
    setmenutitle("GLS");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
      
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
       ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
   }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }

   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_adapt_sf_pf_pfn()
{
  INIT
    {
    setmenutitle("Schnellfüllzeit & Fülldruck");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
      
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
       ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
   }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
 
   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_adapt_gangeinlegen()
{
  INIT
    {
    setmenutitle("Gangeinlegen");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
     
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
       ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
   }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }

   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_adapt_ada_beeinflussung()
{
  INIT
    {
    setmenutitle("Ada-Beeinflussung");
    }
    
    ITEM ( 1 ,"Flare")
    {
    setscreen(s_adapt_flare,TRUE);
    setmenu(m_adapt_flare);
    }      
    
   ITEM ( 2 ,"GLUE")
    {
    setscreen(s_adapt_glue,TRUE);
    setmenu(m_adapt_glue);
    }  
    
    ITEM ( 3 ,"GLS")
    {
    setscreen(s_adapt_gls,TRUE);
    setmenu(m_adapt_gls);
    } 
    
    ITEM ( 4 ,"SF+PF")
    {
    setscreen(s_adapt_sf_pf_pfn,TRUE);
    setmenu(m_adapt_sf_pf_pfn);
    } 
      
    ITEM ( 5 ,"Gangeinlegen")
    {
    setscreen(s_adapt_gangeinlegen,TRUE);
    setmenu(m_adapt_gangeinlegen);
    }
   
    ITEM ( 6 ,"Ada")
    {
    setscreen(s_adapt_ada_beeinflussung,TRUE);
    setmenu(m_adapt_ada_beeinflussung);
    }
    
      ITEM ( 7 ,"Puls")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Pulsadationswerte","Wollen Sie die Pulsadaptionen löschen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Pulsadationswerte ","");
       userboxftextout(0,"Pulsadpationswerte werden gelöscht!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_PULSADAPTIONSWERTE_LOESCHEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }
    
    ITEM ( 9 ,"Speichern")
    {
     userboxclose(0);
     viewclose();
     INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen

     // Eingabe: Filename, Identifizierungsdaten
     inputtext(file,"Filename","Dateiname fuer Adaptionswerte und SG-Status eingeben!");
     getinputstate(input_state);
     if (input_state==input_ok)
     {
       INPAapiFsLesen_neu(sgbd,file);
       if (user_ausstieg==0)
         { userboxclose(0); viewopen(file,"Adaptionswerte + FS speichern"); };
     }
   }                               
    
  ITEM ( 10 ,"Rücksetzen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Adaptionswerte","Wollen Sie die Adaptionswerte rücksetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Adaptionswerte ","");
       userboxftextout(0,"Adaptionswerte werden rückgesetzt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_ADAPTIONSWERTE_RUECKSETZEN","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
    }
   }

   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_adapt ,TRUE);
    setmenu( m_adapt );
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_flashverifikation()
{
  INIT
    {
    setmenutitle("Flashverifikation");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}




MENU m_kommunikation()
{
  INIT
    {
    setmenutitle("Kommunikation");
    }
  ITEM ( 1 ,"Reset")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"EGS Reset","Wollen Sie einen EGS Reset durchführen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"EGS Reset","");
       userboxftextout(0,"EGS Reset wird durchgeführt!",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"RESET_EGS","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
       
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }  
  
   ITEM ( 2 ,"Sleep")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"EGS Sleep Mode","Wollen Sie die EGS in den Sleep Mode versetzen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"EGS Sleep Mode","");
       userboxftextout(0,"EGS wird in Sleep Mode versetzt",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"SLEEP_MODE","","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }  
   
   ITEM ( 3 ,"Stop")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"EGS CAN Kommunikation","Wollen Sie die EGS CAN-Kommunikation stoppen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"EGS CAN Kommunikation","");
       userboxftextout(0,"EGS stoppt CAN-Kommunikation",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"NORMALER_DATENVERKEHR","nein;ja","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }  
    
   ITEM ( 4 ,"Start")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"EGS CAN Kommunikation","Wollen Sie die EGS CAN-Kommunikation starten? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"EGS CAN Kommunikation","");
       userboxftextout(0,"EGS startet CAN-Kommunikation",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"NORMALER_DATENVERKEHR","ja;ja","");
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }  
    
  ITEM ( 5 ,"Gang EIN")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Kombi Ganganzeige","Wollen Sie die Ganganzeige im Kombi starten? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Kombi Ganganzeige","");
       userboxftextout(0,"Ganganzeige im Kombi EIN",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_GANGANZEIGE_STARTEN","","");
       test_var_gang=1;
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }    
  
  ITEM ( 6 ,"Gang AUS")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Kombi Ganganzeige","Wollen Sie die Ganganzeige im Kombi stoppen? "+
                 "","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Kombi Ganganzeige","");
       userboxftextout(0,"Ganganzeige im Kombi AUS",1,3,0,0);
       delay(500);
       userboxclose (0);
       INPAapiJob(sgbd,"STEUERN_GANGANZEIGE_STOPPEN","","");
       test_var_gang=0;
       INPAapiResultText(text_var,"JOB_STATUS",1,""); 
       if (text_var!="OKAY")
        {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +" Weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        }        
      }
      setmenu(m_kommunikation);
      setscreen(s_kommunikation,TRUE);
    }    
      
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
   ITEM ( 20 ,"Ende")
    {
     fileclose();
     file_da=FALSE;
     exit();
    }  
}

MENU m_fehler()
{
  INIT
    {
    setmenutitle("Fehlerspeicher, Ersatzfunktionen");
    }
  ITEM ( 1 ,"Lese FS")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_fslesen,TRUE);
    setmenu(m_fslesen);
    }
  ITEM ( 3 ,"FS Löschen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Fehlerspeicher löschen","Wollen sie den Fehlerspeicher "+
                 "wirklich löschen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Fehlerspeicher löschen","");
       userboxftextout(0,"Der Fehlerspeicher wird gelöscht!",1,3,0,0);
       INPAapiJob(sgbd,"FS_LOESCHEN","","");
       delay(500);
       //INPAapiCheckJobStatus("OKAY");
       userboxclose (0);
       
      }
      setmenu(m_fehler);
      setscreen(s_fehler,TRUE);
    }
  ITEM ( 4 ,"SigStati")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_sigstati,TRUE);
    setmenu(m_sigstati);
    }
  ITEM ( 6 ,"Backup")
    {
    
     userboxclose(0);
     viewclose();
     setscreen(s_backup_1,TRUE);
     setmenu(m_backup_1);
    
    }  
  
   ITEM ( 7 ,"Zaehler")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_infozaehler,TRUE);
    setmenu(m_infozaehler);
    }    
    
    ITEM ( 8 ,"Timeout")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_timeout,TRUE);
    setmenu(m_timeout);
    }    
    
    ITEM ( 9 ,"CS/Alive")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_sa,TRUE);
    setmenu(m_sa);
    }    

   ITEM ( 2 ,"FS-->file")
   {
    
    userboxclose(0);
    viewclose();
    INPAapiFsMode_neu(0x1FF,"w","","","FS_LESEN"); // alles Anzeigen
    // Eingabe: Filename, Identifizierungsdaten
    inputtext(file,"Filename","Dateiname fuer Fehlerspeicher und SG-Status eingeben!");
    getinputstate(input_state);
    if (input_state==input_ok)
    {
      INPAapiFsLesen_neu(sgbd,file);
      if (user_ausstieg==0)
      { userboxclose(0);
        viewopen(file,"Fehlerspeicher lesen");  
      }
    }
   }    
    
  ITEM ( 5 ,"Ersatzfkt.")
    {
   
     userboxclose(0);
     viewclose();
     setscreen( s_ersatz ,TRUE);
     setmenu( m_ersatz );
   
    }  
    
  ITEM ( 10 ,"Lese IS")
    {
    userboxclose(0);
    viewclose();
    setscreen(s_islesen,TRUE);
    setmenu(m_islesen);
    }  
    
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}


MENU m_sigstati()
{
  INIT
    {
    setmenutitle("Sicherungsfunktionen aktiv");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_timeout()
{
  INIT
    {
    setmenutitle("Timeoutdiagnose aktiv");
    }
  ITEM ( 1 ,"RS Lernfkt.")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Reset Lernfunktionen","Wollen Sie wirklich alle Lernfunktionen"+
                 " zurücksetzen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Fehlerspeicher löschen","");
       userboxftextout(0,"Die Lernfunktionen werden zurückgesetzt!",1,3,0,0);
       INPAapiJob(sgbd,"STEUERN_LERNFUNKTIONEN_RUECKSETZEN","","");
       delay(500);
       userboxclose (0);
       
      }
      setmenu(m_timeout);
      setscreen(s_timeout,TRUE);
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_sa()
{
  INIT
    {
    setmenutitle("Status Standardabsicherung");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_infozaehler()
{
  INIT
    {
    setmenutitle("Info-/Fehlerzähler im EEPROM");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_ersatz()
{
  INIT
    {
    setmenutitle("Ersatzfunktionen aktiv");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_identaif()
{
  INIT
    {
    setmenutitle("AIF BRIF/ZIF/DIF");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_speicher()
{
  INIT
    {
    setmenutitle("Speicher lesen");
    }
  ITEM ( 1 ,"Wert 1")
    {
    userboxclose(0);
    viewclose();
    inputtext(wert1_text,"Wert 1","Eingabe des Namens:" );
    inputtext(speicher_seg_1,"Wert 1","Eingabe des Segments: ROMI,ROMX,RAMIS,RAMXX,RAMIL" );
    inputint(zahl_adresse_1,"Wert 1","Eingabe der Startadresse",0,10000 );
    inputint(wert1_lang,"Wert 1","Eingabe der Länge",0,8 );
    wert1=1; 
    }  
  ITEM ( 2 ,"Wert 2")
    {
    userboxclose(0);
    viewclose();
    inputtext(wert2_text,"Wert 2","Eingabe des Namens:" );
    inputtext(speicher_seg_2,"Wert 2","Eingabe des Segments: ROMI,ROMX,RAMIS,RAMXX,RAMIL" );
    inputint(zahl_adresse_2,"Wert 2","Eingabe der Startadresse",0,10000 );
    inputint(wert2_lang,"Wert 2","Eingabe der Länge",0,8 );
    wert2=1; 
    }  
   ITEM ( 3 ,"Wert 3")
    {
    userboxclose(0);
    viewclose();
    inputtext(wert3_text,"Wert 3","Eingabe des Namens:" );
    inputtext(speicher_seg_3,"Wert 3","Eingabe des Segments: ROMI,ROMX,RAMIS,RAMXX,RAMIL" );
    inputint(zahl_adresse_3,"Wert 3","Eingabe der Startadresse",0,10000 );
    inputint(wert3_lang,"Wert 3","Eingabe der Länge",0,8 );
    wert3=1; 
    }  
   ITEM ( 4 ,"Wert 4")
    {
    userboxclose(0);
    viewclose();
    inputtext(wert4_text,"Wert 4","Eingabe des Namens:" );
    inputtext(speicher_seg_4,"Wert 4","Eingabe des Segments: ROMI,ROMX,RAMIS,RAMXX,RAMIL" );
    inputint(zahl_adresse_4,"Wert 4","Eingabe der Startadresse",0,10000 );
    inputint(wert4_lang,"Wert 4","Eingabe der Länge",0,8 );
    wert4=1; 
    }  
  ITEM ( 5 ,"Wert 5")
    {
    userboxclose(0);
    viewclose();
    inputtext(wert5_text,"Wert 5","Eingabe des Namens:" );
    inputtext(speicher_seg_5,"Wert 5","Eingabe des Segments: ROMI,ROMX,RAMIS,RAMXX,RAMIL" );
    inputint(zahl_adresse_5,"Wert 5","Eingabe der Startadresse",0,10000 );
    inputint(wert5_lang,"Wert 5","Eingabe der Länge",0,8 );
    wert5=1; 
    }    
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}


MENU m_info()
{
  INIT
    {
    setmenutitle("Information INPA und SGBD");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_ident()
{
  INIT
    {
    setmenutitle("EGS Identifikation");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_bootident()
{
  INIT
    {
    setmenutitle("EGS Boot-Identifikation");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_codierung()
{
  INIT
    {
    setmenutitle("EGS Status Codierung");
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }

}

MENU m_mv_eds()
{
  INIT
    {
    setmenutitle("Magnetventile, EDS");
    }
     
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
        
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_schaltung_es()
{
  INIT
    {
    setmenutitle("Schaltung ES");
    }
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_es,TRUE);
     setmenu(m_schaltung_es);
    }    
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
  ITEM ( 6 ,"E-Schaltung")
    {
    userboxclose(0);
    setscreen(s_e_schaltung,TRUE);
    setmenu(m_e_schaltung);
    }
  ITEM ( 7 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 8 ,"Auswahl")
    {
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    } 
    
   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_schaltung_ms()
{
  INIT
    {
    setmenutitle("Schaltung MS");
    }
  
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}
MENU m_e_schaltung()
{
  INIT
    {
    setmenutitle("E Schaltung");
    }
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_es,TRUE);
     setmenu(m_schaltung_es);
    }    
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
  ITEM ( 6 ,"E-Schaltung")
    {
    userboxclose(0);
    setscreen(s_e_schaltung,TRUE);
    setmenu(m_e_schaltung);
    }
  ITEM ( 7 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 8 ,"Auswahl")
    {
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    } 
    
   ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
   ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_drehzahlen()
{
  INIT
    {
    setmenutitle("Drehzahlen, Geschwindigkeit");
    }
  
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_motor()
{
  INIT
    {
    setmenutitle("Motor");
    }
  
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_getriebe()
{
  INIT
    {
    setmenutitle("Getriebe");
    }
  
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_temperatur()
{
  INIT
    {
    setmenutitle("Temperaturkollektiv");
    }
  
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
  
  ITEM ( 18 ,"Speichern")
    {      
    	userboxclose(0);
	temperaturkollektiv_speichern();
    }
  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
    
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_auswahl()
{
  INIT
    {
    setmenutitle("Benutzerdefinierte Auswahl");
    }
   
   ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
    
   ITEM ( 8 ,"Select")
    {
    enable1=1;
    start();
    select(TRUE);
    }  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    if (ESchaltung==1)
      { setscreen(s_status_es,TRUE);
        setmenu(m_status_es);
      }
    else
      { setscreen(s_status_ms,TRUE);
        setmenu(m_status_ms);
      }      
    }
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
    viewclose();
    fileclose();
    exit();
    }
}

// **************************
// *** -FSmenü      ***
// **************************
MENU m_fslesen()
{
  INIT
    {
    setmenutitle("Fehlerspeicher lesen");
    }
  ITEM ( 1 ,"FS 1")
    {
    if(fehler_ist>=1)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",1); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 2 ,"FS 2")
    {
    if(fehler_ist>=2)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",2); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
       }
    }    
  ITEM ( 3 ,"FS 3")
    {
    if(fehler_ist>=3)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",3); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 5 ,"FS 5")
    {
    if(fehler_ist>=5)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",5); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 4 ,"FS 4")
    {
    if(fehler_ist>=4)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",4); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 6 ,"FS 6")
    {
    if(fehler_ist>=6)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",6); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 7 ,"FS 7")
    {
    if(fehler_ist>=7)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",7); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 8 ,"FS 8")
    {
    if(fehler_ist>=8)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",8); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 9 ,"FS 9")
    {
    if(fehler_ist>=9)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",9); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 10 ,"FS 10")
    {
    if(fehler_ist>=10)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",10); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
 ITEM ( 11 ,"FS 11")
    {
    if(fehler_ist>=11)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",11); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 12 ,"FS 12")
    {
    if(fehler_ist>=12)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",12); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
       }
    }    
  ITEM ( 13 ,"FS 13")
    {
    if(fehler_ist>=13)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",13); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 15 ,"FS 15")
    {
    if(fehler_ist>=15)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",15); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 14 ,"FS 14")
    {
    if(fehler_ist>=14)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",14); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 16 ,"FS 16")
    {
    if(fehler_ist>=16)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",16); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 17 ,"FS 17")
    {
    if(fehler_ist>=17)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",17); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 18 ,"FS 18")
    {
    if(fehler_ist>=18)
      {
      INPAapiJob(sgbd,"FS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",18); 
      userboxclose(0);
      viewclose();
      setscreen(s_fslesenset,TRUE);
      setmenu(m_fslesenset);
      }
    }
  ITEM ( 20 ,"FS Löschen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Fehlerspeicher löschen","Wollen sie den Fehlerspeicher "+
                 "wirklich löschen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Fehlerspeicher löschen","");
       userboxftextout(0,"Der Fehlerspeicher wird gelöscht!",1,3,0,0);
       INPAapiJob(sgbd,"FS_LOESCHEN","","");
       delay(500);
       //INPAapiCheckJobStatus("OKAY");
       userboxclose (0);
       
      }
      viewclose();
      setscreen(s_fslesen,TRUE);
      setmenu(m_fslesen);
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }  
}




MENU m_islesen()
{
  INIT
    {
    setmenutitle("Infospeicher lesen");
    }
  ITEM ( 1 ,"IS 1")
    {
    if(fehler_ist>=1)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",1); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 2 ,"FS 2")
    {
    if(fehler_ist>=2)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",2); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
       }
    }    
  ITEM ( 3 ,"FS 3")
    {
    if(fehler_ist>=3)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",3); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 5 ,"FS 5")
    {
    if(fehler_ist>=5)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",5); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 4 ,"FS 4")
    {
    if(fehler_ist>=4)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",4); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 6 ,"FS 6")
    {
    if(fehler_ist>=6)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",6); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 7 ,"FS 7")
    {
    if(fehler_ist>=7)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",7); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 8 ,"FS 8")
    {
    if(fehler_ist>=8)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",8); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 9 ,"FS 9")
    {
    if(fehler_ist>=9)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",9); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
  ITEM ( 10 ,"FS 10")
    {
    if(fehler_ist>=10)
      {
      INPAapiJob(sgbd,"IS_LESEN","",""); 
      INPAapiResultInt(fehlercode,"F_ORT_NR",10); 
      userboxclose(0);
      viewclose();
      setscreen(s_islesenset,TRUE);
      setmenu(m_islesenset);
      }
    }
 
  ITEM ( 13 ,"IS Löschen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Infospeicher löschen","Wollen sie den Infospeicher "+
                 "wirklich löschen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Infospeicher löschen","");
       userboxftextout(0,"Der Infospeicher wird gelöscht!",1,3,0,0);
       INPAapiJob(sgbd,"IS_LOESCHEN","","");
       delay(500);
       //INPAapiCheckJobStatus("OKAY");
       userboxclose (0);
       
      }
      viewclose();
      setscreen(s_islesen,TRUE);
      setmenu(m_islesen);
    }
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fehler ,TRUE);
    setmenu( m_fehler );
    }  
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
  
    viewclose();
    fileclose();
    exit();
    }
}



MENU m_fslesenset()
{
  INIT
    {
      setmenutitle("Fehlerspeicher lesen");
    }

  ITEM ( 1 ,"UW Satz 1")
    {
      if(anzahl_uw_saetze>=1)
      {
        setscreen(s_fslesenset,TRUE);
      }
    }
    
   
  ITEM ( 2 ,"UW Satz 2")
    {
      if(anzahl_uw_saetze>=2)
      {  
        setscreen(s_fslesenset_uw2,TRUE);
      }
    }    
  ITEM ( 3 ,"UW Satz 3")
    {
    if(anzahl_uw_saetze>=3)
      {
      setscreen(s_fslesenset_uw3,TRUE);
      }
    }
  ITEM ( 13 ,"FS Löschen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Fehlerspeicher löschen","Wollen sie den Fehlerspeicher "+
                 "wirklich löschen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Fehlerspeicher löschen","");
       userboxftextout(0,"Der Fehlerspeicher wird gelöscht!",1,3,0,0);
       INPAapiJob(sgbd,"FS_LOESCHEN","","");
       delay(500);
       //INPAapiCheckJobStatus("OKAY");
       userboxclose (0);
       
      }
    viewclose();
    setmenu(m_fslesen);
    setscreen(s_fslesen,TRUE);
    }  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_fslesen ,TRUE);
    setmenu( m_fslesen );
    }  
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
  
    viewclose();
    fileclose();
    exit();
    }
}



MENU m_islesenset()
{
  INIT
    {
      setmenutitle("Infospeicher lesen");
    }

  ITEM ( 1 ,"UW Satz 1")
    {
      if(anzahl_uw_saetze>=1)
      {
        setscreen(s_islesenset,TRUE);
      }
    }
    
   
  ITEM ( 2 ,"UW Satz 2")
    {
      if(anzahl_uw_saetze>=2)
      {  
        setscreen(s_islesenset_uw2,TRUE);
      }
    }    
  ITEM ( 3 ,"UW Satz 3")
    {
    if(anzahl_uw_saetze>=3)
      {
      setscreen(s_islesenset_uw3,TRUE);
      }
    }
  ITEM ( 13 ,"IS Löschen")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Infospeicher löschen","Wollen sie den Infospeicher "+
                 "wirklich löschen?","Nein","Ja");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==TRUE))
      {
       userboxopen(0,8,20,5,50,"Infospeicher löschen","");
       userboxftextout(0,"Der Infospeicher wird gelöscht!",1,3,0,0);
       INPAapiJob(sgbd,"IS_LOESCHEN","","");
       delay(500);
       //INPAapiCheckJobStatus("OKAY");
       userboxclose (0);
       
      }
    viewclose();
    setmenu(m_islesen);
    setscreen(s_islesen,TRUE);
    }  
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    viewclose();
    setscreen( s_islesen ,TRUE);
    setmenu( m_islesen );
    }  
  ITEM ( 20 ,"Ende")
    {
    userboxclose(0);
  
    viewclose();
    fileclose();
    exit();
    }
}

MENU m_status_es()
{
  INIT
    {
    setmenutitle("Messen");
    }
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_es,TRUE);
     setmenu(m_schaltung_es);
    }    
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
  ITEM ( 6 ,"E-Schaltung")
    {
    userboxclose(0);
    setscreen(s_e_schaltung,TRUE);
    setmenu(m_e_schaltung);
    }
  ITEM ( 7 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 8 ,"Auswahl")
    {
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    } 
    
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    fileclose();
    exit();
    }
}

MENU m_status_ms()
{
  INIT
    {
    setmenutitle("Messen");
    }
    
  ITEM ( 1 ,"MV/EDS")
    {
     userboxclose(0);
     setscreen(s_mv_eds,TRUE);
     setmenu(m_mv_eds);
    }
    
  ITEM ( 2 ,"Schalt")
    {
     userboxclose(0);
     setscreen(s_schaltung_ms,TRUE);
     setmenu(m_schaltung_ms);
    } 
       
  ITEM ( 3 ,"Drehz.")
    {
    userboxclose(0);
    setscreen(s_drehzahlen,TRUE);
    setmenu(m_drehzahlen);
    }
    
  ITEM ( 4 ,"Motor")
    {
    userboxclose(0);
    setscreen(s_motor,TRUE);
    setmenu(m_motor);
    }
     
  ITEM ( 5 ,"Getriebe")
    {
    userboxclose(0);
    setscreen(s_getriebe,TRUE);
    setmenu(m_getriebe);
    }
    
  ITEM ( 6 ,"T-Kollektiv")
    {
    userboxclose(0);
    setscreen(s_temperatur,TRUE);
    setmenu(m_temperatur);
    }
    
   ITEM ( 7 ,"Auswahl")
    {
    userboxclose(0);
    setscreen(s_auswahl,TRUE);
    setmenu(m_auswahl) ;
    }
      
  ITEM ( 19 ,"Zurück")
    {
    userboxclose(0);
    setscreen( s_main ,TRUE);
    setmenu( m_main );
    }
  ITEM ( 20 ,"Ende")
    {
    fileclose();
    exit();
    }
}



MENU m_backup_1()
{
  INIT
    {
    setmenutitle("Backupfehlerspeicher lesen");
    }
  
  ITEM ( 1 ,"Eintrag 1")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",1);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_1 ,TRUE);
       setmenu( m_backup_1 );
     }
    }
    
  ITEM ( 2 ,"Eintrag 2")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",2);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_2 ,TRUE);
       setmenu( m_backup_1 );
     }
    }  
    
   ITEM ( 3 ,"Eintrag 3")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",3);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_3 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
    ITEM ( 4 ,"Eintrag 4")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",4);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_4 ,TRUE);
       setmenu( m_backup_1 );
     }
    }
    
    ITEM ( 5 ,"Eintrag 5")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",5);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_5 ,TRUE);
       setmenu( m_backup_1 );
     }
    }
 
    ITEM ( 6 ,"Eintrag 6")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",6);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_6 ,TRUE);
       setmenu( m_backup_1 );
     }
    }   
    
    ITEM ( 7 ,"Eintrag 7")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",7);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_7 ,TRUE);
       setmenu( m_backup_1 );
     }
    }  
    
    ITEM ( 8 ,"Eintrag 8")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",8);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_8 ,TRUE);
       setmenu( m_backup_1 );
     }
    }    
    
    ITEM ( 9 ,"Eintrag 9")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",9);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_9 ,TRUE);
       setmenu( m_backup_1 );
     }
    }   
    
    ITEM ( 10 ,"Eintrag 10")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_1_10_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",10);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_10 ,TRUE);
       setmenu( m_backup_1 );
     }
    }  
    
    ITEM ( 11 ,"Eintrag 11")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",11);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_11 ,TRUE);
       setmenu( m_backup_1 );
     }
    }    
    
        ITEM ( 12 ,"Eintrag 12")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",12);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_12 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
        ITEM ( 13 ,"Eintrag 13")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",13);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_13 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
        ITEM ( 14 ,"Eintrag 14")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",14);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_14 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
        ITEM ( 15 ,"Eintrag 15")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",15);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_15 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
        ITEM ( 16 ,"Eintrag 16")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",16);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_16 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
            ITEM ( 17 ,"Eintrag 17")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",17);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_17 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
            ITEM ( 18 ,"Eintrag 18")
    {
    
    INPAapiJob(sgbd,"BACKUP_FS_11_20_LESEN","","");   
    INPAapiResultInt(anzahl_uw_saetze,"HAEUFIGKEITSZAEHLER",18);
    if (anzahl_uw_saetze>0)
     {    
       setscreen( s_backup_18 ,TRUE);
       setmenu( m_backup_1 );
     }
    } 
    
   ITEM ( 19 ,"Zurück")
    {
    setscreen(s_fehler ,TRUE);
    setmenu( m_fehler );
    
    } 
     ITEM ( 20 ,"Ende")
    {
     fileclose();
     file_da=FALSE;
     exit();
    }    
  
}




MENU m_steuern()
{
  INIT
    {
    setmenutitle("Steuern");
    }
  ITEM ( 1 ,"DR7")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern DR7","Ansteuern DR7 "+
                 "EIN /AUS?","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern DR7","Dauerstrich EIN / getaktet EIN","getaktet (EIN/AUS 1s)","Dauerstrich EIN ");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","DR7;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","DR7;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","DR7;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt. Bitte Testbedingungen korrekt einstellen."
                 +"weiter?","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 2 ,"MV2")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern MV2","Ansteuern MV2 "+
                 "EIN /AUS?","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern MV2","Dauerstrich EIN / getaktet EIN","getaktet (EIN/AUS 1s)","Dauerstrich EIN ");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV2;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV2;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV2;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 3 ,"MV3")  
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern MV3","Ansteuern MV3 "+
                 "EIN /AUS?","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern MV3","Dauerstrich EIN / getaktet EIN","getaktet (EIN/AUS 1s)","Dauerstrich EIN ");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV3;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV3;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV3;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 4 ,"MV4")  
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern MV4","Ansteuern MV4 "+
                 "EIN /AUS?","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern MV4","Dauerstrich EIN / getaktet EIN","getaktet (EIN/AUS 1s)","Dauerstrich EIN ");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV4;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV4;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","MV4;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
   
     ITEM ( 5 ,"P_Leitung")  
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern P_Leitung","Ansteuern P_Leitung "+
                 "EIN /AUS?","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern P_Leitung","Dauerstrich EIN / getaktet EIN","getaktet (EIN/AUS 1s)","Dauerstrich EIN ");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","P_Leitung;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","P_Leitung;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","P_Leitung;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
   
    
  ITEM ( 11 ,"EDS1")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS1","Ansteuern EDS1 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS1","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS1;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS1;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS1;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 12 ,"EDS2")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS2","Ansteuern EDS2 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS2","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS2;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS2;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS2;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 13 ,"EDS3")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS3","Ansteuern EDS3 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS3","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS3;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS3;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS3;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 14 ,"EDS4")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS4","Ansteuern EDS4 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS4","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS4;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS4;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS4;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
  ITEM ( 15 ,"EDS5")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS5","Ansteuern EDS5 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS5","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS5;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS5;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS5;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
 
  ITEM ( 16 ,"EDS6")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern EDS6","Ansteuern EDS1 "+
                 "EIN /AUS?","EIN","AUS (50mA)");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
     {
          inputdigital(logik_var,"Ansteuern EDS6","Dauerstrich EIN / getaktet EIN","getaktet (50mA/800mA 1s)","Dauerstrich (800mA)");
          getinputstate(input_state);
          if((input_state==input_ok)&&(logik_var==TRUE))
                INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS6;EIN","");     
          else  INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS6;EIN/AUS","");
      }     
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","EDS6;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
        } 
            
    }
    
   ITEM ( 10 ,"Kombi")
    {
    userboxclose(0);
    viewclose();
    inputdigital(logik_var,"Ansteuern Kombi","Ansteuern Kombi Pfeilschema/Positionsanzeige/Ganganzeige ","EIN","AUS");
    getinputstate(input_state);
    if((input_state==input_ok)&&(logik_var==FALSE))
           INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","KOMBI;EIN","");
    else   INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED","KOMBI;AUS","");
    INPAapiResultText(text_var,"JOB_STATUS",1,""); 
    if (text_var!="OKAY")
       {
         inputdigital(logik_var,"!!Fehler!!","Testbedingungen nicht erfüllt                        "+"            Bitte Testbedingungen korrekt einstellen"
                 +"               weiter??","Nein","Ja");
         getinputstate(input_state);
         if((input_state==input_ok)&&(logik_var==FALSE))        exit();
         userboxclose (0);
       }  
    }  
   ITEM ( 19 ,"Zurück")
    {
     setscreen(s_main,TRUE);
     setmenu(m_main);
    }
 
  ITEM ( 20 ,"Ende")
    {
     fileclose();
     file_da=FALSE;
     exit();
    }
}


// ****************************************************
// ***             Initialisierungsfunktion         ***
// ****************************************************
ScriptInit()
{
}

// ****************************************************************************
// ***                         U S E R - Funktionen                         ***
// ****************************************************************************

// Ausgabe eines Ergebnisses des 1. Satzes als Text mit Job-Status-Ueberpruefung
ergebnisTextAusgabe(in: string ergebnis,in: int y,in: int x,
                    in: int textgroesse, in: int textattr)
{
    string tmpText;

    INPAapiResultText(tmpText,ergebnis,1,"");
    ftextout(tmpText,y,x,textgroesse,textattr);
}

// Ausgabe eines Ergebnisses als Digitalwert des 1. Satzes mit Job-Status-Ueberpruefung
ergebnisDigitalAusgabe(in: string ergebnis,in: int y,in: int x,
                       in: string trueText,in: string falseText)
{
    bool tmpBool;
    
    INPAapiResultDigital(tmpBool,ergebnis,1);
    digitalout(tmpBool,y,x,trueText,falseText);
}

// Ansteuerung
//      info = Auszugebender Text (ohne "angesteuert")
//      pin  = Anzusteuernder Pin
ansteuerung(in: string info,in: string pin)
{
    string tmpState;

    userboxclose(0);    // bereits aktive User-Box schliessen
 
    // Ansteuern
    varText=pin+";EIN/AUS";
    INPAapiJob(sgbd,"STEUERN_SIGNAL_STELLGLIED",varText,"");
    INPAapiCheckJobStatus("OKAY");
    // Auswertung
/*
    INPAapiResultText(tmpState,"STAT_ANSTEUERUNG",1,"");
    if (tmpState=="0")
        varText=" wird ordnungsgemäß angesteuert";
    else
        if (tmpState=="1")
            varText=": Pin-Nr ist unbekannt!";
        else
            if (tmpState=="4")
                varText=": Stellglied nicht ansteuerbar!";
            else
                varText=": Steuergerät sendet undefinierte Antwort";
    userboxopen(0,20,20,3,50,
                        "Steuern",
                        "    "+info+varText);
*/  
    varText=" wird ordnungsgemäß angesteuert";
    userboxopen(0,20,20,3,50,
                        "Steuern",
                        "    "+info+varText);
      // sicherheitshalber neu starten
    start();
}


// ****************
// *** inpainit ***
// ****************

inpainit()
{
   ScriptInit();
   INPAapiInit();
   settitle (" GS19.11  6HPTÜ  EA-71 Version" );
   sgbd="GS19D";       
   userboxclose(0);
   viewclose();
   ftextout("EGS GS191103 EA-71 Version",1,23,1,1);
   
   /* Konfiguration nach Fahrzeug-Projekt */
   /***************************************/
   userboxopen(0,4,0,15,40,"Auswahl Fahrzeug-Projekt 6HPTÜ","Optionen Fahrzeugprojekt / Zugriffsart");
   userboxftextout(0,"  1) E70 über OBD-Dose",3,0,0,0); 
   userboxftextout(0,"(Zugriff BMW-FAST)",3,25,0,0);
   userboxftextout(0,"  2) E70 über Getriebe-K-Line",4,0,0,0); 
   userboxftextout(0,"(Zugriff KPW2000)",4,25,0,0);
   userboxftextout(0,"  3) E6x über OBD-Dose",6,0,0,0); 
   userboxftextout(0,"(Zugriff BMW-FAST)",6,25,0,0);
   userboxftextout(0,"  4) E6x über Getriebe-K-Line",7,0,0,0); 
   userboxftextout(0,"(Zugriff KPW2000)",7,25,0,0);
   userboxftextout(0,"  5) PL2 über OBD-Dose",9,0,0,0); 
   userboxftextout(0,"(Zugriff BMW-FAST)",9,25,0,0);
   userboxftextout(0,"  6) PL2 über Getriebe-K-Line",10,0,0,0); 
   userboxftextout(0,"(Zugriff KPW2000)",10,25,0,0);
   userboxftextout(0,"  7) E83 über Getriebe-K-Line",12,0,0,0); 
   userboxftextout(0,"(Zugriff KPW2000)",12,25,0,0);
   inputint(FzgProjZugriff,"Fahrzeugprojekt / Zugriffsart"," Bitte Konfigurationsnummer eingeben (siehe Fenster links)",1,7);
   getinputstate(input_state);
   if (input_state==1) exit();
   userboxclose (0);  
       
   /*if ((FzgProjZugriff==1) || (FzgProjZugriff==3) || (FzgProjZugriff==5))
      {
       INPAapiJob(sgbd,"DIAGNOSEPROTOKOLL_SETZEN","BMW-FAST","");   
      } 
    else
      {
       INPAapiJob(sgbd,"DIAGNOSEPROTOKOLL_SETZEN","KWP2000",""); 
       }
        
       counter=0; text_var="";
       while (counter<30)
       { INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","",func_io);     
         if (func_io=="OKAY") counter=30;
         counter=counter+1;
       }
    */  
    
    ESchaltung=0; MSchaltung=0; 
    Fzg_E65=0; Fzg_E6x=0; Fzg_PL2=0; Fzg_E83=0;
    if ((FzgProjZugriff==1) || (FzgProjZugriff==2)) { ESchaltung=1; Fzg_E65=1; };
    if ((FzgProjZugriff==3) || (FzgProjZugriff==4)) { ESchaltung=1; Fzg_E6x=1; };
    if ((FzgProjZugriff==5) || (FzgProjZugriff==6)) { MSchaltung=1; Fzg_PL2=1; };
    if  (FzgProjZugriff==7)                         { MSchaltung=1; Fzg_E83=1; };
      
    // Erkennung SW-Stand  
    ftextout("EGS GS 19 EA-71 Version",2,1,1,1);    
    INPAapiJob(sgbd,"STATUS_SW_STAND_ENTWICKLUNG","","");     
    INPAapiResultText(text_var,"STAT_PROGRAMMSTAND_TEXT",1,"");
    
    INPAapiJob(sgbd,"DIAGNOSEPROTOKOLL_LESEN","","");     
    INPAapiResultText(text_var_1,"DIAG_PROT_IST",1,"");
    
    userboxopen(0,10,15,5,50,"Check SW-Stand"," EGS SW-Stand: "+text_var);
    userboxftextout(0," ",1,0,0,0);
    userboxftextout(0," Erkanntes Diagnoseprotokoll : "+text_var_1,2,0,0,0); 
    userboxftextout(0," ",3,0,0,0);
    userboxftextout(0," Fragen bitte an EA-71 Reuter / Bravo, Tel. 31079 / 53632",4,0,0,0);
 
    delay(4000); 
    userboxclose (0);  
       
    INPAapiJob(sgbd,"INFO","","");
    INPAapiResultText(sgbd_ecu,"ECU",1,"");
    INPAapiResultText(sgbd_revision,"REVISION",1,"");
    INPAapiResultText(sgbd_origin,"ORIGIN",1,"");
    INPAapiResultText(sgbd_comment,"COMMENT",1,"");
    INPAapiResultText(sgbd_sprache,"SPRACHE",1,"");
  
    setmenu(m_main);
    setscreen(s_main,TRUE);
} 

// ****************
// *** inpaexit ***
// ****************
inpaexit()
{
  INPAapiEnd();
} 
